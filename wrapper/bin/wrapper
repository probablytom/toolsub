#!/usr/bin/env bash

# Translate complex compiler driver invocations into simple and
# (optionally) wrappable compilation steps: preprocess, compile,
# assemble, link. We work in one of two ways.
#
# (1) Using gcc's -wrapper option, the compiler driver will invoke
# us instead of cc1, etc., with the full subcommand path as $1.
# The default behaviour is to perform a series of single-operation
# (preprocess or compile or assemble or link) invocations of the
# compiler driver (gcc) for preprocess/compile or the separate tool
# (as, collect2) for assemble/link. However, each of those operations can be
# customised by setting environment variables:
#
# CPP       default: $CC_DRIVER -E      where CC_DRIVER is inferred
# CC        default: $CC_DRIVER -S      where CC_DRIVER is inferred
# AS        default: as                 FIXME: should be "whatever assembler the driver would run"?
# LD        default: ld                 (not collect2, because we have a nice way of wrapping that)
#
# (These variables denote replacement commands; they do not receive a further
# command as their first argument -- unlike this wrapper script itself, when
# it is run e.g. by gcc -wrapper. Each variable's string value is subject to
# shell expansion and word splitting, so can be multiple commands and use
# $VARIABLES. Some useful variables are set by this script. FIXME: document.)
#
# ... and this script is designed to be extended by a client that
# sources it, so the replacement commands can be shell functions.
#
# (2) Or we can be run as 'ccwrap', or anything matching '*wrap',
# and the compiler driver command in $@, and we will interrogate the
# compiler using -### and re-invoke ourselves as a wrapper. This is
# useful for clang which does not understand -wrapper but does
# understand -###. Again, constituent subcommands will be rewritten. In
# fact we use -### to emulate option 1: each subcommand is run under
# the wrapper.
#
#   ABOUT collect2: it is used to implement global initialization and destruction
#   in the GNU toolchain, without assuming a loader that supports such features
#   natively. I think any statically linked environment might not?
#   It pulls in __main from libgcc and ensures it has a table of constructors
#   to run. On ELF platforms under static linking, do .ctors and .dtors and .init and .fini
#   and .init_array and .fini_array take effect in the loader? Or is this mechanism
#   i.e. explicit startup code for doing so, needed?
#   Since there is no .dynamic section mandated and no section headers need be present either,
#   I guess it is needed?
#
# SANITY CHECK: how can we use the above to run, say, cilpp -real-cpp '$driver -E' -plugin foo.cmx -fpass-foo ?
# I think so. Run the wrapper with CPP="cilpp -real-cpp \"$CC_DRIVER -E\""
# and the wrapper will set CC_DRIVER as needed. FIXME: who transforms -Wp,BLAH ?
# GAH. Possible problem with -Wp,-blah. It has already been lowered to -blah in the
# cc1 command, so it needs to be lifted back up to -Wp,-blah for the driver command.
# YES. This is where glibly defaulting CPP to "$CC_DRIVER -E" is not right.

# So what's our contract? We can undertake to lift and lower as needed, but if
# we lifted from cc1 to driver, it means CPP can never be a bone fide cpp command.
# That is at least consistent with 'make'. However, it falls short of what we
# hoped which is that in the design of 'cilpp' or another CPP-satisfying tool it
# can be left to the caller: if they supply cpp-style args then the delegated-to
# command can be cpp, otherwise it can be cc -E. Hmm, or does it fall short? I think
# cilpp can plausibly still be written this way, just that currently we always give
# it driver-style args and a driver-based -real-cpp. But we
# should be able to write it s.t. the real requirement is just that the args we
# give it are well-matched to what we give it as -real-cpp -- but they could be
# driver-style or cpp-style or something else entirely.
#
# I considered providing a property about arg order as documented in cilpp.ml, so that
#  -o and -Wp,* and -Xpreprocessor * would appear before other arguments.
# GAH, but with the linker this is a bad idea: -Wl,--start-group and -Wl,--end-group
# need to have their order preserved w.r.t. other arguments.

# Since we want to be the unique script that undertakes to understand all cc/cc1
# options and whether they take an argument, we can (in principle) reliably detect
# '-Wp,blah'. Maybe we need to create a side channel, "CPP_TARGETED_OPTS" and pass
# that, i.e. to explicitly identify relevant options to tools, so they needn't grok the
# whole command line. E.g. a tool like cilpp that does not understand the entire
# driver command line can still identify the options that are directed at it. Otherwise,
# once it sees an option it doesn't recognise, it'd have to ignore all later options.
# If it gets CPP_TARGETED_OPTIONS, then it knows that -o ... and -MF ...
# and -fpass-* and -fplugin=* will all be identified in that variable.
# BUT PROBLEM: it still wants to delete them from the command line, to avoid passing
# them to the real cpp... and if they are not unique, e.g. because one is really a
# filename, then which one to delete? CPP_TARGETED_OPTIONS could identify the positions too.
#
# We are then basically doing the cmdline-scanning on behalf of the cpp wrapper tool.
# But for a single-tool invocation, aren't *all* options "targeted"? What
# does "targeted" mean? In our case we know there are some options that cilpp
# will process. So those are the "targeted" ones. But that's coupling to a
# particular tool behaviour... how does this generalise?

# I think the answer is that as well as CPP="cppwrapper" we need CC_IDENTIFY_ARGS="-fpass-JARG"
# i.e. to provide a vaguely getopt-like description of the arguments that our wrapper
# cares about. Then our scanner can pass these as CC_IDENTIFIED_ARGS="1-fpass-dumpallocs"
# OR should that be "1-Wp,-fpass-dumpallocs"?
# i.e. how does this interact with lifting?
# It's our design that we want to lift the cc1 command back to a driver command.
# so that our wrapper is specified as CPP="cilpp -real-cpp \"$CC_DRIVER -E\""
# and we will expand the $CC_DRIVER when we run it.
# Then what goes in the above CC_IDENTIFY_ARGS and CC_IDENTIFIED_ARGS?
# Our wrapper does not care whether its targeted options were decorated with
# -Wp,*, -Xpreprocessor or so on. But then, it is masquerading as a driver so
# it does, after all, care about processing those.
#
# Perhaps the rule is that (1) we always lift using -Xpreprocessor, and (2)
# we identify only the CPP opt words, not the -Xpreprocessor bit. The tool
# is going to pass through most options to the inferior tool, regardless of
# whether that is emulating the driver or cc1 or cpp.
# 
# Maybe we want to support CPP_IS_DRIVER or CPP_IS_CC1LIKE, and forget about
# lifting for cilpp? AH NO, but if we don't lift then we can't use 'cc -E' as
# the "real CPP"!
#
# We just say that CC_IDENTIFIED_ARGS is non-lifted, but can be non-contiguous.
# It works by identifying argument positions... if we had to lift them in order to
# push them through the driver, we inserted -Xpreprocessor beforehand, but the
# position we include in CC_IDENTIFIED_ARGS is the bona-fide position, not the
# position of -Xpreprocessor.
#
# This might be weird in the case of -MD <file> as seen by cc1. Should the cilpp
# or similar tool really have to know about this? I think we have to rely on
# normalizing that away... it is super-irregular. (CHECK: does clang's cc1 have
# this problem? NO, but it expands to a "-dependency-file" option. GAH. So
# how would we run this by our cilpp-like tool? It does not lift straightforwardly
# so ...)

# Note that there is no -Xcompiler option.

# If we are symlinked under a name ending '-cflags', '-cppflags',
# '-ldflags' etc, we print out the options that one should pass
# to the compiler for the wrapper to be employed. So you can do
#
# gcc `/path/to/this/file/wrapper-cflags` <... normal gcc args...>
#
# to run with the alternative cpp, and so on.

if [[ -n "$PROFILE_CC_WRAPPER" ]]; then
    if ! [[ -r /proc/timer_list ]]; then
        echo "WARNING: not profiling; check that /proc/timer_list exists and is readable" 1>&2
    else
        echo "Profile columns: <last command time> <total time> <last command>" 1>&2
        . "$(dirname "$0")"/elap.bash-v2 trap2
    fi
    # FIXME: the use of awk means that profiling output is noised up
    # ... as a workaround I have been doing 2>&1 | sed 's/\(awk[_a-z]*=\).*/\1(elided)/'
fi

debug_print () {
    lvl="$1"
    shift
    if [[ "$DEBUG_CC" -ge $lvl ]]; then
        echo "$@" 1>&2
    fi
}

# CC_DRIVER_ARGS is a single string which we expand as $CC_DRIVER_ARGS, so
# we need to quote it.
#
# Also, driver args of the form -Wp,-blah cause problems, so we reprocess
# them into -Xpreprocessor -blah and so on.
make_driver_argstring () {
    # FIXME: handle embedded single quotes
    quote_one () {
        local arg="$1"
        echo -n "'"
        printf "%s"  "${arg}" | sed "s/'/'\"'\"'/g"
        echo -n "'"
        echo -n "${IFS:-$' \t\n'}" | head -c1
    }
    while read arg; do
        pre_arg=""
        case "$arg" in
            (-Wa,*) pre_arg="-Xassembler" ;;&
            (-Wp,*) pre_arg="-Xpreprocessor" ;;&
            (-Wl,*) pre_arg="-Xlinker" ;;&
            (-W[apl],*)
                # comma-split what remains
                while read frag; do
                    quote_one "$pre_arg"
                    quote_one "$frag"
                done<<<"$( printf "%s" "$arg" | tr ',' '\n' | tail -n+2 )"
            ;;
            (*) quote_one "$arg" ;;
        esac
    done
}

our_filename="${BASH_SOURCE[0]}"
looks_like_driver_command () {
    # initially $1 is the command name
    case "$1" in
        (*sh)
            echo "Did not believe that driver is $1" 1>&2
            return 1
        ;;
        (*)
            true
        ;;
    esac
    while shift || break; do case "$1" in
        ('-wrapper')
            if [[ -n "$(readlink -f "$2")" ]] 
               #&& \
               #[[ "$(readlink -f "$2" )" == "$(readlink -f "$our_filename")" ]]; then
               then
               return 0  # definitely a wrapper
               # FIXME: what about an alternative wrapper that calls us?
               # We should use our own option scanner for the driver.
               # For now, I just commented out the readlink check.
            fi
            ;;
        (*) ;;
    esac; done
    return 1
}

# REMEMBER (about naming / terminology): the entire command line consists of "args".
# Some "args" are "opts"; others are input files.
# Some args, if they follow an option that takes a separate argument, are also "optargs".
# But "optargs" can also occur within "opts"; this is the "joined argument" case.
# These terms ("separate" and "joined") are taken from the GCC documentation.

# Here is how we scrape the compiler documentation to generate our big awk programs.
# Options end either with '='  or with ' ARGSPEC' where ARGSPEC is
# something like '<arg>' or '{yes|no}' or '[...]' or exceptionally FILE
# However, ARGSPECs can also be embedded into what looks like the option name,
# as with "-Wl,<arg>" or with "-fgo-optimize-<type>"
# and argument names need not be unique, e.g. since '-std=c99' is documented separately
# from 'std=c11'.
# We assume that anything beginning '<' or '{' or '[' is an argspec and so
# should be replaced with '*'.
# We take '=' and ' ' literally, i.e. we assume that one cannot be replaced
# with another. This is necessry because gcc has both '-save-temps' (no arg)
# and '-save-temps=<arg>'.
# This means we replace '=' with '=*'. Do this first, i.e. before handling '<' etc.
#
# Finally we also handle -m*, -f* and -W* options a bit specially:
# if they don't take a SARG or JARG, we duplicate them into a -mblah and -mno-blah and so on.
select_option_doclines () { sed -n '/^[[:blank:]]\{1,8\}\([-@][^=[:blank:]<>].*\)/ {s//\1/;p}'; }
# this handles '@FILE' specially
# and the syntax for "-fopt-info[-<type>=filename]"
# and                "-fcompare-debug[=...]"
# and                "-fenable-[tree|rtl|ipa]-<pass>=range1+range2"
label_joined_args () { sed 's/=.*/=JARG/' | sed 's/@FILE/@JARG/' | \
sed 's/\(.*\)-fopt-info\[-.*/\1-fopt-info-JARG/' | \
sed 's/\(.*\)-\([-a-z0-9]*\)\[=.*/\1-\2\n\1-\2=JARG/' | \
sed 's/-\[.*\].*/-JARG/' | \
sed 's/\([^[:blank:]]\)<.*/\1JARG/'; }
label_separate_args () { sed 's/^\([^[:blank:]]*\)[[:blank:]][[<{]/\1SARG/'; }
# Now we have optlines beginning '-' (or exceptionally '@', for '@FILE'), but
# still with the documentation plain text embedded... here we drop those.
drop_descriptions () { sed 's/\(\(SARG\|JARG\)\|[[:blank:]]\).*/\2/'; }
expand_negative_options () {
    while read line; do case "$line" in
        (-[mfW]*)
            case "$line" in
                (-[mfW]no-*)
                    # already negative; skip!
                    true
                ;;
                (*[SJ]ARG)
                    # assume that "no-"blah does not involve an option
                    true
                ;;
                (*)
                    # OK, let's output a negative version of this
                    echo "$line" | sed 's/^-\([mfW]\)/-\1no-/'
                ;;
            esac
        ;;
        (*)
        ;;
    esac; echo "$line"; done
}
gcc_driver_optlines () {
    local gcc="$1"
    driver_end_eregexp="Target:|^Options starting with"
    chop_driver_options () { sed -En "/Options:/,$ p" | sed -En "/${driver_end_eregexp}/q"$'\n'"/.*/ p"; }
    optlines="$( LANG=C ${gcc:-gcc} -v --help 2>/dev/null | chop_driver_options | select_option_doclines )"
    # PROBLEM: gcc lets us enumerate 'joined' and 'separated' args separately,
    # but syntactically some of the 'separated' args appear joined in the output, like -D and -U.
    # This is because they can be written either way! But the output only shows them joined.
    # So we need to add explicitly the "separate but appear joined" cases.
    # PROBLEM: can't restrict '--help=separate' to just the driver, and they don't emerge
    # separated in the output.
    #more_optlines="$( LANG=C ${gcc:-gcc} --help=separate 2>/dev/null | \
    #  select_option_doclines | \
    #  label_joined_args | \
    #  grep JARG | sed 's/=\?JARG/SARG/' )"
    # PROBLEM: -no-integrated-cpp is not showing up, even though it's a real arg.
    # Add it manually. FIXME: scan gcc docs for any more like this. '-wrapper' is one!
    # Note that we maintain manual awk fragments beneath the ones that we are autogenerating here,
    # so these can be patched up later. FIXME: use this uniformly for -no-integrated-cpp and -wrapper also.
    { echo "-no-integrated-cpp"; echo "-wrapperSARG"
      #echo "$more_optlines"
      echo "$optlines" | label_joined_args | label_separate_args
    } | drop_descriptions | expand_negative_options
}
# EXPERIMENT: can we set the subshell name?
# We want to use this for profiling with 'ptreetime', so we don't get a million 'bash' processes.
# Hmm, OK, doesn't seem to work....
setname () {
    echo -n $1 > /proc/$BASHPID/comm
}
# HACK: this chopping is probably the nastiest bit.
chop_cc1_options () { sed -n '/The following.*language C/,/Usage: as/ p' | sed '/Usage: as/ q'; }
gcc_cc1_optlines () {
    local cc1="$1"
    # PROBLEM: the cc1 docs don't make separgs explicit.
    # Instead let's scrape them using --help=separate.
    # cc1's "--help=separate" output lists synonyms on the same line, e.g.
    #   --output                              -o
    # ... so if we see a line of this form, we insert a line break and process it as two options
    split_multiopt_lines () {
        sed 's/\([[:blank:]]-[^[:blank:]]\+\([[:blank:]]\+[^-][^[:blank:]]\+\)\?\)[[:blank:]]\+\(-[^[:blank:]]\+\)/\1\n  \3/'
    }
    sep_optlines="$( LANG=C ${cc1:-`gcc -print-prog-name=cc1`} -v --help=separate 2>/dev/null | \
        split_multiopt_lines | select_option_doclines | label_joined_args | \
        sed 's/=\?JARG/SARG/' | label_separate_args | drop_descriptions | \
        sed -n '/SARG$/ {p;d}; s/.*/&SARG/ p' )"
    # Now we scrape all args, but beware that in the output some SARGs really
    # will look like no-arg options. Since an option can't be both SARG and no-arg,
    # we know it's correct to drop the no-arg versions. Use a massive regexp.
    eregexp="$( echo -n "$sep_optlines" | sed 's/SARG$//' | tr '\n' '|' | sed 's/|$//' )"
    optlines="$( LANG=C ${gcc:-gcc} -v --help 2>/dev/null | chop_cc1_options | select_option_doclines )"
    { echo "$optlines" | label_joined_args | label_separate_args | drop_descriptions | \
      egrep -v "^($eregexp)\$" | expand_negative_options
      echo "$sep_optlines"; }
    # This is looking OK but some weirdnesses:
    # -undef without any arg -- is that correct? Yes.
    # no -g3
    # PROBLEM: we are getting -dSARG and -dJARG, and this is interfering with -dumpbase-ext
    # which we do not currently recognise, but the warning is being hidden by the -d options.
    # WHY?? Where are these -d options coming from?
    # AHA! -d<letters>                 Enable dumps from specific passes of the compiler.
    # So I think the solution is that -dumpbase-ext needs to come before -dJARG. How?
    # We normally sort -r, which would normally mean that it does. Why isn't it coming out that way?
    # AH. Because we don't have -dumpbase-ext!
    # HMM. When one argument shadows another, we really want a warning. Is there
    # a nice way of getting that?
    # Also, perhaps we can rewrite <letters> so it wouldn't match '-'? No, 'JARG' doesn't allow.

}
clang_optlines () {
    local clang="$1"
    # FIXME: haven't inspected this very carefully
    # but it seems to do the right thing
    { LANG=C ${clang:-clang} --help; LANG=C ${clang:-clang} -cc1 --help; } | select_option_doclines | \
    label_joined_args | label_separate_args | drop_descriptions | expand_negative_options
    echo "-cc1" # FIXME: more uniform to put this beneath generated pasted code?
}

# Now are we ready to tackle scanning the command lines? Almost.
# Generate the awk code we need. We will paste it into the script,
# but the script also contains the logic for regenerating it.
# We used to use generated shell script (case statements with lots of generated lines)
# but awk is much faster. But we still generate some shell script in one place
# (to process identified args) so we still need this function
optlines_to_caselines () {
    # we sort in reverse order so that SARG comes before JARG comes before (no suffix)
    sort -r | uniq | \
    sed -En '/(.*)SARG$/   {s//(\1)  fullopt="$1"; canonopt="\1"; optarg="$2"; inc=2;;/;p;d}
             /(([^=]*)=?)JARG$/ {s//(\1*) fullopt="$1"; canonopt="\2"; optarg="$( echo "\$1" | sed -E "s^\1^^" )"; inc=1 ;;/;p;d}
             /^$/          d
             /.*/          {s//(&)   fullopt="$1"; canonopt="&"; inc=1 ;;/;p;d}'
    # FIXME: use "${1/-prefix=/}" instead of 'sed -E'
}
awk_pre='
    BEGIN {
        snarfing_optarg=0; inc=0; realposn=1; argcount=0; issued_helpmsg=0; unrecognised=0;
    }
    # HACKy utility function to de-escape the regex escapes inserted by our sed pipeline that processes
    # the optlines, i.e. our pipeline turns "-nostdinc++" to "-nostdinc\+\+" and this function turns it back.
    function deesc(arg) {
        return gensub(/[]\[+?{}\*\.]/, "\\\\&", "g", arg)
    }
    # shell-escape functions: we use this when printing output shell commands for the client to source
    function shesc(arg) {
        return gensub(/["'"'"'()\*?{}`\$]/, "\\\\&", "g", arg)
    }
    # the same but for escaping within double quotes
    function shdqesc(arg) {
        return gensub(/["`\$]/, "\\\\&", "g", arg)
    }
    # In the bash code, "realposn" increments by "inc" every cycle,
    # where "inc" is at least 1.
    # We do output every cycle, but we may have pre-consumed additional input using "shift".
    # In that case, "inc" will be greater than 1 (always 2?) and we have "shift"ed once
    # to compensate.
    # In awk code, we cannot "shift". We have to delay our consumption to the next cycle.
    # But we want "realposn" to track what it does in the bash code. So we
    # only increment "realposn" in "do_output", and we increment it by "inc".
    # To ensure we snarf every arg, we print the "args=" line in BEGIN.
    function do_output(the_arg) {
      if (inc > 1) { printf("incs_by_argposn["realposn"]=\"" inc "\"\n"); }
      printf("fullopts_by_argposn[" realposn "]=\"" shdqesc(fullopt) "\"\n");
      if (canonopt != "") {
          printf("canonopts_by_argposn[" realposn "]=\"" shdqesc(canonopt) "\"\n");
          printf("existing_optposns_for_this_canonopt=\"${optposns_by_canonopt[\"" shdqesc(canonopt) "\"]}\"\n");
          printf("optposns_by_canonopt[\"" shdqesc(canonopt) "\"]=\"${existing_optposns_for_this_canonopt:+${existing_optposns_for_this_canonopt} }" realposn "\"\n");
          printf("fullopts_by_argposn[" realposn "]=\"" shdqesc(fullopt) "\"\n");
          printf("existing_optposns_for_this_fullopt=\"${optposns_by_fullopt[\"" fullopt "\"]}\"\n");
          printf("optposns_by_fullopt[\"" shdqesc(fullopt) "\"]=\"${existing_optposns_for_this_fullopt:+${existing_optposns_for_this_fullopt} }" realposn "\"\n");
          printf("existing_head_word_indices=\"${head_word_indices[\"" shdqesc(fullopt) "\"]}\"\n");
          printf("head_word_indices[\"" shdqesc(fullopt) "\"]=\"${existing_head_word_indices:+${existing_head_word_indices} }" realposn "\"\n");
          if (optarg != "") {
              # We have an arg and a canonopt, but since some optargs are JARGS,
              # the optarg may or may not be isolated in the argument list;
              # If it is, it is at the next argposn and inc is 2. Otherwise it is
              # jammed into the string at the current argposn and inc is 1.
              # (One day we may want to capture multiple args, in forms like
              # -foptimize-blah=foo, where both "blah" and "foo" are arguments.
              # That will make all the above match clauses more interesting but
              # it should still basically fit the model.
              printf("optargs_by_argposn[" (realposn) "]=\"" shdqesc(optarg) "\"\n");
              # Also remember arguments as a list of positions -- yes this is indirect, but
              # args may have spaces in them, which would mess up a space-separated list
              printf("existing_argposns_for_this_canonopt=\"${optargposns_by_canonopt[\"" shdqesc(canonopt) "\"]}\"\n");
              printf("optargposns_by_canonopt[\"" shdqesc(canonopt) "\"]=\"${existing_argposns_for_this_canonopt:+${existing_argposns_for_this_canonopt} }" realposn "\"\n");
          }
      }
      printf("unrecognised=" unrecognised "\n");
      # if inc is still 0, we default it to 1
      realposn += (inc != 0 ? inc : 1);
      inc=0;
      unrecognised=0;
      optarg="";
    } # end do_output
    # always print the arg and increment argcount one-by-one
    { ++argcount; printf("args[" argcount "]=\"" shdqesc($0) "\"\n"); }
    snarfing_optarg == 1 { optarg=$0; snarfing_optarg=0; do_output(fullopt); next; }
'
optlines_to_awk () {
    # we sort in reverse order so that SARG comes before JARG comes before (no suffix)
    # FIXME: we also need to regexp-escape, for options like '-nostdinc++', since
    # we don't want to generate the metacharacter '+' in the awk code. We could
    # escape all lines on the way in to the sed command, but then our quoted canonopts
    # will have embedded backslashes. We could gensub them out? That's a nasty hack
    # because we're using an awk function to compute a constant string that should really
    # just be embedded in the generated awk program. But OK, let's do that. It's actually
    # even more of a hack, because if our awk code says   deesc("-nostdinc\+\+") we are
    # dependent on the underspecified behaviour of awk: does the '\' get dropped or taken
    # literally? In our case it doesn't matter: the former will de-escape it eagerly and
    # the latter will leave it for the deesc function to do.
    sort -r | uniq | sed 's/[]\[+?{}\*\.]/\\&/g' | \
    sed -En '/(.*)SARG$/        {s@@/^(\1)$/     { fullopt=$0; canonopt=deesc("\1"); snarfing_optarg=1; inc=2; next; }@;p;d}
             /(([^=]*)=?)JARG$/ {s@@/^(\1)(.*)$/ { fullopt=$0; canonopt=deesc("\2"); optarg=gensub(/(\1)(.*)/, "\\\\2", 1); inc=1; do_output(fullopt); next; }@;p;d}
             /^$/               d
             /.*/               {s@@/^&$/ { fullopt=$0; canonopt=deesc("&"); inc=1; do_output(fullopt); next; }@;p;d}'
}
awk_post='
    # non-option-hitting cases
    inc == 0 && $0 == "-" { # stdin/stdout
        printf("input_files_by_argposn[" realposn "]=\"" $0 "\"\n");
        printf("input_files_index[\"" $0 "\"]=1\n");
        # do_output will set head_word_indices only if canonopt != ""
        printf("head_word_indices[\"" $0 "\"]=${head_word_indices[\"" $0 "\"]:+${head_word_indices[\"" $0 "\"]} }" realposn "\n");
        do_output();
        next;
    }
    inc == 0 && $0 ~ /^-.*/ { # unrecognised option
        unrecognised=1;
        if (suppress_warnings == "") {
            printf("WARNING: " var_prefix ": unrecognised optionlike argument " $0 "; assuming argumentless\n")>"/dev/stderr";
            if (issued_helpmsg == 0) {
                printf("Try: diff -u <( sed -n $'"'"'/# BEGIN GENERATED " var_prefix "_optawk/,$ p\\n/# END GENERATED " var_prefix "_optawk/ q'"'"' '"$0"' ) <( . '"$0"' && " var_prefix "_optlines | optlines_to_awk )\n")>"/dev/stderr";
                issued_helpmsg=1;
            }
        }
        # what to do? assume it an option with no argument
        canonopt=$0; fullopt=$0; inc=1; do_output(); next;
    }
    inc == 0 && $0 == "" {
        if (suppress_warnings == "") {
            printf("BUG: (" var_prefix ") empty filename at realposn " realposn "?\n")>"/dev/stderr"
        }
        exit(1);
    }
    inc == 0 {
        printf("input_files_by_argposn[" realposn "]=\"" $0 "\"\n");
        printf("input_files_index[\"" $0 "\"]=1\n");
        # do_output will set head_word_indices only if canonopt != ""
        printf("head_word_indices[\"" $0 "\"]=${head_word_indices[\"" $0 "\"]:+${head_word_indices[\"" $0 "\"]} }" realposn "\n");
        inc=1;
        do_output();
        next;
    }'
# separate the end-of-script output stage, because we use a custom one for -Xpreprocessor
awk_do_output='
    END { printf("argcount=" argcount "\n"); }
'

gcc_cc1_optawk='# BEGIN GENERATED gcc_cc1_optawk
/^(-x)$/     { fullopt=$0; canonopt=deesc("-x"); snarfing_optarg=1; inc=2; next; }
/^-w$/ { fullopt=$0; canonopt=deesc("-w"); inc=1; do_output(fullopt); next; }
/^-version$/ { fullopt=$0; canonopt=deesc("-version"); inc=1; do_output(fullopt); next; }
/^-v$/ { fullopt=$0; canonopt=deesc("-v"); inc=1; do_output(fullopt); next; }
/^-undef$/ { fullopt=$0; canonopt=deesc("-undef"); inc=1; do_output(fullopt); next; }
/^-type-stats$/ { fullopt=$0; canonopt=deesc("-type-stats"); inc=1; do_output(fullopt); next; }
/^-trigraphs$/ { fullopt=$0; canonopt=deesc("-trigraphs"); inc=1; do_output(fullopt); next; }
/^-tree-stats$/ { fullopt=$0; canonopt=deesc("-tree-stats"); inc=1; do_output(fullopt); next; }
/^-traditional-cpp$/ { fullopt=$0; canonopt=deesc("-traditional-cpp"); inc=1; do_output(fullopt); next; }
/^(-symbol=)(.*)$/ { fullopt=$0; canonopt=deesc("-symbol"); optarg=gensub(/(-symbol=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-std=)(.*)$/ { fullopt=$0; canonopt=deesc("-std"); optarg=gensub(/(-std=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-static-libgfortran$/ { fullopt=$0; canonopt=deesc("-static-libgfortran"); inc=1; do_output(fullopt); next; }
/^-size-sort$/ { fullopt=$0; canonopt=deesc("-size-sort"); inc=1; do_output(fullopt); next; }
/^-reverse-sort$/ { fullopt=$0; canonopt=deesc("-reverse-sort"); inc=1; do_output(fullopt); next; }
/^-remap$/ { fullopt=$0; canonopt=deesc("-remap"); inc=1; do_output(fullopt); next; }
/^-quiet$/ { fullopt=$0; canonopt=deesc("-quiet"); inc=1; do_output(fullopt); next; }
/^-print-value$/ { fullopt=$0; canonopt=deesc("-print-value"); inc=1; do_output(fullopt); next; }
/^-print-objc-runtime-info$/ { fullopt=$0; canonopt=deesc("-print-objc-runtime-info"); inc=1; do_output(fullopt); next; }
/^-pedantic-errors$/ { fullopt=$0; canonopt=deesc("-pedantic-errors"); inc=1; do_output(fullopt); next; }
/^-pedantic$/ { fullopt=$0; canonopt=deesc("-pedantic"); inc=1; do_output(fullopt); next; }
/^-p$/ { fullopt=$0; canonopt=deesc("-p"); inc=1; do_output(fullopt); next; }
/^-objects$/ { fullopt=$0; canonopt=deesc("-objects"); inc=1; do_output(fullopt); next; }
/^(-o)$/     { fullopt=$0; canonopt=deesc("-o"); snarfing_optarg=1; inc=2; next; }
/^-nostdlib$/ { fullopt=$0; canonopt=deesc("-nostdlib"); inc=1; do_output(fullopt); next; }
/^-nostdinc\+\+$/ { fullopt=$0; canonopt=deesc("-nostdinc\+\+"); inc=1; do_output(fullopt); next; }
/^-nostdinc$/ { fullopt=$0; canonopt=deesc("-nostdinc"); inc=1; do_output(fullopt); next; }
/^-nocpp$/ { fullopt=$0; canonopt=deesc("-nocpp"); inc=1; do_output(fullopt); next; }
/^-name-sort$/ { fullopt=$0; canonopt=deesc("-name-sort"); inc=1; do_output(fullopt); next; }
/^-mxsaves$/ { fullopt=$0; canonopt=deesc("-mxsaves"); inc=1; do_output(fullopt); next; }
/^-mxsaveopt$/ { fullopt=$0; canonopt=deesc("-mxsaveopt"); inc=1; do_output(fullopt); next; }
/^-mxsavec$/ { fullopt=$0; canonopt=deesc("-mxsavec"); inc=1; do_output(fullopt); next; }
/^-mxsave$/ { fullopt=$0; canonopt=deesc("-mxsave"); inc=1; do_output(fullopt); next; }
/^-mxop$/ { fullopt=$0; canonopt=deesc("-mxop"); inc=1; do_output(fullopt); next; }
/^-mx32$/ { fullopt=$0; canonopt=deesc("-mx32"); inc=1; do_output(fullopt); next; }
/^-mwidekl$/ { fullopt=$0; canonopt=deesc("-mwidekl"); inc=1; do_output(fullopt); next; }
/^-mwbnoinvd$/ { fullopt=$0; canonopt=deesc("-mwbnoinvd"); inc=1; do_output(fullopt); next; }
/^-mwaitpkg$/ { fullopt=$0; canonopt=deesc("-mwaitpkg"); inc=1; do_output(fullopt); next; }
/^-mvzeroupper$/ { fullopt=$0; canonopt=deesc("-mvzeroupper"); inc=1; do_output(fullopt); next; }
/^-mvpclmulqdq$/ { fullopt=$0; canonopt=deesc("-mvpclmulqdq"); inc=1; do_output(fullopt); next; }
/^-mvect8-ret-in-mem$/ { fullopt=$0; canonopt=deesc("-mvect8-ret-in-mem"); inc=1; do_output(fullopt); next; }
/^(-mveclibabi=)(.*)$/ { fullopt=$0; canonopt=deesc("-mveclibabi"); optarg=gensub(/(-mveclibabi=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mvaes$/ { fullopt=$0; canonopt=deesc("-mvaes"); inc=1; do_output(fullopt); next; }
/^-muintr$/ { fullopt=$0; canonopt=deesc("-muintr"); inc=1; do_output(fullopt); next; }
/^-muclibc$/ { fullopt=$0; canonopt=deesc("-muclibc"); inc=1; do_output(fullopt); next; }
/^(-mtune=)(.*)$/ { fullopt=$0; canonopt=deesc("-mtune"); optarg=gensub(/(-mtune=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-mtune-ctrl=)(.*)$/ { fullopt=$0; canonopt=deesc("-mtune-ctrl"); optarg=gensub(/(-mtune-ctrl=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mtsxldtrk$/ { fullopt=$0; canonopt=deesc("-mtsxldtrk"); inc=1; do_output(fullopt); next; }
/^-mtls-direct-seg-refs$/ { fullopt=$0; canonopt=deesc("-mtls-direct-seg-refs"); inc=1; do_output(fullopt); next; }
/^(-mtls-dialect=)(.*)$/ { fullopt=$0; canonopt=deesc("-mtls-dialect"); optarg=gensub(/(-mtls-dialect=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mtbm$/ { fullopt=$0; canonopt=deesc("-mtbm"); inc=1; do_output(fullopt); next; }
/^-mstv$/ { fullopt=$0; canonopt=deesc("-mstv"); inc=1; do_output(fullopt); next; }
/^(-mstringop-strategy=)(.*)$/ { fullopt=$0; canonopt=deesc("-mstringop-strategy"); optarg=gensub(/(-mstringop-strategy=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mstackrealign$/ { fullopt=$0; canonopt=deesc("-mstackrealign"); inc=1; do_output(fullopt); next; }
/^(-mstack-protector-guard=)(.*)$/ { fullopt=$0; canonopt=deesc("-mstack-protector-guard"); optarg=gensub(/(-mstack-protector-guard=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-mstack-protector-guard-symbol=)(.*)$/ { fullopt=$0; canonopt=deesc("-mstack-protector-guard-symbol"); optarg=gensub(/(-mstack-protector-guard-symbol=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-mstack-protector-guard-reg=)(.*)$/ { fullopt=$0; canonopt=deesc("-mstack-protector-guard-reg"); optarg=gensub(/(-mstack-protector-guard-reg=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-mstack-protector-guard-offset=)(.*)$/ { fullopt=$0; canonopt=deesc("-mstack-protector-guard-offset"); optarg=gensub(/(-mstack-protector-guard-offset=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mstack-arg-probe$/ { fullopt=$0; canonopt=deesc("-mstack-arg-probe"); inc=1; do_output(fullopt); next; }
/^-mssse3$/ { fullopt=$0; canonopt=deesc("-mssse3"); inc=1; do_output(fullopt); next; }
/^-msseregparm$/ { fullopt=$0; canonopt=deesc("-msseregparm"); inc=1; do_output(fullopt); next; }
/^-msse5$/ { fullopt=$0; canonopt=deesc("-msse5"); inc=1; do_output(fullopt); next; }
/^-msse4a$/ { fullopt=$0; canonopt=deesc("-msse4a"); inc=1; do_output(fullopt); next; }
/^-msse4\.2$/ { fullopt=$0; canonopt=deesc("-msse4\.2"); inc=1; do_output(fullopt); next; }
/^-msse4\.1$/ { fullopt=$0; canonopt=deesc("-msse4\.1"); inc=1; do_output(fullopt); next; }
/^-msse4$/ { fullopt=$0; canonopt=deesc("-msse4"); inc=1; do_output(fullopt); next; }
/^-msse3$/ { fullopt=$0; canonopt=deesc("-msse3"); inc=1; do_output(fullopt); next; }
/^-msse2avx$/ { fullopt=$0; canonopt=deesc("-msse2avx"); inc=1; do_output(fullopt); next; }
/^-msse2$/ { fullopt=$0; canonopt=deesc("-msse2"); inc=1; do_output(fullopt); next; }
/^-msse$/ { fullopt=$0; canonopt=deesc("-msse"); inc=1; do_output(fullopt); next; }
/^-msoft-float$/ { fullopt=$0; canonopt=deesc("-msoft-float"); inc=1; do_output(fullopt); next; }
/^-mskip-rax-setup$/ { fullopt=$0; canonopt=deesc("-mskip-rax-setup"); inc=1; do_output(fullopt); next; }
/^-mshstk$/ { fullopt=$0; canonopt=deesc("-mshstk"); inc=1; do_output(fullopt); next; }
/^-msha$/ { fullopt=$0; canonopt=deesc("-msha"); inc=1; do_output(fullopt); next; }
/^-msgx$/ { fullopt=$0; canonopt=deesc("-msgx"); inc=1; do_output(fullopt); next; }
/^-mserialize$/ { fullopt=$0; canonopt=deesc("-mserialize"); inc=1; do_output(fullopt); next; }
/^-msahf$/ { fullopt=$0; canonopt=deesc("-msahf"); inc=1; do_output(fullopt); next; }
/^-mrtm$/ { fullopt=$0; canonopt=deesc("-mrtm"); inc=1; do_output(fullopt); next; }
/^-mrtd$/ { fullopt=$0; canonopt=deesc("-mrtd"); inc=1; do_output(fullopt); next; }
/^(-mregparm=)(.*)$/ { fullopt=$0; canonopt=deesc("-mregparm"); optarg=gensub(/(-mregparm=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mred-zone$/ { fullopt=$0; canonopt=deesc("-mred-zone"); inc=1; do_output(fullopt); next; }
/^-mrecord-return$/ { fullopt=$0; canonopt=deesc("-mrecord-return"); inc=1; do_output(fullopt); next; }
/^-mrecord-mcount$/ { fullopt=$0; canonopt=deesc("-mrecord-mcount"); inc=1; do_output(fullopt); next; }
/^(-mrecip=)(.*)$/ { fullopt=$0; canonopt=deesc("-mrecip"); optarg=gensub(/(-mrecip=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mrecip$/ { fullopt=$0; canonopt=deesc("-mrecip"); inc=1; do_output(fullopt); next; }
/^-mrdseed$/ { fullopt=$0; canonopt=deesc("-mrdseed"); inc=1; do_output(fullopt); next; }
/^-mrdrnd$/ { fullopt=$0; canonopt=deesc("-mrdrnd"); inc=1; do_output(fullopt); next; }
/^-mrdpid$/ { fullopt=$0; canonopt=deesc("-mrdpid"); inc=1; do_output(fullopt); next; }
/^-mpush-args$/ { fullopt=$0; canonopt=deesc("-mpush-args"); inc=1; do_output(fullopt); next; }
/^-mptwrite$/ { fullopt=$0; canonopt=deesc("-mptwrite"); inc=1; do_output(fullopt); next; }
/^-mprfchw$/ { fullopt=$0; canonopt=deesc("-mprfchw"); inc=1; do_output(fullopt); next; }
/^-mprefetchwt1$/ { fullopt=$0; canonopt=deesc("-mprefetchwt1"); inc=1; do_output(fullopt); next; }
/^(-mpreferred-stack-boundary=)(.*)$/ { fullopt=$0; canonopt=deesc("-mpreferred-stack-boundary"); optarg=gensub(/(-mpreferred-stack-boundary=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-mprefer-vector-width=)(.*)$/ { fullopt=$0; canonopt=deesc("-mprefer-vector-width"); optarg=gensub(/(-mprefer-vector-width=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mprefer-avx128$/ { fullopt=$0; canonopt=deesc("-mprefer-avx128"); inc=1; do_output(fullopt); next; }
/^-mpopcnt$/ { fullopt=$0; canonopt=deesc("-mpopcnt"); inc=1; do_output(fullopt); next; }
/^-mpku$/ { fullopt=$0; canonopt=deesc("-mpku"); inc=1; do_output(fullopt); next; }
/^-mpconfig$/ { fullopt=$0; canonopt=deesc("-mpconfig"); inc=1; do_output(fullopt); next; }
/^-mpcommit$/ { fullopt=$0; canonopt=deesc("-mpcommit"); inc=1; do_output(fullopt); next; }
/^-mpclmul$/ { fullopt=$0; canonopt=deesc("-mpclmul"); inc=1; do_output(fullopt); next; }
/^-mpc80$/ { fullopt=$0; canonopt=deesc("-mpc80"); inc=1; do_output(fullopt); next; }
/^-mpc64$/ { fullopt=$0; canonopt=deesc("-mpc64"); inc=1; do_output(fullopt); next; }
/^-mpc32$/ { fullopt=$0; canonopt=deesc("-mpc32"); inc=1; do_output(fullopt); next; }
/^-momit-leaf-frame-pointer$/ { fullopt=$0; canonopt=deesc("-momit-leaf-frame-pointer"); inc=1; do_output(fullopt); next; }
/^-mnop-mcount$/ { fullopt=$0; canonopt=deesc("-mnop-mcount"); inc=1; do_output(fullopt); next; }
/^-mno-xsaves$/ { fullopt=$0; canonopt=deesc("-mno-xsaves"); inc=1; do_output(fullopt); next; }
/^-mno-xsaveopt$/ { fullopt=$0; canonopt=deesc("-mno-xsaveopt"); inc=1; do_output(fullopt); next; }
/^-mno-xsavec$/ { fullopt=$0; canonopt=deesc("-mno-xsavec"); inc=1; do_output(fullopt); next; }
/^-mno-xsave$/ { fullopt=$0; canonopt=deesc("-mno-xsave"); inc=1; do_output(fullopt); next; }
/^-mno-xop$/ { fullopt=$0; canonopt=deesc("-mno-xop"); inc=1; do_output(fullopt); next; }
/^-mno-x32$/ { fullopt=$0; canonopt=deesc("-mno-x32"); inc=1; do_output(fullopt); next; }
/^-mno-widekl$/ { fullopt=$0; canonopt=deesc("-mno-widekl"); inc=1; do_output(fullopt); next; }
/^-mno-wbnoinvd$/ { fullopt=$0; canonopt=deesc("-mno-wbnoinvd"); inc=1; do_output(fullopt); next; }
/^-mno-waitpkg$/ { fullopt=$0; canonopt=deesc("-mno-waitpkg"); inc=1; do_output(fullopt); next; }
/^-mno-vzeroupper$/ { fullopt=$0; canonopt=deesc("-mno-vzeroupper"); inc=1; do_output(fullopt); next; }
/^-mno-vpclmulqdq$/ { fullopt=$0; canonopt=deesc("-mno-vpclmulqdq"); inc=1; do_output(fullopt); next; }
/^-mno-vect8-ret-in-mem$/ { fullopt=$0; canonopt=deesc("-mno-vect8-ret-in-mem"); inc=1; do_output(fullopt); next; }
/^-mno-vaes$/ { fullopt=$0; canonopt=deesc("-mno-vaes"); inc=1; do_output(fullopt); next; }
/^-mno-uintr$/ { fullopt=$0; canonopt=deesc("-mno-uintr"); inc=1; do_output(fullopt); next; }
/^-mno-uclibc$/ { fullopt=$0; canonopt=deesc("-mno-uclibc"); inc=1; do_output(fullopt); next; }
/^-mno-tsxldtrk$/ { fullopt=$0; canonopt=deesc("-mno-tsxldtrk"); inc=1; do_output(fullopt); next; }
/^-mno-tls-direct-seg-refs$/ { fullopt=$0; canonopt=deesc("-mno-tls-direct-seg-refs"); inc=1; do_output(fullopt); next; }
/^-mno-tbm$/ { fullopt=$0; canonopt=deesc("-mno-tbm"); inc=1; do_output(fullopt); next; }
/^-mno-stv$/ { fullopt=$0; canonopt=deesc("-mno-stv"); inc=1; do_output(fullopt); next; }
/^-mno-stackrealign$/ { fullopt=$0; canonopt=deesc("-mno-stackrealign"); inc=1; do_output(fullopt); next; }
/^-mno-stack-arg-probe$/ { fullopt=$0; canonopt=deesc("-mno-stack-arg-probe"); inc=1; do_output(fullopt); next; }
/^-mno-ssse3$/ { fullopt=$0; canonopt=deesc("-mno-ssse3"); inc=1; do_output(fullopt); next; }
/^-mno-sseregparm$/ { fullopt=$0; canonopt=deesc("-mno-sseregparm"); inc=1; do_output(fullopt); next; }
/^-mno-sse5$/ { fullopt=$0; canonopt=deesc("-mno-sse5"); inc=1; do_output(fullopt); next; }
/^-mno-sse4a$/ { fullopt=$0; canonopt=deesc("-mno-sse4a"); inc=1; do_output(fullopt); next; }
/^-mno-sse4\.2$/ { fullopt=$0; canonopt=deesc("-mno-sse4\.2"); inc=1; do_output(fullopt); next; }
/^-mno-sse4\.1$/ { fullopt=$0; canonopt=deesc("-mno-sse4\.1"); inc=1; do_output(fullopt); next; }
/^-mno-sse4$/ { fullopt=$0; canonopt=deesc("-mno-sse4"); inc=1; do_output(fullopt); next; }
/^-mno-sse3$/ { fullopt=$0; canonopt=deesc("-mno-sse3"); inc=1; do_output(fullopt); next; }
/^-mno-sse2avx$/ { fullopt=$0; canonopt=deesc("-mno-sse2avx"); inc=1; do_output(fullopt); next; }
/^-mno-sse2$/ { fullopt=$0; canonopt=deesc("-mno-sse2"); inc=1; do_output(fullopt); next; }
/^-mno-sse$/ { fullopt=$0; canonopt=deesc("-mno-sse"); inc=1; do_output(fullopt); next; }
/^-mno-soft-float$/ { fullopt=$0; canonopt=deesc("-mno-soft-float"); inc=1; do_output(fullopt); next; }
/^-mno-skip-rax-setup$/ { fullopt=$0; canonopt=deesc("-mno-skip-rax-setup"); inc=1; do_output(fullopt); next; }
/^-mno-shstk$/ { fullopt=$0; canonopt=deesc("-mno-shstk"); inc=1; do_output(fullopt); next; }
/^-mno-sha$/ { fullopt=$0; canonopt=deesc("-mno-sha"); inc=1; do_output(fullopt); next; }
/^-mno-sgx$/ { fullopt=$0; canonopt=deesc("-mno-sgx"); inc=1; do_output(fullopt); next; }
/^-mno-serialize$/ { fullopt=$0; canonopt=deesc("-mno-serialize"); inc=1; do_output(fullopt); next; }
/^-mno-sahf$/ { fullopt=$0; canonopt=deesc("-mno-sahf"); inc=1; do_output(fullopt); next; }
/^-mno-rtm$/ { fullopt=$0; canonopt=deesc("-mno-rtm"); inc=1; do_output(fullopt); next; }
/^-mno-rtd$/ { fullopt=$0; canonopt=deesc("-mno-rtd"); inc=1; do_output(fullopt); next; }
/^-mno-red-zone$/ { fullopt=$0; canonopt=deesc("-mno-red-zone"); inc=1; do_output(fullopt); next; }
/^-mno-record-return$/ { fullopt=$0; canonopt=deesc("-mno-record-return"); inc=1; do_output(fullopt); next; }
/^-mno-record-mcount$/ { fullopt=$0; canonopt=deesc("-mno-record-mcount"); inc=1; do_output(fullopt); next; }
/^-mno-recip$/ { fullopt=$0; canonopt=deesc("-mno-recip"); inc=1; do_output(fullopt); next; }
/^-mno-rdseed$/ { fullopt=$0; canonopt=deesc("-mno-rdseed"); inc=1; do_output(fullopt); next; }
/^-mno-rdrnd$/ { fullopt=$0; canonopt=deesc("-mno-rdrnd"); inc=1; do_output(fullopt); next; }
/^-mno-rdpid$/ { fullopt=$0; canonopt=deesc("-mno-rdpid"); inc=1; do_output(fullopt); next; }
/^-mno-push-args$/ { fullopt=$0; canonopt=deesc("-mno-push-args"); inc=1; do_output(fullopt); next; }
/^-mno-ptwrite$/ { fullopt=$0; canonopt=deesc("-mno-ptwrite"); inc=1; do_output(fullopt); next; }
/^-mno-prfchw$/ { fullopt=$0; canonopt=deesc("-mno-prfchw"); inc=1; do_output(fullopt); next; }
/^-mno-prefetchwt1$/ { fullopt=$0; canonopt=deesc("-mno-prefetchwt1"); inc=1; do_output(fullopt); next; }
/^-mno-prefer-avx128$/ { fullopt=$0; canonopt=deesc("-mno-prefer-avx128"); inc=1; do_output(fullopt); next; }
/^-mno-popcnt$/ { fullopt=$0; canonopt=deesc("-mno-popcnt"); inc=1; do_output(fullopt); next; }
/^-mno-pku$/ { fullopt=$0; canonopt=deesc("-mno-pku"); inc=1; do_output(fullopt); next; }
/^-mno-pconfig$/ { fullopt=$0; canonopt=deesc("-mno-pconfig"); inc=1; do_output(fullopt); next; }
/^-mno-pcommit$/ { fullopt=$0; canonopt=deesc("-mno-pcommit"); inc=1; do_output(fullopt); next; }
/^-mno-pclmul$/ { fullopt=$0; canonopt=deesc("-mno-pclmul"); inc=1; do_output(fullopt); next; }
/^-mno-pc80$/ { fullopt=$0; canonopt=deesc("-mno-pc80"); inc=1; do_output(fullopt); next; }
/^-mno-pc64$/ { fullopt=$0; canonopt=deesc("-mno-pc64"); inc=1; do_output(fullopt); next; }
/^-mno-pc32$/ { fullopt=$0; canonopt=deesc("-mno-pc32"); inc=1; do_output(fullopt); next; }
/^-mno-omit-leaf-frame-pointer$/ { fullopt=$0; canonopt=deesc("-mno-omit-leaf-frame-pointer"); inc=1; do_output(fullopt); next; }
/^-mno-nop-mcount$/ { fullopt=$0; canonopt=deesc("-mno-nop-mcount"); inc=1; do_output(fullopt); next; }
/^-mno-needed$/ { fullopt=$0; canonopt=deesc("-mno-needed"); inc=1; do_output(fullopt); next; }
/^-mno-mwaitx$/ { fullopt=$0; canonopt=deesc("-mno-mwaitx"); inc=1; do_output(fullopt); next; }
/^-mno-mwait$/ { fullopt=$0; canonopt=deesc("-mno-mwait"); inc=1; do_output(fullopt); next; }
/^-mno-musl$/ { fullopt=$0; canonopt=deesc("-mno-musl"); inc=1; do_output(fullopt); next; }
/^-mno-ms-bitfields$/ { fullopt=$0; canonopt=deesc("-mno-ms-bitfields"); inc=1; do_output(fullopt); next; }
/^-mno-mpx$/ { fullopt=$0; canonopt=deesc("-mno-mpx"); inc=1; do_output(fullopt); next; }
/^-mno-movdiri$/ { fullopt=$0; canonopt=deesc("-mno-movdiri"); inc=1; do_output(fullopt); next; }
/^-mno-movdir64b$/ { fullopt=$0; canonopt=deesc("-mno-movdir64b"); inc=1; do_output(fullopt); next; }
/^-mno-movbe$/ { fullopt=$0; canonopt=deesc("-mno-movbe"); inc=1; do_output(fullopt); next; }
/^-mno-mmx$/ { fullopt=$0; canonopt=deesc("-mno-mmx"); inc=1; do_output(fullopt); next; }
/^-mno-mitigate-rop$/ { fullopt=$0; canonopt=deesc("-mno-mitigate-rop"); inc=1; do_output(fullopt); next; }
/^-mno-manual-endbr$/ { fullopt=$0; canonopt=deesc("-mno-manual-endbr"); inc=1; do_output(fullopt); next; }
/^-mno-lzcnt$/ { fullopt=$0; canonopt=deesc("-mno-lzcnt"); inc=1; do_output(fullopt); next; }
/^-mno-lwp$/ { fullopt=$0; canonopt=deesc("-mno-lwp"); inc=1; do_output(fullopt); next; }
/^-mno-long-double-80$/ { fullopt=$0; canonopt=deesc("-mno-long-double-80"); inc=1; do_output(fullopt); next; }
/^-mno-long-double-64$/ { fullopt=$0; canonopt=deesc("-mno-long-double-64"); inc=1; do_output(fullopt); next; }
/^-mno-long-double-128$/ { fullopt=$0; canonopt=deesc("-mno-long-double-128"); inc=1; do_output(fullopt); next; }
/^-mno-kl$/ { fullopt=$0; canonopt=deesc("-mno-kl"); inc=1; do_output(fullopt); next; }
/^-mno-intel-syntax$/ { fullopt=$0; canonopt=deesc("-mno-intel-syntax"); inc=1; do_output(fullopt); next; }
/^-mno-inline-stringops-dynamically$/ { fullopt=$0; canonopt=deesc("-mno-inline-stringops-dynamically"); inc=1; do_output(fullopt); next; }
/^-mno-inline-all-stringops$/ { fullopt=$0; canonopt=deesc("-mno-inline-all-stringops"); inc=1; do_output(fullopt); next; }
/^-mno-indirect-branch-register$/ { fullopt=$0; canonopt=deesc("-mno-indirect-branch-register"); inc=1; do_output(fullopt); next; }
/^-mno-indirect-branch-cs-prefix$/ { fullopt=$0; canonopt=deesc("-mno-indirect-branch-cs-prefix"); inc=1; do_output(fullopt); next; }
/^-mno-ieee-fp$/ { fullopt=$0; canonopt=deesc("-mno-ieee-fp"); inc=1; do_output(fullopt); next; }
/^-mno-iamcu$/ { fullopt=$0; canonopt=deesc("-mno-iamcu"); inc=1; do_output(fullopt); next; }
/^-mno-hreset$/ { fullopt=$0; canonopt=deesc("-mno-hreset"); inc=1; do_output(fullopt); next; }
/^-mno-hle$/ { fullopt=$0; canonopt=deesc("-mno-hle"); inc=1; do_output(fullopt); next; }
/^-mno-hard-float$/ { fullopt=$0; canonopt=deesc("-mno-hard-float"); inc=1; do_output(fullopt); next; }
/^-mno-glibc$/ { fullopt=$0; canonopt=deesc("-mno-glibc"); inc=1; do_output(fullopt); next; }
/^-mno-gfni$/ { fullopt=$0; canonopt=deesc("-mno-gfni"); inc=1; do_output(fullopt); next; }
/^-mno-general-regs-only$/ { fullopt=$0; canonopt=deesc("-mno-general-regs-only"); inc=1; do_output(fullopt); next; }
/^-mno-fxsr$/ { fullopt=$0; canonopt=deesc("-mno-fxsr"); inc=1; do_output(fullopt); next; }
/^-mno-fused-madd$/ { fullopt=$0; canonopt=deesc("-mno-fused-madd"); inc=1; do_output(fullopt); next; }
/^-mno-fsgsbase$/ { fullopt=$0; canonopt=deesc("-mno-fsgsbase"); inc=1; do_output(fullopt); next; }
/^-mno-fp-ret-in-387$/ { fullopt=$0; canonopt=deesc("-mno-fp-ret-in-387"); inc=1; do_output(fullopt); next; }
/^-mno-force-indirect-call$/ { fullopt=$0; canonopt=deesc("-mno-force-indirect-call"); inc=1; do_output(fullopt); next; }
/^-mno-force-drap$/ { fullopt=$0; canonopt=deesc("-mno-force-drap"); inc=1; do_output(fullopt); next; }
/^-mno-fma4$/ { fullopt=$0; canonopt=deesc("-mno-fma4"); inc=1; do_output(fullopt); next; }
/^-mno-fma$/ { fullopt=$0; canonopt=deesc("-mno-fma"); inc=1; do_output(fullopt); next; }
/^-mno-fentry$/ { fullopt=$0; canonopt=deesc("-mno-fentry"); inc=1; do_output(fullopt); next; }
/^-mno-fancy-math-387$/ { fullopt=$0; canonopt=deesc("-mno-fancy-math-387"); inc=1; do_output(fullopt); next; }
/^-mno-f16c$/ { fullopt=$0; canonopt=deesc("-mno-f16c"); inc=1; do_output(fullopt); next; }
/^-mno-enqcmd$/ { fullopt=$0; canonopt=deesc("-mno-enqcmd"); inc=1; do_output(fullopt); next; }
/^-mno-dump-tune-features$/ { fullopt=$0; canonopt=deesc("-mno-dump-tune-features"); inc=1; do_output(fullopt); next; }
/^-mno-dispatch-scheduler$/ { fullopt=$0; canonopt=deesc("-mno-dispatch-scheduler"); inc=1; do_output(fullopt); next; }
/^-mno-default$/ { fullopt=$0; canonopt=deesc("-mno-default"); inc=1; do_output(fullopt); next; }
/^-mno-daz-ftz$/ { fullopt=$0; canonopt=deesc("-mno-daz-ftz"); inc=1; do_output(fullopt); next; }
/^-mno-cx16$/ { fullopt=$0; canonopt=deesc("-mno-cx16"); inc=1; do_output(fullopt); next; }
/^-mno-crc32$/ { fullopt=$0; canonopt=deesc("-mno-crc32"); inc=1; do_output(fullopt); next; }
/^-mno-clzero$/ { fullopt=$0; canonopt=deesc("-mno-clzero"); inc=1; do_output(fullopt); next; }
/^-mno-clwb$/ { fullopt=$0; canonopt=deesc("-mno-clwb"); inc=1; do_output(fullopt); next; }
/^-mno-clflushopt$/ { fullopt=$0; canonopt=deesc("-mno-clflushopt"); inc=1; do_output(fullopt); next; }
/^-mno-cldemote$/ { fullopt=$0; canonopt=deesc("-mno-cldemote"); inc=1; do_output(fullopt); next; }
/^-mno-cld$/ { fullopt=$0; canonopt=deesc("-mno-cld"); inc=1; do_output(fullopt); next; }
/^-mno-cet-switch$/ { fullopt=$0; canonopt=deesc("-mno-cet-switch"); inc=1; do_output(fullopt); next; }
/^-mno-call-ms2sysv-xlogues$/ { fullopt=$0; canonopt=deesc("-mno-call-ms2sysv-xlogues"); inc=1; do_output(fullopt); next; }
/^-mno-bmi2$/ { fullopt=$0; canonopt=deesc("-mno-bmi2"); inc=1; do_output(fullopt); next; }
/^-mno-bmi$/ { fullopt=$0; canonopt=deesc("-mno-bmi"); inc=1; do_output(fullopt); next; }
/^-mno-bionic$/ { fullopt=$0; canonopt=deesc("-mno-bionic"); inc=1; do_output(fullopt); next; }
/^-mno-avxvnni$/ { fullopt=$0; canonopt=deesc("-mno-avxvnni"); inc=1; do_output(fullopt); next; }
/^-mno-avx512vpopcntdq$/ { fullopt=$0; canonopt=deesc("-mno-avx512vpopcntdq"); inc=1; do_output(fullopt); next; }
/^-mno-avx512vp2intersect$/ { fullopt=$0; canonopt=deesc("-mno-avx512vp2intersect"); inc=1; do_output(fullopt); next; }
/^-mno-avx512vnni$/ { fullopt=$0; canonopt=deesc("-mno-avx512vnni"); inc=1; do_output(fullopt); next; }
/^-mno-avx512vl$/ { fullopt=$0; canonopt=deesc("-mno-avx512vl"); inc=1; do_output(fullopt); next; }
/^-mno-avx512vbmi2$/ { fullopt=$0; canonopt=deesc("-mno-avx512vbmi2"); inc=1; do_output(fullopt); next; }
/^-mno-avx512vbmi$/ { fullopt=$0; canonopt=deesc("-mno-avx512vbmi"); inc=1; do_output(fullopt); next; }
/^-mno-avx512pf$/ { fullopt=$0; canonopt=deesc("-mno-avx512pf"); inc=1; do_output(fullopt); next; }
/^-mno-avx512ifma$/ { fullopt=$0; canonopt=deesc("-mno-avx512ifma"); inc=1; do_output(fullopt); next; }
/^-mno-avx512f$/ { fullopt=$0; canonopt=deesc("-mno-avx512f"); inc=1; do_output(fullopt); next; }
/^-mno-avx512er$/ { fullopt=$0; canonopt=deesc("-mno-avx512er"); inc=1; do_output(fullopt); next; }
/^-mno-avx512dq$/ { fullopt=$0; canonopt=deesc("-mno-avx512dq"); inc=1; do_output(fullopt); next; }
/^-mno-avx512cd$/ { fullopt=$0; canonopt=deesc("-mno-avx512cd"); inc=1; do_output(fullopt); next; }
/^-mno-avx512bw$/ { fullopt=$0; canonopt=deesc("-mno-avx512bw"); inc=1; do_output(fullopt); next; }
/^-mno-avx512bitalg$/ { fullopt=$0; canonopt=deesc("-mno-avx512bitalg"); inc=1; do_output(fullopt); next; }
/^-mno-avx512bf16$/ { fullopt=$0; canonopt=deesc("-mno-avx512bf16"); inc=1; do_output(fullopt); next; }
/^-mno-avx5124vnniw$/ { fullopt=$0; canonopt=deesc("-mno-avx5124vnniw"); inc=1; do_output(fullopt); next; }
/^-mno-avx5124fmaps$/ { fullopt=$0; canonopt=deesc("-mno-avx5124fmaps"); inc=1; do_output(fullopt); next; }
/^-mno-avx256-split-unaligned-store$/ { fullopt=$0; canonopt=deesc("-mno-avx256-split-unaligned-store"); inc=1; do_output(fullopt); next; }
/^-mno-avx256-split-unaligned-load$/ { fullopt=$0; canonopt=deesc("-mno-avx256-split-unaligned-load"); inc=1; do_output(fullopt); next; }
/^-mno-avx2$/ { fullopt=$0; canonopt=deesc("-mno-avx2"); inc=1; do_output(fullopt); next; }
/^-mno-avx$/ { fullopt=$0; canonopt=deesc("-mno-avx"); inc=1; do_output(fullopt); next; }
/^-mno-android$/ { fullopt=$0; canonopt=deesc("-mno-android"); inc=1; do_output(fullopt); next; }
/^-mno-amx-tile$/ { fullopt=$0; canonopt=deesc("-mno-amx-tile"); inc=1; do_output(fullopt); next; }
/^-mno-amx-int8$/ { fullopt=$0; canonopt=deesc("-mno-amx-int8"); inc=1; do_output(fullopt); next; }
/^-mno-amx-bf16$/ { fullopt=$0; canonopt=deesc("-mno-amx-bf16"); inc=1; do_output(fullopt); next; }
/^-mno-align-stringops$/ { fullopt=$0; canonopt=deesc("-mno-align-stringops"); inc=1; do_output(fullopt); next; }
/^-mno-align-double$/ { fullopt=$0; canonopt=deesc("-mno-align-double"); inc=1; do_output(fullopt); next; }
/^-mno-aes$/ { fullopt=$0; canonopt=deesc("-mno-aes"); inc=1; do_output(fullopt); next; }
/^-mno-adx$/ { fullopt=$0; canonopt=deesc("-mno-adx"); inc=1; do_output(fullopt); next; }
/^-mno-accumulate-outgoing-args$/ { fullopt=$0; canonopt=deesc("-mno-accumulate-outgoing-args"); inc=1; do_output(fullopt); next; }
/^-mno-abm$/ { fullopt=$0; canonopt=deesc("-mno-abm"); inc=1; do_output(fullopt); next; }
/^-mno-96bit-long-double$/ { fullopt=$0; canonopt=deesc("-mno-96bit-long-double"); inc=1; do_output(fullopt); next; }
/^-mno-8bit-idiv$/ { fullopt=$0; canonopt=deesc("-mno-8bit-idiv"); inc=1; do_output(fullopt); next; }
/^-mno-80387$/ { fullopt=$0; canonopt=deesc("-mno-80387"); inc=1; do_output(fullopt); next; }
/^-mno-64$/ { fullopt=$0; canonopt=deesc("-mno-64"); inc=1; do_output(fullopt); next; }
/^-mno-3dnowa$/ { fullopt=$0; canonopt=deesc("-mno-3dnowa"); inc=1; do_output(fullopt); next; }
/^-mno-3dnow$/ { fullopt=$0; canonopt=deesc("-mno-3dnow"); inc=1; do_output(fullopt); next; }
/^-mno-32$/ { fullopt=$0; canonopt=deesc("-mno-32"); inc=1; do_output(fullopt); next; }
/^-mno-16$/ { fullopt=$0; canonopt=deesc("-mno-16"); inc=1; do_output(fullopt); next; }
/^-mno-128bit-long-double$/ { fullopt=$0; canonopt=deesc("-mno-128bit-long-double"); inc=1; do_output(fullopt); next; }
/^-mneeded$/ { fullopt=$0; canonopt=deesc("-mneeded"); inc=1; do_output(fullopt); next; }
/^-mmwaitx$/ { fullopt=$0; canonopt=deesc("-mmwaitx"); inc=1; do_output(fullopt); next; }
/^-mmwait$/ { fullopt=$0; canonopt=deesc("-mmwait"); inc=1; do_output(fullopt); next; }
/^-mmusl$/ { fullopt=$0; canonopt=deesc("-mmusl"); inc=1; do_output(fullopt); next; }
/^-mms-bitfields$/ { fullopt=$0; canonopt=deesc("-mms-bitfields"); inc=1; do_output(fullopt); next; }
/^-mmpx$/ { fullopt=$0; canonopt=deesc("-mmpx"); inc=1; do_output(fullopt); next; }
/^-mmovdiri$/ { fullopt=$0; canonopt=deesc("-mmovdiri"); inc=1; do_output(fullopt); next; }
/^-mmovdir64b$/ { fullopt=$0; canonopt=deesc("-mmovdir64b"); inc=1; do_output(fullopt); next; }
/^-mmovbe$/ { fullopt=$0; canonopt=deesc("-mmovbe"); inc=1; do_output(fullopt); next; }
/^-mmmx$/ { fullopt=$0; canonopt=deesc("-mmmx"); inc=1; do_output(fullopt); next; }
/^-mmitigate-rop$/ { fullopt=$0; canonopt=deesc("-mmitigate-rop"); inc=1; do_output(fullopt); next; }
/^(-mmemset-strategy=)(.*)$/ { fullopt=$0; canonopt=deesc("-mmemset-strategy"); optarg=gensub(/(-mmemset-strategy=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-mmemcpy-strategy=)(.*)$/ { fullopt=$0; canonopt=deesc("-mmemcpy-strategy"); optarg=gensub(/(-mmemcpy-strategy=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mmanual-endbr$/ { fullopt=$0; canonopt=deesc("-mmanual-endbr"); inc=1; do_output(fullopt); next; }
/^-mlzcnt$/ { fullopt=$0; canonopt=deesc("-mlzcnt"); inc=1; do_output(fullopt); next; }
/^-mlwp$/ { fullopt=$0; canonopt=deesc("-mlwp"); inc=1; do_output(fullopt); next; }
/^-mlong-double-80$/ { fullopt=$0; canonopt=deesc("-mlong-double-80"); inc=1; do_output(fullopt); next; }
/^-mlong-double-64$/ { fullopt=$0; canonopt=deesc("-mlong-double-64"); inc=1; do_output(fullopt); next; }
/^-mlong-double-128$/ { fullopt=$0; canonopt=deesc("-mlong-double-128"); inc=1; do_output(fullopt); next; }
/^(-mlarge-data-threshold=)(.*)$/ { fullopt=$0; canonopt=deesc("-mlarge-data-threshold"); optarg=gensub(/(-mlarge-data-threshold=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mkl$/ { fullopt=$0; canonopt=deesc("-mkl"); inc=1; do_output(fullopt); next; }
/^-mintel-syntax$/ { fullopt=$0; canonopt=deesc("-mintel-syntax"); inc=1; do_output(fullopt); next; }
/^(-minstrument-return=)(.*)$/ { fullopt=$0; canonopt=deesc("-minstrument-return"); optarg=gensub(/(-minstrument-return=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-minline-stringops-dynamically$/ { fullopt=$0; canonopt=deesc("-minline-stringops-dynamically"); inc=1; do_output(fullopt); next; }
/^-minline-all-stringops$/ { fullopt=$0; canonopt=deesc("-minline-all-stringops"); inc=1; do_output(fullopt); next; }
/^(-mindirect-branch=)(.*)$/ { fullopt=$0; canonopt=deesc("-mindirect-branch"); optarg=gensub(/(-mindirect-branch=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mindirect-branch-register$/ { fullopt=$0; canonopt=deesc("-mindirect-branch-register"); inc=1; do_output(fullopt); next; }
/^-mindirect-branch-cs-prefix$/ { fullopt=$0; canonopt=deesc("-mindirect-branch-cs-prefix"); inc=1; do_output(fullopt); next; }
/^(-mincoming-stack-boundary=)(.*)$/ { fullopt=$0; canonopt=deesc("-mincoming-stack-boundary"); optarg=gensub(/(-mincoming-stack-boundary=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mieee-fp$/ { fullopt=$0; canonopt=deesc("-mieee-fp"); inc=1; do_output(fullopt); next; }
/^-miamcu$/ { fullopt=$0; canonopt=deesc("-miamcu"); inc=1; do_output(fullopt); next; }
/^-mhreset$/ { fullopt=$0; canonopt=deesc("-mhreset"); inc=1; do_output(fullopt); next; }
/^-mhle$/ { fullopt=$0; canonopt=deesc("-mhle"); inc=1; do_output(fullopt); next; }
/^(-mharden-sls=)(.*)$/ { fullopt=$0; canonopt=deesc("-mharden-sls"); optarg=gensub(/(-mharden-sls=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mhard-float$/ { fullopt=$0; canonopt=deesc("-mhard-float"); inc=1; do_output(fullopt); next; }
/^-mglibc$/ { fullopt=$0; canonopt=deesc("-mglibc"); inc=1; do_output(fullopt); next; }
/^-mgfni$/ { fullopt=$0; canonopt=deesc("-mgfni"); inc=1; do_output(fullopt); next; }
/^-mgeneral-regs-only$/ { fullopt=$0; canonopt=deesc("-mgeneral-regs-only"); inc=1; do_output(fullopt); next; }
/^-mfxsr$/ { fullopt=$0; canonopt=deesc("-mfxsr"); inc=1; do_output(fullopt); next; }
/^-mfused-madd$/ { fullopt=$0; canonopt=deesc("-mfused-madd"); inc=1; do_output(fullopt); next; }
/^(-mfunction-return=)(.*)$/ { fullopt=$0; canonopt=deesc("-mfunction-return"); optarg=gensub(/(-mfunction-return=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mfsgsbase$/ { fullopt=$0; canonopt=deesc("-mfsgsbase"); inc=1; do_output(fullopt); next; }
/^(-mfpmath=)(.*)$/ { fullopt=$0; canonopt=deesc("-mfpmath"); optarg=gensub(/(-mfpmath=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mfp-ret-in-387$/ { fullopt=$0; canonopt=deesc("-mfp-ret-in-387"); inc=1; do_output(fullopt); next; }
/^-mforce-indirect-call$/ { fullopt=$0; canonopt=deesc("-mforce-indirect-call"); inc=1; do_output(fullopt); next; }
/^-mforce-drap$/ { fullopt=$0; canonopt=deesc("-mforce-drap"); inc=1; do_output(fullopt); next; }
/^-mfma4$/ { fullopt=$0; canonopt=deesc("-mfma4"); inc=1; do_output(fullopt); next; }
/^-mfma$/ { fullopt=$0; canonopt=deesc("-mfma"); inc=1; do_output(fullopt); next; }
/^(-mfentry-section=)(.*)$/ { fullopt=$0; canonopt=deesc("-mfentry-section"); optarg=gensub(/(-mfentry-section=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-mfentry-name=)(.*)$/ { fullopt=$0; canonopt=deesc("-mfentry-name"); optarg=gensub(/(-mfentry-name=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mfentry$/ { fullopt=$0; canonopt=deesc("-mfentry"); inc=1; do_output(fullopt); next; }
/^-mfancy-math-387$/ { fullopt=$0; canonopt=deesc("-mfancy-math-387"); inc=1; do_output(fullopt); next; }
/^-mf16c$/ { fullopt=$0; canonopt=deesc("-mf16c"); inc=1; do_output(fullopt); next; }
/^-menqcmd$/ { fullopt=$0; canonopt=deesc("-menqcmd"); inc=1; do_output(fullopt); next; }
/^-mdump-tune-features$/ { fullopt=$0; canonopt=deesc("-mdump-tune-features"); inc=1; do_output(fullopt); next; }
/^-mdispatch-scheduler$/ { fullopt=$0; canonopt=deesc("-mdispatch-scheduler"); inc=1; do_output(fullopt); next; }
/^-mdaz-ftz$/ { fullopt=$0; canonopt=deesc("-mdaz-ftz"); inc=1; do_output(fullopt); next; }
/^-mcx16$/ { fullopt=$0; canonopt=deesc("-mcx16"); inc=1; do_output(fullopt); next; }
/^-mcrc32$/ { fullopt=$0; canonopt=deesc("-mcrc32"); inc=1; do_output(fullopt); next; }
/^(-mcpu=)(.*)$/ { fullopt=$0; canonopt=deesc("-mcpu"); optarg=gensub(/(-mcpu=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-mcmodel=)(.*)$/ { fullopt=$0; canonopt=deesc("-mcmodel"); optarg=gensub(/(-mcmodel=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mclzero$/ { fullopt=$0; canonopt=deesc("-mclzero"); inc=1; do_output(fullopt); next; }
/^-mclwb$/ { fullopt=$0; canonopt=deesc("-mclwb"); inc=1; do_output(fullopt); next; }
/^-mclflushopt$/ { fullopt=$0; canonopt=deesc("-mclflushopt"); inc=1; do_output(fullopt); next; }
/^-mcldemote$/ { fullopt=$0; canonopt=deesc("-mcldemote"); inc=1; do_output(fullopt); next; }
/^-mcld$/ { fullopt=$0; canonopt=deesc("-mcld"); inc=1; do_output(fullopt); next; }
/^-mcet-switch$/ { fullopt=$0; canonopt=deesc("-mcet-switch"); inc=1; do_output(fullopt); next; }
/^-mcall-ms2sysv-xlogues$/ { fullopt=$0; canonopt=deesc("-mcall-ms2sysv-xlogues"); inc=1; do_output(fullopt); next; }
/^(-mbranch-cost=)(.*)$/ { fullopt=$0; canonopt=deesc("-mbranch-cost"); optarg=gensub(/(-mbranch-cost=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mbmi2$/ { fullopt=$0; canonopt=deesc("-mbmi2"); inc=1; do_output(fullopt); next; }
/^-mbmi$/ { fullopt=$0; canonopt=deesc("-mbmi"); inc=1; do_output(fullopt); next; }
/^-mbionic$/ { fullopt=$0; canonopt=deesc("-mbionic"); inc=1; do_output(fullopt); next; }
/^-mavxvnni$/ { fullopt=$0; canonopt=deesc("-mavxvnni"); inc=1; do_output(fullopt); next; }
/^-mavx512vpopcntdq$/ { fullopt=$0; canonopt=deesc("-mavx512vpopcntdq"); inc=1; do_output(fullopt); next; }
/^-mavx512vp2intersect$/ { fullopt=$0; canonopt=deesc("-mavx512vp2intersect"); inc=1; do_output(fullopt); next; }
/^-mavx512vnni$/ { fullopt=$0; canonopt=deesc("-mavx512vnni"); inc=1; do_output(fullopt); next; }
/^-mavx512vl$/ { fullopt=$0; canonopt=deesc("-mavx512vl"); inc=1; do_output(fullopt); next; }
/^-mavx512vbmi2$/ { fullopt=$0; canonopt=deesc("-mavx512vbmi2"); inc=1; do_output(fullopt); next; }
/^-mavx512vbmi$/ { fullopt=$0; canonopt=deesc("-mavx512vbmi"); inc=1; do_output(fullopt); next; }
/^-mavx512pf$/ { fullopt=$0; canonopt=deesc("-mavx512pf"); inc=1; do_output(fullopt); next; }
/^-mavx512ifma$/ { fullopt=$0; canonopt=deesc("-mavx512ifma"); inc=1; do_output(fullopt); next; }
/^-mavx512f$/ { fullopt=$0; canonopt=deesc("-mavx512f"); inc=1; do_output(fullopt); next; }
/^-mavx512er$/ { fullopt=$0; canonopt=deesc("-mavx512er"); inc=1; do_output(fullopt); next; }
/^-mavx512dq$/ { fullopt=$0; canonopt=deesc("-mavx512dq"); inc=1; do_output(fullopt); next; }
/^-mavx512cd$/ { fullopt=$0; canonopt=deesc("-mavx512cd"); inc=1; do_output(fullopt); next; }
/^-mavx512bw$/ { fullopt=$0; canonopt=deesc("-mavx512bw"); inc=1; do_output(fullopt); next; }
/^-mavx512bitalg$/ { fullopt=$0; canonopt=deesc("-mavx512bitalg"); inc=1; do_output(fullopt); next; }
/^-mavx512bf16$/ { fullopt=$0; canonopt=deesc("-mavx512bf16"); inc=1; do_output(fullopt); next; }
/^-mavx5124vnniw$/ { fullopt=$0; canonopt=deesc("-mavx5124vnniw"); inc=1; do_output(fullopt); next; }
/^-mavx5124fmaps$/ { fullopt=$0; canonopt=deesc("-mavx5124fmaps"); inc=1; do_output(fullopt); next; }
/^-mavx256-split-unaligned-store$/ { fullopt=$0; canonopt=deesc("-mavx256-split-unaligned-store"); inc=1; do_output(fullopt); next; }
/^-mavx256-split-unaligned-load$/ { fullopt=$0; canonopt=deesc("-mavx256-split-unaligned-load"); inc=1; do_output(fullopt); next; }
/^-mavx2$/ { fullopt=$0; canonopt=deesc("-mavx2"); inc=1; do_output(fullopt); next; }
/^-mavx$/ { fullopt=$0; canonopt=deesc("-mavx"); inc=1; do_output(fullopt); next; }
/^(-masm=)(.*)$/ { fullopt=$0; canonopt=deesc("-masm"); optarg=gensub(/(-masm=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-march=)(.*)$/ { fullopt=$0; canonopt=deesc("-march"); optarg=gensub(/(-march=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mandroid$/ { fullopt=$0; canonopt=deesc("-mandroid"); inc=1; do_output(fullopt); next; }
/^-mamx-tile$/ { fullopt=$0; canonopt=deesc("-mamx-tile"); inc=1; do_output(fullopt); next; }
/^-mamx-int8$/ { fullopt=$0; canonopt=deesc("-mamx-int8"); inc=1; do_output(fullopt); next; }
/^-mamx-bf16$/ { fullopt=$0; canonopt=deesc("-mamx-bf16"); inc=1; do_output(fullopt); next; }
/^-malign-stringops$/ { fullopt=$0; canonopt=deesc("-malign-stringops"); inc=1; do_output(fullopt); next; }
/^(-malign-loops=)(.*)$/ { fullopt=$0; canonopt=deesc("-malign-loops"); optarg=gensub(/(-malign-loops=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-malign-jumps=)(.*)$/ { fullopt=$0; canonopt=deesc("-malign-jumps"); optarg=gensub(/(-malign-jumps=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-malign-functions=)(.*)$/ { fullopt=$0; canonopt=deesc("-malign-functions"); optarg=gensub(/(-malign-functions=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-malign-double$/ { fullopt=$0; canonopt=deesc("-malign-double"); inc=1; do_output(fullopt); next; }
/^(-malign-data=)(.*)$/ { fullopt=$0; canonopt=deesc("-malign-data"); optarg=gensub(/(-malign-data=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-maes$/ { fullopt=$0; canonopt=deesc("-maes"); inc=1; do_output(fullopt); next; }
/^-madx$/ { fullopt=$0; canonopt=deesc("-madx"); inc=1; do_output(fullopt); next; }
/^(-maddress-mode=)(.*)$/ { fullopt=$0; canonopt=deesc("-maddress-mode"); optarg=gensub(/(-maddress-mode=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-maccumulate-outgoing-args$/ { fullopt=$0; canonopt=deesc("-maccumulate-outgoing-args"); inc=1; do_output(fullopt); next; }
/^-mabm$/ { fullopt=$0; canonopt=deesc("-mabm"); inc=1; do_output(fullopt); next; }
/^(-mabi=)(.*)$/ { fullopt=$0; canonopt=deesc("-mabi"); optarg=gensub(/(-mabi=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-m96bit-long-double$/ { fullopt=$0; canonopt=deesc("-m96bit-long-double"); inc=1; do_output(fullopt); next; }
/^-m8bit-idiv$/ { fullopt=$0; canonopt=deesc("-m8bit-idiv"); inc=1; do_output(fullopt); next; }
/^-m80387$/ { fullopt=$0; canonopt=deesc("-m80387"); inc=1; do_output(fullopt); next; }
/^-m64$/ { fullopt=$0; canonopt=deesc("-m64"); inc=1; do_output(fullopt); next; }
/^-m3dnowa$/ { fullopt=$0; canonopt=deesc("-m3dnowa"); inc=1; do_output(fullopt); next; }
/^-m3dnow$/ { fullopt=$0; canonopt=deesc("-m3dnow"); inc=1; do_output(fullopt); next; }
/^-m32$/ { fullopt=$0; canonopt=deesc("-m32"); inc=1; do_output(fullopt); next; }
/^-m16$/ { fullopt=$0; canonopt=deesc("-m16"); inc=1; do_output(fullopt); next; }
/^-m128bit-long-double$/ { fullopt=$0; canonopt=deesc("-m128bit-long-double"); inc=1; do_output(fullopt); next; }
/^-list$/ { fullopt=$0; canonopt=deesc("-list"); inc=1; do_output(fullopt); next; }
/^-lang-asm$/ { fullopt=$0; canonopt=deesc("-lang-asm"); inc=1; do_output(fullopt); next; }
/^(-iwithprefixbefore)$/     { fullopt=$0; canonopt=deesc("-iwithprefixbefore"); snarfing_optarg=1; inc=2; next; }
/^(-iwithprefix)$/     { fullopt=$0; canonopt=deesc("-iwithprefix"); snarfing_optarg=1; inc=2; next; }
/^(-isystem)$/     { fullopt=$0; canonopt=deesc("-isystem"); snarfing_optarg=1; inc=2; next; }
/^(-isysroot)$/     { fullopt=$0; canonopt=deesc("-isysroot"); snarfing_optarg=1; inc=2; next; }
/^(-iquote)$/     { fullopt=$0; canonopt=deesc("-iquote"); snarfing_optarg=1; inc=2; next; }
/^(-iprefix)$/     { fullopt=$0; canonopt=deesc("-iprefix"); snarfing_optarg=1; inc=2; next; }
/^(-iplugindir=)(.*)$/ { fullopt=$0; canonopt=deesc("-iplugindir"); optarg=gensub(/(-iplugindir=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-include)$/     { fullopt=$0; canonopt=deesc("-include"); snarfing_optarg=1; inc=2; next; }
/^(-imultilib)$/     { fullopt=$0; canonopt=deesc("-imultilib"); snarfing_optarg=1; inc=2; next; }
/^(-imultiarch)$/     { fullopt=$0; canonopt=deesc("-imultiarch"); snarfing_optarg=1; inc=2; next; }
/^(-imacros)$/     { fullopt=$0; canonopt=deesc("-imacros"); snarfing_optarg=1; inc=2; next; }
/^(-idirafter)$/     { fullopt=$0; canonopt=deesc("-idirafter"); snarfing_optarg=1; inc=2; next; }
/^-help$/ { fullopt=$0; canonopt=deesc("-help"); inc=1; do_output(fullopt); next; }
/^(-gz=)(.*)$/ { fullopt=$0; canonopt=deesc("-gz"); optarg=gensub(/(-gz=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-gz$/ { fullopt=$0; canonopt=deesc("-gz"); inc=1; do_output(fullopt); next; }
/^-gxcoff\+$/ { fullopt=$0; canonopt=deesc("-gxcoff\+"); inc=1; do_output(fullopt); next; }
/^-gxcoff$/ { fullopt=$0; canonopt=deesc("-gxcoff"); inc=1; do_output(fullopt); next; }
/^-gvms$/ { fullopt=$0; canonopt=deesc("-gvms"); inc=1; do_output(fullopt); next; }
/^(-gvariable-location-views=)(.*)$/ { fullopt=$0; canonopt=deesc("-gvariable-location-views"); optarg=gensub(/(-gvariable-location-views=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-gvariable-location-views$/ { fullopt=$0; canonopt=deesc("-gvariable-location-views"); inc=1; do_output(fullopt); next; }
/^-gtoggle$/ { fullopt=$0; canonopt=deesc("-gtoggle"); inc=1; do_output(fullopt); next; }
/^-gstrict-dwarf$/ { fullopt=$0; canonopt=deesc("-gstrict-dwarf"); inc=1; do_output(fullopt); next; }
/^-gstatement-frontiers$/ { fullopt=$0; canonopt=deesc("-gstatement-frontiers"); inc=1; do_output(fullopt); next; }
/^-gstabs\+$/ { fullopt=$0; canonopt=deesc("-gstabs\+"); inc=1; do_output(fullopt); next; }
/^-gstabs$/ { fullopt=$0; canonopt=deesc("-gstabs"); inc=1; do_output(fullopt); next; }
/^-gsplit-dwarf$/ { fullopt=$0; canonopt=deesc("-gsplit-dwarf"); inc=1; do_output(fullopt); next; }
/^-grecord-gcc-switches$/ { fullopt=$0; canonopt=deesc("-grecord-gcc-switches"); inc=1; do_output(fullopt); next; }
/^-gpubnames$/ { fullopt=$0; canonopt=deesc("-gpubnames"); inc=1; do_output(fullopt); next; }
/^-gno-pubnames$/ { fullopt=$0; canonopt=deesc("-gno-pubnames"); inc=1; do_output(fullopt); next; }
/^(-gnatO)$/     { fullopt=$0; canonopt=deesc("-gnatO"); snarfing_optarg=1; inc=2; next; }
/^(-gnat)(.*)$/ { fullopt=$0; canonopt=deesc("-gnat"); optarg=gensub(/(-gnat)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-ginternal-reset-location-views$/ { fullopt=$0; canonopt=deesc("-ginternal-reset-location-views"); inc=1; do_output(fullopt); next; }
/^-ginline-points$/ { fullopt=$0; canonopt=deesc("-ginline-points"); inc=1; do_output(fullopt); next; }
/^-gimple-stats$/ { fullopt=$0; canonopt=deesc("-gimple-stats"); inc=1; do_output(fullopt); next; }
/^-ggnu-pubnames$/ { fullopt=$0; canonopt=deesc("-ggnu-pubnames"); inc=1; do_output(fullopt); next; }
/^-ggdb$/ { fullopt=$0; canonopt=deesc("-ggdb"); inc=1; do_output(fullopt); next; }
/^-gen-decls$/ { fullopt=$0; canonopt=deesc("-gen-decls"); inc=1; do_output(fullopt); next; }
/^-gdwarf64$/ { fullopt=$0; canonopt=deesc("-gdwarf64"); inc=1; do_output(fullopt); next; }
/^-gdwarf32$/ { fullopt=$0; canonopt=deesc("-gdwarf32"); inc=1; do_output(fullopt); next; }
/^-gdwarf-$/ { fullopt=$0; canonopt=deesc("-gdwarf-"); inc=1; do_output(fullopt); next; }
/^-gdwarf$/ { fullopt=$0; canonopt=deesc("-gdwarf"); inc=1; do_output(fullopt); next; }
/^-gdescribe-dies$/ { fullopt=$0; canonopt=deesc("-gdescribe-dies"); inc=1; do_output(fullopt); next; }
/^-gcolumn-info$/ { fullopt=$0; canonopt=deesc("-gcolumn-info"); inc=1; do_output(fullopt); next; }
/^-gcoff3$/ { fullopt=$0; canonopt=deesc("-gcoff3"); inc=1; do_output(fullopt); next; }
/^-gcoff2$/ { fullopt=$0; canonopt=deesc("-gcoff2"); inc=1; do_output(fullopt); next; }
/^-gcoff1$/ { fullopt=$0; canonopt=deesc("-gcoff1"); inc=1; do_output(fullopt); next; }
/^-gcoff$/ { fullopt=$0; canonopt=deesc("-gcoff"); inc=1; do_output(fullopt); next; }
/^-gas-locview-support$/ { fullopt=$0; canonopt=deesc("-gas-locview-support"); inc=1; do_output(fullopt); next; }
/^-gas-loc-support$/ { fullopt=$0; canonopt=deesc("-gas-loc-support"); inc=1; do_output(fullopt); next; }
/^-gant$/ { fullopt=$0; canonopt=deesc("-gant"); inc=1; do_output(fullopt); next; }
/^-g$/ { fullopt=$0; canonopt=deesc("-g"); inc=1; do_output(fullopt); next; }
/^-fzero-link$/ { fullopt=$0; canonopt=deesc("-fzero-link"); inc=1; do_output(fullopt); next; }
/^-fzero-initialized-in-bss$/ { fullopt=$0; canonopt=deesc("-fzero-initialized-in-bss"); inc=1; do_output(fullopt); next; }
/^(-fzero-call-used-regs=)(.*)$/ { fullopt=$0; canonopt=deesc("-fzero-call-used-regs"); optarg=gensub(/(-fzero-call-used-regs=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fzee$/ { fullopt=$0; canonopt=deesc("-fzee"); inc=1; do_output(fullopt); next; }
/^-fxref$/ { fullopt=$0; canonopt=deesc("-fxref"); inc=1; do_output(fullopt); next; }
/^-fxcode$/ { fullopt=$0; canonopt=deesc("-fxcode"); inc=1; do_output(fullopt); next; }
/^-fwrapv-pointer$/ { fullopt=$0; canonopt=deesc("-fwrapv-pointer"); inc=1; do_output(fullopt); next; }
/^-fwrapv$/ { fullopt=$0; canonopt=deesc("-fwrapv"); inc=1; do_output(fullopt); next; }
/^(-fwpa=)(.*)$/ { fullopt=$0; canonopt=deesc("-fwpa"); optarg=gensub(/(-fwpa=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fwpa$/ { fullopt=$0; canonopt=deesc("-fwpa"); inc=1; do_output(fullopt); next; }
/^-fworking-directory$/ { fullopt=$0; canonopt=deesc("-fworking-directory"); inc=1; do_output(fullopt); next; }
/^(-fwide-exec-charset=)(.*)$/ { fullopt=$0; canonopt=deesc("-fwide-exec-charset"); optarg=gensub(/(-fwide-exec-charset=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fwholevalue$/ { fullopt=$0; canonopt=deesc("-fwholevalue"); inc=1; do_output(fullopt); next; }
/^-fwholediv$/ { fullopt=$0; canonopt=deesc("-fwholediv"); inc=1; do_output(fullopt); next; }
/^-fwhole-program$/ { fullopt=$0; canonopt=deesc("-fwhole-program"); inc=1; do_output(fullopt); next; }
/^-fwhole-file$/ { fullopt=$0; canonopt=deesc("-fwhole-file"); inc=1; do_output(fullopt); next; }
/^-fweb$/ { fullopt=$0; canonopt=deesc("-fweb"); inc=1; do_output(fullopt); next; }
/^-fweak-templates$/ { fullopt=$0; canonopt=deesc("-fweak-templates"); inc=1; do_output(fullopt); next; }
/^-fweak$/ { fullopt=$0; canonopt=deesc("-fweak"); inc=1; do_output(fullopt); next; }
/^-fvtv-debug$/ { fullopt=$0; canonopt=deesc("-fvtv-debug"); inc=1; do_output(fullopt); next; }
/^-fvtv-counts$/ { fullopt=$0; canonopt=deesc("-fvtv-counts"); inc=1; do_output(fullopt); next; }
/^(-fvtable-verify=)(.*)$/ { fullopt=$0; canonopt=deesc("-fvtable-verify"); optarg=gensub(/(-fvtable-verify=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fvtable-thunks$/ { fullopt=$0; canonopt=deesc("-fvtable-thunks"); inc=1; do_output(fullopt); next; }
/^-fvtable-gc$/ { fullopt=$0; canonopt=deesc("-fvtable-gc"); inc=1; do_output(fullopt); next; }
/^-fvpt$/ { fullopt=$0; canonopt=deesc("-fvpt"); inc=1; do_output(fullopt); next; }
/^(-fvisibility=)(.*)$/ { fullopt=$0; canonopt=deesc("-fvisibility"); optarg=gensub(/(-fvisibility=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fvisibility-ms-compat$/ { fullopt=$0; canonopt=deesc("-fvisibility-ms-compat"); inc=1; do_output(fullopt); next; }
/^-fvisibility-inlines-hidden$/ { fullopt=$0; canonopt=deesc("-fvisibility-inlines-hidden"); inc=1; do_output(fullopt); next; }
/^(-fversion=)(.*)$/ { fullopt=$0; canonopt=deesc("-fversion"); optarg=gensub(/(-fversion=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fversion-loops-for-strides$/ { fullopt=$0; canonopt=deesc("-fversion-loops-for-strides"); inc=1; do_output(fullopt); next; }
/^-fversion$/ { fullopt=$0; canonopt=deesc("-fversion"); inc=1; do_output(fullopt); next; }
/^-fverbose-asm$/ { fullopt=$0; canonopt=deesc("-fverbose-asm"); inc=1; do_output(fullopt); next; }
/^(-fvect-cost-model=)(.*)$/ { fullopt=$0; canonopt=deesc("-fvect-cost-model"); optarg=gensub(/(-fvect-cost-model=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fvect-cost-model$/ { fullopt=$0; canonopt=deesc("-fvect-cost-model"); inc=1; do_output(fullopt); next; }
/^-fvariable-expansion-in-unroller$/ { fullopt=$0; canonopt=deesc("-fvariable-expansion-in-unroller"); inc=1; do_output(fullopt); next; }
/^-fvar-tracking-uninit$/ { fullopt=$0; canonopt=deesc("-fvar-tracking-uninit"); inc=1; do_output(fullopt); next; }
/^-fvar-tracking-assignments-toggle$/ { fullopt=$0; canonopt=deesc("-fvar-tracking-assignments-toggle"); inc=1; do_output(fullopt); next; }
/^-fvar-tracking-assignments$/ { fullopt=$0; canonopt=deesc("-fvar-tracking-assignments"); inc=1; do_output(fullopt); next; }
/^-fvar-tracking$/ { fullopt=$0; canonopt=deesc("-fvar-tracking"); inc=1; do_output(fullopt); next; }
/^-fuselist$/ { fullopt=$0; canonopt=deesc("-fuselist"); inc=1; do_output(fullopt); next; }
/^-fuse-linker-plugin$/ { fullopt=$0; canonopt=deesc("-fuse-linker-plugin"); inc=1; do_output(fullopt); next; }
/^(-fuse-ld=)(.*)$/ { fullopt=$0; canonopt=deesc("-fuse-ld"); optarg=gensub(/(-fuse-ld=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fuse-cxa-get-exception-ptr$/ { fullopt=$0; canonopt=deesc("-fuse-cxa-get-exception-ptr"); inc=1; do_output(fullopt); next; }
/^-fuse-cxa-atexit$/ { fullopt=$0; canonopt=deesc("-fuse-cxa-atexit"); inc=1; do_output(fullopt); next; }
/^-funwind-tables$/ { fullopt=$0; canonopt=deesc("-funwind-tables"); inc=1; do_output(fullopt); next; }
/^-funswitch-loops$/ { fullopt=$0; canonopt=deesc("-funswitch-loops"); inc=1; do_output(fullopt); next; }
/^-funsigned-char$/ { fullopt=$0; canonopt=deesc("-funsigned-char"); inc=1; do_output(fullopt); next; }
/^-funsigned-bitfields$/ { fullopt=$0; canonopt=deesc("-funsigned-bitfields"); inc=1; do_output(fullopt); next; }
/^-funsafe-math-optimizations$/ { fullopt=$0; canonopt=deesc("-funsafe-math-optimizations"); inc=1; do_output(fullopt); next; }
/^-funsafe-loop-optimizations$/ { fullopt=$0; canonopt=deesc("-funsafe-loop-optimizations"); inc=1; do_output(fullopt); next; }
/^-funroll-loops$/ { fullopt=$0; canonopt=deesc("-funroll-loops"); inc=1; do_output(fullopt); next; }
/^-funroll-completely-grow-size$/ { fullopt=$0; canonopt=deesc("-funroll-completely-grow-size"); inc=1; do_output(fullopt); next; }
/^-funroll-all-loops$/ { fullopt=$0; canonopt=deesc("-funroll-all-loops"); inc=1; do_output(fullopt); next; }
/^-funittest$/ { fullopt=$0; canonopt=deesc("-funittest"); inc=1; do_output(fullopt); next; }
/^-funit-at-a-time$/ { fullopt=$0; canonopt=deesc("-funit-at-a-time"); inc=1; do_output(fullopt); next; }
/^-funderscoring$/ { fullopt=$0; canonopt=deesc("-funderscoring"); inc=1; do_output(fullopt); next; }
/^-funconstrained-commons$/ { fullopt=$0; canonopt=deesc("-funconstrained-commons"); inc=1; do_output(fullopt); next; }
/^-funbounded-by-reference$/ { fullopt=$0; canonopt=deesc("-funbounded-by-reference"); inc=1; do_output(fullopt); next; }
/^-ftree-vrp$/ { fullopt=$0; canonopt=deesc("-ftree-vrp"); inc=1; do_output(fullopt); next; }
/^(-ftree-vectorizer-verbose=)(.*)$/ { fullopt=$0; canonopt=deesc("-ftree-vectorizer-verbose"); optarg=gensub(/(-ftree-vectorizer-verbose=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-ftree-vectorize$/ { fullopt=$0; canonopt=deesc("-ftree-vectorize"); inc=1; do_output(fullopt); next; }
/^-ftree-vect-loop-version$/ { fullopt=$0; canonopt=deesc("-ftree-vect-loop-version"); inc=1; do_output(fullopt); next; }
/^-ftree-ter$/ { fullopt=$0; canonopt=deesc("-ftree-ter"); inc=1; do_output(fullopt); next; }
/^-ftree-tail-merge$/ { fullopt=$0; canonopt=deesc("-ftree-tail-merge"); inc=1; do_output(fullopt); next; }
/^-ftree-switch-conversion$/ { fullopt=$0; canonopt=deesc("-ftree-switch-conversion"); inc=1; do_output(fullopt); next; }
/^-ftree-store-copy-prop$/ { fullopt=$0; canonopt=deesc("-ftree-store-copy-prop"); inc=1; do_output(fullopt); next; }
/^-ftree-store-ccp$/ { fullopt=$0; canonopt=deesc("-ftree-store-ccp"); inc=1; do_output(fullopt); next; }
/^-ftree-sra$/ { fullopt=$0; canonopt=deesc("-ftree-sra"); inc=1; do_output(fullopt); next; }
/^-ftree-slsr$/ { fullopt=$0; canonopt=deesc("-ftree-slsr"); inc=1; do_output(fullopt); next; }
/^-ftree-slp-vectorize$/ { fullopt=$0; canonopt=deesc("-ftree-slp-vectorize"); inc=1; do_output(fullopt); next; }
/^-ftree-sink$/ { fullopt=$0; canonopt=deesc("-ftree-sink"); inc=1; do_output(fullopt); next; }
/^-ftree-scev-cprop$/ { fullopt=$0; canonopt=deesc("-ftree-scev-cprop"); inc=1; do_output(fullopt); next; }
/^-ftree-salias$/ { fullopt=$0; canonopt=deesc("-ftree-salias"); inc=1; do_output(fullopt); next; }
/^-ftree-reassoc$/ { fullopt=$0; canonopt=deesc("-ftree-reassoc"); inc=1; do_output(fullopt); next; }
/^-ftree-pta$/ { fullopt=$0; canonopt=deesc("-ftree-pta"); inc=1; do_output(fullopt); next; }
/^-ftree-pre$/ { fullopt=$0; canonopt=deesc("-ftree-pre"); inc=1; do_output(fullopt); next; }
/^-ftree-phiprop$/ { fullopt=$0; canonopt=deesc("-ftree-phiprop"); inc=1; do_output(fullopt); next; }
/^-ftree-partial-pre$/ { fullopt=$0; canonopt=deesc("-ftree-partial-pre"); inc=1; do_output(fullopt); next; }
/^(-ftree-parallelize-loops=)(.*)$/ { fullopt=$0; canonopt=deesc("-ftree-parallelize-loops"); optarg=gensub(/(-ftree-parallelize-loops=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-ftree-lrs$/ { fullopt=$0; canonopt=deesc("-ftree-lrs"); inc=1; do_output(fullopt); next; }
/^-ftree-loop-vectorize$/ { fullopt=$0; canonopt=deesc("-ftree-loop-vectorize"); inc=1; do_output(fullopt); next; }
/^-ftree-loop-optimize$/ { fullopt=$0; canonopt=deesc("-ftree-loop-optimize"); inc=1; do_output(fullopt); next; }
/^-ftree-loop-linear$/ { fullopt=$0; canonopt=deesc("-ftree-loop-linear"); inc=1; do_output(fullopt); next; }
/^-ftree-loop-ivcanon$/ { fullopt=$0; canonopt=deesc("-ftree-loop-ivcanon"); inc=1; do_output(fullopt); next; }
/^-ftree-loop-im$/ { fullopt=$0; canonopt=deesc("-ftree-loop-im"); inc=1; do_output(fullopt); next; }
/^-ftree-loop-if-convert-stores$/ { fullopt=$0; canonopt=deesc("-ftree-loop-if-convert-stores"); inc=1; do_output(fullopt); next; }
/^-ftree-loop-if-convert$/ { fullopt=$0; canonopt=deesc("-ftree-loop-if-convert"); inc=1; do_output(fullopt); next; }
/^-ftree-loop-distribution$/ { fullopt=$0; canonopt=deesc("-ftree-loop-distribution"); inc=1; do_output(fullopt); next; }
/^-ftree-loop-distribute-patterns$/ { fullopt=$0; canonopt=deesc("-ftree-loop-distribute-patterns"); inc=1; do_output(fullopt); next; }
/^-ftree-fre$/ { fullopt=$0; canonopt=deesc("-ftree-fre"); inc=1; do_output(fullopt); next; }
/^-ftree-forwprop$/ { fullopt=$0; canonopt=deesc("-ftree-forwprop"); inc=1; do_output(fullopt); next; }
/^-ftree-dse$/ { fullopt=$0; canonopt=deesc("-ftree-dse"); inc=1; do_output(fullopt); next; }
/^-ftree-dominator-opts$/ { fullopt=$0; canonopt=deesc("-ftree-dominator-opts"); inc=1; do_output(fullopt); next; }
/^-ftree-dce$/ { fullopt=$0; canonopt=deesc("-ftree-dce"); inc=1; do_output(fullopt); next; }
/^-ftree-cselim$/ { fullopt=$0; canonopt=deesc("-ftree-cselim"); inc=1; do_output(fullopt); next; }
/^-ftree-copyrename$/ { fullopt=$0; canonopt=deesc("-ftree-copyrename"); inc=1; do_output(fullopt); next; }
/^-ftree-copy-prop$/ { fullopt=$0; canonopt=deesc("-ftree-copy-prop"); inc=1; do_output(fullopt); next; }
/^-ftree-coalesce-vars$/ { fullopt=$0; canonopt=deesc("-ftree-coalesce-vars"); inc=1; do_output(fullopt); next; }
/^-ftree-coalesce-inlined-vars$/ { fullopt=$0; canonopt=deesc("-ftree-coalesce-inlined-vars"); inc=1; do_output(fullopt); next; }
/^-ftree-ch$/ { fullopt=$0; canonopt=deesc("-ftree-ch"); inc=1; do_output(fullopt); next; }
/^-ftree-ccp$/ { fullopt=$0; canonopt=deesc("-ftree-ccp"); inc=1; do_output(fullopt); next; }
/^-ftree-builtin-call-dce$/ { fullopt=$0; canonopt=deesc("-ftree-builtin-call-dce"); inc=1; do_output(fullopt); next; }
/^-ftree-bit-ccp$/ { fullopt=$0; canonopt=deesc("-ftree-bit-ccp"); inc=1; do_output(fullopt); next; }
/^-ftrapv$/ { fullopt=$0; canonopt=deesc("-ftrapv"); inc=1; do_output(fullopt); next; }
/^-ftrapping-math$/ { fullopt=$0; canonopt=deesc("-ftrapping-math"); inc=1; do_output(fullopt); next; }
/^(-ftransition=)(.*)$/ { fullopt=$0; canonopt=deesc("-ftransition"); optarg=gensub(/(-ftransition=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-ftrampolines$/ { fullopt=$0; canonopt=deesc("-ftrampolines"); inc=1; do_output(fullopt); next; }
/^(-ftrack-macro-expansion=)(.*)$/ { fullopt=$0; canonopt=deesc("-ftrack-macro-expansion"); optarg=gensub(/(-ftrack-macro-expansion=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-ftrack-macro-expansion$/ { fullopt=$0; canonopt=deesc("-ftrack-macro-expansion"); inc=1; do_output(fullopt); next; }
/^-ftracer$/ { fullopt=$0; canonopt=deesc("-ftracer"); inc=1; do_output(fullopt); next; }
/^-ftoplevel-reorder$/ { fullopt=$0; canonopt=deesc("-ftoplevel-reorder"); inc=1; do_output(fullopt); next; }
/^(-ftls-model=)(.*)$/ { fullopt=$0; canonopt=deesc("-ftls-model"); optarg=gensub(/(-ftls-model=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-ftime-report-details$/ { fullopt=$0; canonopt=deesc("-ftime-report-details"); inc=1; do_output(fullopt); next; }
/^-ftime-report$/ { fullopt=$0; canonopt=deesc("-ftime-report"); inc=1; do_output(fullopt); next; }
/^-fthread-jumps$/ { fullopt=$0; canonopt=deesc("-fthread-jumps"); inc=1; do_output(fullopt); next; }
/^-fthis-is-variable$/ { fullopt=$0; canonopt=deesc("-fthis-is-variable"); inc=1; do_output(fullopt); next; }
/^-ftest-forall-temp$/ { fullopt=$0; canonopt=deesc("-ftest-forall-temp"); inc=1; do_output(fullopt); next; }
/^-ftest-coverage$/ { fullopt=$0; canonopt=deesc("-ftest-coverage"); inc=1; do_output(fullopt); next; }
/^(-ftemplate-depth=)(.*)$/ { fullopt=$0; canonopt=deesc("-ftemplate-depth"); optarg=gensub(/(-ftemplate-depth=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-ftemplate-depth-$/ { fullopt=$0; canonopt=deesc("-ftemplate-depth-"); inc=1; do_output(fullopt); next; }
/^(-ftemplate-backtrace-limit=)(.*)$/ { fullopt=$0; canonopt=deesc("-ftemplate-backtrace-limit"); optarg=gensub(/(-ftemplate-backtrace-limit=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-ftarget-ranlib=)(.*)$/ { fullopt=$0; canonopt=deesc("-ftarget-ranlib"); optarg=gensub(/(-ftarget-ranlib=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-ftarget-help$/ { fullopt=$0; canonopt=deesc("-ftarget-help"); inc=1; do_output(fullopt); next; }
/^(-ftarget-ar=)(.*)$/ { fullopt=$0; canonopt=deesc("-ftarget-ar"); optarg=gensub(/(-ftarget-ar=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-ftail-call-workaround=)(.*)$/ { fullopt=$0; canonopt=deesc("-ftail-call-workaround"); optarg=gensub(/(-ftail-call-workaround=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-ftail-call-workaround$/ { fullopt=$0; canonopt=deesc("-ftail-call-workaround"); inc=1; do_output(fullopt); next; }
/^(-ftabstop=)(.*)$/ { fullopt=$0; canonopt=deesc("-ftabstop"); optarg=gensub(/(-ftabstop=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fsyntax-only$/ { fullopt=$0; canonopt=deesc("-fsyntax-only"); inc=1; do_output(fullopt); next; }
/^-fsync-libcalls$/ { fullopt=$0; canonopt=deesc("-fsync-libcalls"); inc=1; do_output(fullopt); next; }
/^-fswitch-errors$/ { fullopt=$0; canonopt=deesc("-fswitch-errors"); inc=1; do_output(fullopt); next; }
/^-fswig$/ { fullopt=$0; canonopt=deesc("-fswig"); inc=1; do_output(fullopt); next; }
/^(-fstrong-eval-order=)(.*)$/ { fullopt=$0; canonopt=deesc("-fstrong-eval-order"); optarg=gensub(/(-fstrong-eval-order=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fstrong-eval-order$/ { fullopt=$0; canonopt=deesc("-fstrong-eval-order"); inc=1; do_output(fullopt); next; }
/^-fstrict-volatile-bitfields$/ { fullopt=$0; canonopt=deesc("-fstrict-volatile-bitfields"); inc=1; do_output(fullopt); next; }
/^-fstrict-prototype$/ { fullopt=$0; canonopt=deesc("-fstrict-prototype"); inc=1; do_output(fullopt); next; }
/^-fstrict-overflow$/ { fullopt=$0; canonopt=deesc("-fstrict-overflow"); inc=1; do_output(fullopt); next; }
/^-fstrict-enums$/ { fullopt=$0; canonopt=deesc("-fstrict-enums"); inc=1; do_output(fullopt); next; }
/^-fstrict-aliasing$/ { fullopt=$0; canonopt=deesc("-fstrict-aliasing"); inc=1; do_output(fullopt); next; }
/^-fstrength-reduce$/ { fullopt=$0; canonopt=deesc("-fstrength-reduce"); inc=1; do_output(fullopt); next; }
/^-fstore-merging$/ { fullopt=$0; canonopt=deesc("-fstore-merging"); inc=1; do_output(fullopt); next; }
/^-fstdarg-opt$/ { fullopt=$0; canonopt=deesc("-fstdarg-opt"); inc=1; do_output(fullopt); next; }
/^-fstats$/ { fullopt=$0; canonopt=deesc("-fstats"); inc=1; do_output(fullopt); next; }
/^-fstack-usage$/ { fullopt=$0; canonopt=deesc("-fstack-usage"); inc=1; do_output(fullopt); next; }
/^(-fstack-reuse=)(.*)$/ { fullopt=$0; canonopt=deesc("-fstack-reuse"); optarg=gensub(/(-fstack-reuse=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fstack-protector-strong$/ { fullopt=$0; canonopt=deesc("-fstack-protector-strong"); inc=1; do_output(fullopt); next; }
/^-fstack-protector-explicit$/ { fullopt=$0; canonopt=deesc("-fstack-protector-explicit"); inc=1; do_output(fullopt); next; }
/^-fstack-protector-all$/ { fullopt=$0; canonopt=deesc("-fstack-protector-all"); inc=1; do_output(fullopt); next; }
/^-fstack-protector$/ { fullopt=$0; canonopt=deesc("-fstack-protector"); inc=1; do_output(fullopt); next; }
/^(-fstack-limit-symbol=)(.*)$/ { fullopt=$0; canonopt=deesc("-fstack-limit-symbol"); optarg=gensub(/(-fstack-limit-symbol=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fstack-limit-register=)(.*)$/ { fullopt=$0; canonopt=deesc("-fstack-limit-register"); optarg=gensub(/(-fstack-limit-register=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fstack-limit$/ { fullopt=$0; canonopt=deesc("-fstack-limit"); inc=1; do_output(fullopt); next; }
/^-fstack-clash-protection$/ { fullopt=$0; canonopt=deesc("-fstack-clash-protection"); inc=1; do_output(fullopt); next; }
/^(-fstack-check=)(.*)$/ { fullopt=$0; canonopt=deesc("-fstack-check"); optarg=gensub(/(-fstack-check=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fstack-check$/ { fullopt=$0; canonopt=deesc("-fstack-check"); inc=1; do_output(fullopt); next; }
/^-fstack-arrays$/ { fullopt=$0; canonopt=deesc("-fstack-arrays"); inc=1; do_output(fullopt); next; }
/^(-fsso-struct=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsso-struct"); optarg=gensub(/(-fsso-struct=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fssa-phiopt$/ { fullopt=$0; canonopt=deesc("-fssa-phiopt"); inc=1; do_output(fullopt); next; }
/^-fssa-backprop$/ { fullopt=$0; canonopt=deesc("-fssa-backprop"); inc=1; do_output(fullopt); next; }
/^-fsquangle$/ { fullopt=$0; canonopt=deesc("-fsquangle"); inc=1; do_output(fullopt); next; }
/^-fsplit-wide-types-early$/ { fullopt=$0; canonopt=deesc("-fsplit-wide-types-early"); inc=1; do_output(fullopt); next; }
/^-fsplit-wide-types$/ { fullopt=$0; canonopt=deesc("-fsplit-wide-types"); inc=1; do_output(fullopt); next; }
/^-fsplit-stack$/ { fullopt=$0; canonopt=deesc("-fsplit-stack"); inc=1; do_output(fullopt); next; }
/^-fsplit-paths$/ { fullopt=$0; canonopt=deesc("-fsplit-paths"); inc=1; do_output(fullopt); next; }
/^-fsplit-loops$/ { fullopt=$0; canonopt=deesc("-fsplit-loops"); inc=1; do_output(fullopt); next; }
/^-fsplit-ivs-in-unroller$/ { fullopt=$0; canonopt=deesc("-fsplit-ivs-in-unroller"); inc=1; do_output(fullopt); next; }
/^-fsources$/ { fullopt=$0; canonopt=deesc("-fsources"); inc=1; do_output(fullopt); next; }
/^-fsoft-check-all$/ { fullopt=$0; canonopt=deesc("-fsoft-check-all"); inc=1; do_output(fullopt); next; }
/^-fsized-deallocation$/ { fullopt=$0; canonopt=deesc("-fsized-deallocation"); inc=1; do_output(fullopt); next; }
/^-fsingle-precision-constant$/ { fullopt=$0; canonopt=deesc("-fsingle-precision-constant"); inc=1; do_output(fullopt); next; }
/^(-fsimd-cost-model=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsimd-cost-model"); optarg=gensub(/(-fsimd-cost-model=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fsigned-zeros$/ { fullopt=$0; canonopt=deesc("-fsigned-zeros"); inc=1; do_output(fullopt); next; }
/^-fsigned-char$/ { fullopt=$0; canonopt=deesc("-fsigned-char"); inc=1; do_output(fullopt); next; }
/^-fsigned-bitfields$/ { fullopt=$0; canonopt=deesc("-fsigned-bitfields"); inc=1; do_output(fullopt); next; }
/^-fsignaling-nans$/ { fullopt=$0; canonopt=deesc("-fsignaling-nans"); inc=1; do_output(fullopt); next; }
/^-fsign-zero$/ { fullopt=$0; canonopt=deesc("-fsign-zero"); inc=1; do_output(fullopt); next; }
/^-fshrink-wrap-separate$/ { fullopt=$0; canonopt=deesc("-fshrink-wrap-separate"); inc=1; do_output(fullopt); next; }
/^-fshrink-wrap$/ { fullopt=$0; canonopt=deesc("-fshrink-wrap"); inc=1; do_output(fullopt); next; }
/^-fshow-column$/ { fullopt=$0; canonopt=deesc("-fshow-column"); inc=1; do_output(fullopt); next; }
/^-fshort-wchar$/ { fullopt=$0; canonopt=deesc("-fshort-wchar"); inc=1; do_output(fullopt); next; }
/^-fshort-enums$/ { fullopt=$0; canonopt=deesc("-fshort-enums"); inc=1; do_output(fullopt); next; }
/^-fshared$/ { fullopt=$0; canonopt=deesc("-fshared"); inc=1; do_output(fullopt); next; }
/^-fsemantic-interposition$/ { fullopt=$0; canonopt=deesc("-fsemantic-interposition"); inc=1; do_output(fullopt); next; }
/^(-fself-test=)(.*)$/ { fullopt=$0; canonopt=deesc("-fself-test"); optarg=gensub(/(-fself-test=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fselective-scheduling2$/ { fullopt=$0; canonopt=deesc("-fselective-scheduling2"); inc=1; do_output(fullopt); next; }
/^-fselective-scheduling$/ { fullopt=$0; canonopt=deesc("-fselective-scheduling"); inc=1; do_output(fullopt); next; }
/^-fsel-sched-reschedule-pipelined$/ { fullopt=$0; canonopt=deesc("-fsel-sched-reschedule-pipelined"); inc=1; do_output(fullopt); next; }
/^-fsel-sched-pipelining-outer-loops$/ { fullopt=$0; canonopt=deesc("-fsel-sched-pipelining-outer-loops"); inc=1; do_output(fullopt); next; }
/^-fsel-sched-pipelining$/ { fullopt=$0; canonopt=deesc("-fsel-sched-pipelining"); inc=1; do_output(fullopt); next; }
/^-fsee$/ { fullopt=$0; canonopt=deesc("-fsee"); inc=1; do_output(fullopt); next; }
/^-fsection-anchors$/ { fullopt=$0; canonopt=deesc("-fsection-anchors"); inc=1; do_output(fullopt); next; }
/^-fsecond-underscore$/ { fullopt=$0; canonopt=deesc("-fsecond-underscore"); inc=1; do_output(fullopt); next; }
/^-fschedule-insns2$/ { fullopt=$0; canonopt=deesc("-fschedule-insns2"); inc=1; do_output(fullopt); next; }
/^-fschedule-insns$/ { fullopt=$0; canonopt=deesc("-fschedule-insns"); inc=1; do_output(fullopt); next; }
/^-fschedule-fusion$/ { fullopt=$0; canonopt=deesc("-fschedule-fusion"); inc=1; do_output(fullopt); next; }
/^-fsched2-use-traces$/ { fullopt=$0; canonopt=deesc("-fsched2-use-traces"); inc=1; do_output(fullopt); next; }
/^-fsched2-use-superblocks$/ { fullopt=$0; canonopt=deesc("-fsched2-use-superblocks"); inc=1; do_output(fullopt); next; }
/^(-fsched-verbose=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsched-verbose"); optarg=gensub(/(-fsched-verbose=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fsched-stalled-insns=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsched-stalled-insns"); optarg=gensub(/(-fsched-stalled-insns=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fsched-stalled-insns-dep=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsched-stalled-insns-dep"); optarg=gensub(/(-fsched-stalled-insns-dep=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fsched-stalled-insns-dep$/ { fullopt=$0; canonopt=deesc("-fsched-stalled-insns-dep"); inc=1; do_output(fullopt); next; }
/^-fsched-stalled-insns$/ { fullopt=$0; canonopt=deesc("-fsched-stalled-insns"); inc=1; do_output(fullopt); next; }
/^-fsched-spec-load-dangerous$/ { fullopt=$0; canonopt=deesc("-fsched-spec-load-dangerous"); inc=1; do_output(fullopt); next; }
/^-fsched-spec-load$/ { fullopt=$0; canonopt=deesc("-fsched-spec-load"); inc=1; do_output(fullopt); next; }
/^-fsched-spec-insn-heuristic$/ { fullopt=$0; canonopt=deesc("-fsched-spec-insn-heuristic"); inc=1; do_output(fullopt); next; }
/^-fsched-spec$/ { fullopt=$0; canonopt=deesc("-fsched-spec"); inc=1; do_output(fullopt); next; }
/^-fsched-rank-heuristic$/ { fullopt=$0; canonopt=deesc("-fsched-rank-heuristic"); inc=1; do_output(fullopt); next; }
/^-fsched-pressure$/ { fullopt=$0; canonopt=deesc("-fsched-pressure"); inc=1; do_output(fullopt); next; }
/^-fsched-last-insn-heuristic$/ { fullopt=$0; canonopt=deesc("-fsched-last-insn-heuristic"); inc=1; do_output(fullopt); next; }
/^-fsched-interblock$/ { fullopt=$0; canonopt=deesc("-fsched-interblock"); inc=1; do_output(fullopt); next; }
/^-fsched-group-heuristic$/ { fullopt=$0; canonopt=deesc("-fsched-group-heuristic"); inc=1; do_output(fullopt); next; }
/^-fsched-dep-count-heuristic$/ { fullopt=$0; canonopt=deesc("-fsched-dep-count-heuristic"); inc=1; do_output(fullopt); next; }
/^-fsched-critical-path-heuristic$/ { fullopt=$0; canonopt=deesc("-fsched-critical-path-heuristic"); inc=1; do_output(fullopt); next; }
/^-fsave-optimization-record$/ { fullopt=$0; canonopt=deesc("-fsave-optimization-record"); inc=1; do_output(fullopt); next; }
/^(-fsanitize=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsanitize"); optarg=gensub(/(-fsanitize=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fsanitize-undefined-trap-on-error$/ { fullopt=$0; canonopt=deesc("-fsanitize-undefined-trap-on-error"); inc=1; do_output(fullopt); next; }
/^(-fsanitize-sections=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsanitize-sections"); optarg=gensub(/(-fsanitize-sections=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fsanitize-recover=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsanitize-recover"); optarg=gensub(/(-fsanitize-recover=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fsanitize-recover$/ { fullopt=$0; canonopt=deesc("-fsanitize-recover"); inc=1; do_output(fullopt); next; }
/^(-fsanitize-coverage=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsanitize-coverage"); optarg=gensub(/(-fsanitize-coverage=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fsanitize-address-use-after-scope$/ { fullopt=$0; canonopt=deesc("-fsanitize-address-use-after-scope"); inc=1; do_output(fullopt); next; }
/^(-fruntime-modules=)(.*)$/ { fullopt=$0; canonopt=deesc("-fruntime-modules"); optarg=gensub(/(-fruntime-modules=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-frtti$/ { fullopt=$0; canonopt=deesc("-frtti"); inc=1; do_output(fullopt); next; }
/^-frounding-math$/ { fullopt=$0; canonopt=deesc("-frounding-math"); inc=1; do_output(fullopt); next; }
/^-freturn$/ { fullopt=$0; canonopt=deesc("-freturn"); inc=1; do_output(fullopt); next; }
/^(-fresolution=)(.*)$/ { fullopt=$0; canonopt=deesc("-fresolution"); optarg=gensub(/(-fresolution=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-freschedule-modulo-scheduled-loops$/ { fullopt=$0; canonopt=deesc("-freschedule-modulo-scheduled-loops"); inc=1; do_output(fullopt); next; }
/^-frerun-loop-opt$/ { fullopt=$0; canonopt=deesc("-frerun-loop-opt"); inc=1; do_output(fullopt); next; }
/^-frerun-cse-after-loop$/ { fullopt=$0; canonopt=deesc("-frerun-cse-after-loop"); inc=1; do_output(fullopt); next; }
/^-frequire-return-statement$/ { fullopt=$0; canonopt=deesc("-frequire-return-statement"); inc=1; do_output(fullopt); next; }
/^-freport-bug$/ { fullopt=$0; canonopt=deesc("-freport-bug"); inc=1; do_output(fullopt); next; }
/^-frepo$/ { fullopt=$0; canonopt=deesc("-frepo"); inc=1; do_output(fullopt); next; }
/^-freplace-objc-classes$/ { fullopt=$0; canonopt=deesc("-freplace-objc-classes"); inc=1; do_output(fullopt); next; }
/^-frepack-arrays$/ { fullopt=$0; canonopt=deesc("-frepack-arrays"); inc=1; do_output(fullopt); next; }
/^-freorder-functions$/ { fullopt=$0; canonopt=deesc("-freorder-functions"); inc=1; do_output(fullopt); next; }
/^-freorder-blocks-and-partition$/ { fullopt=$0; canonopt=deesc("-freorder-blocks-and-partition"); inc=1; do_output(fullopt); next; }
/^(-freorder-blocks-algorithm=)(.*)$/ { fullopt=$0; canonopt=deesc("-freorder-blocks-algorithm"); optarg=gensub(/(-freorder-blocks-algorithm=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-freorder-blocks$/ { fullopt=$0; canonopt=deesc("-freorder-blocks"); inc=1; do_output(fullopt); next; }
/^-frename-registers$/ { fullopt=$0; canonopt=deesc("-frename-registers"); inc=1; do_output(fullopt); next; }
/^-frelease$/ { fullopt=$0; canonopt=deesc("-frelease"); inc=1; do_output(fullopt); next; }
/^-fregmove$/ { fullopt=$0; canonopt=deesc("-fregmove"); inc=1; do_output(fullopt); next; }
/^-freg-struct-return$/ { fullopt=$0; canonopt=deesc("-freg-struct-return"); inc=1; do_output(fullopt); next; }
/^-free$/ { fullopt=$0; canonopt=deesc("-free"); inc=1; do_output(fullopt); next; }
/^-frecursive$/ { fullopt=$0; canonopt=deesc("-frecursive"); inc=1; do_output(fullopt); next; }
/^(-frecord-marker=)(.*)$/ { fullopt=$0; canonopt=deesc("-frecord-marker"); optarg=gensub(/(-frecord-marker=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-frecord-gcc-switches$/ { fullopt=$0; canonopt=deesc("-frecord-gcc-switches"); inc=1; do_output(fullopt); next; }
/^-freciprocal-math$/ { fullopt=$0; canonopt=deesc("-freciprocal-math"); inc=1; do_output(fullopt); next; }
/^-frealloc-lhs$/ { fullopt=$0; canonopt=deesc("-frealloc-lhs"); inc=1; do_output(fullopt); next; }
/^-freal-8-real-4$/ { fullopt=$0; canonopt=deesc("-freal-8-real-4"); inc=1; do_output(fullopt); next; }
/^-freal-8-real-16$/ { fullopt=$0; canonopt=deesc("-freal-8-real-16"); inc=1; do_output(fullopt); next; }
/^-freal-8-real-10$/ { fullopt=$0; canonopt=deesc("-freal-8-real-10"); inc=1; do_output(fullopt); next; }
/^-freal-4-real-8$/ { fullopt=$0; canonopt=deesc("-freal-4-real-8"); inc=1; do_output(fullopt); next; }
/^-freal-4-real-16$/ { fullopt=$0; canonopt=deesc("-freal-4-real-16"); inc=1; do_output(fullopt); next; }
/^-freal-4-real-10$/ { fullopt=$0; canonopt=deesc("-freal-4-real-10"); inc=1; do_output(fullopt); next; }
/^-frange-check$/ { fullopt=$0; canonopt=deesc("-frange-check"); inc=1; do_output(fullopt); next; }
/^-frange$/ { fullopt=$0; canonopt=deesc("-frange"); inc=1; do_output(fullopt); next; }
/^(-frandom-seed=)(.*)$/ { fullopt=$0; canonopt=deesc("-frandom-seed"); optarg=gensub(/(-frandom-seed=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-frandom-seed$/ { fullopt=$0; canonopt=deesc("-frandom-seed"); inc=1; do_output(fullopt); next; }
/^-fq$/ { fullopt=$0; canonopt=deesc("-fq"); inc=1; do_output(fullopt); next; }
/^-fprotect-parens$/ { fullopt=$0; canonopt=deesc("-fprotect-parens"); inc=1; do_output(fullopt); next; }
/^-fprofile-values$/ { fullopt=$0; canonopt=deesc("-fprofile-values"); inc=1; do_output(fullopt); next; }
/^(-fprofile-use=)(.*)$/ { fullopt=$0; canonopt=deesc("-fprofile-use"); optarg=gensub(/(-fprofile-use=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fprofile-use$/ { fullopt=$0; canonopt=deesc("-fprofile-use"); inc=1; do_output(fullopt); next; }
/^(-fprofile-update=)(.*)$/ { fullopt=$0; canonopt=deesc("-fprofile-update"); optarg=gensub(/(-fprofile-update=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fprofile-reproducible=)(.*)$/ { fullopt=$0; canonopt=deesc("-fprofile-reproducible"); optarg=gensub(/(-fprofile-reproducible=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fprofile-report$/ { fullopt=$0; canonopt=deesc("-fprofile-report"); inc=1; do_output(fullopt); next; }
/^-fprofile-reorder-functions$/ { fullopt=$0; canonopt=deesc("-fprofile-reorder-functions"); inc=1; do_output(fullopt); next; }
/^(-fprofile-prefix-path=)(.*)$/ { fullopt=$0; canonopt=deesc("-fprofile-prefix-path"); optarg=gensub(/(-fprofile-prefix-path=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fprofile-partial-training$/ { fullopt=$0; canonopt=deesc("-fprofile-partial-training"); inc=1; do_output(fullopt); next; }
/^(-fprofile-note=)(.*)$/ { fullopt=$0; canonopt=deesc("-fprofile-note"); optarg=gensub(/(-fprofile-note=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fprofile-info-section=)(.*)$/ { fullopt=$0; canonopt=deesc("-fprofile-info-section"); optarg=gensub(/(-fprofile-info-section=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fprofile-info-section$/ { fullopt=$0; canonopt=deesc("-fprofile-info-section"); inc=1; do_output(fullopt); next; }
/^(-fprofile-generate=)(.*)$/ { fullopt=$0; canonopt=deesc("-fprofile-generate"); optarg=gensub(/(-fprofile-generate=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fprofile-generate$/ { fullopt=$0; canonopt=deesc("-fprofile-generate"); inc=1; do_output(fullopt); next; }
/^(-fprofile-filter-files=)(.*)$/ { fullopt=$0; canonopt=deesc("-fprofile-filter-files"); optarg=gensub(/(-fprofile-filter-files=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fprofile-exclude-files=)(.*)$/ { fullopt=$0; canonopt=deesc("-fprofile-exclude-files"); optarg=gensub(/(-fprofile-exclude-files=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fprofile-dir=)(.*)$/ { fullopt=$0; canonopt=deesc("-fprofile-dir"); optarg=gensub(/(-fprofile-dir=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fprofile-correction$/ { fullopt=$0; canonopt=deesc("-fprofile-correction"); inc=1; do_output(fullopt); next; }
/^-fprofile-arcs$/ { fullopt=$0; canonopt=deesc("-fprofile-arcs"); inc=1; do_output(fullopt); next; }
/^-fprofile-abs-path$/ { fullopt=$0; canonopt=deesc("-fprofile-abs-path"); inc=1; do_output(fullopt); next; }
/^-fprofile$/ { fullopt=$0; canonopt=deesc("-fprofile"); inc=1; do_output(fullopt); next; }
/^-fprintf-return-value$/ { fullopt=$0; canonopt=deesc("-fprintf-return-value"); inc=1; do_output(fullopt); next; }
/^-fpretty-templates$/ { fullopt=$0; canonopt=deesc("-fpretty-templates"); inc=1; do_output(fullopt); next; }
/^-fpreprocessed$/ { fullopt=$0; canonopt=deesc("-fpreprocessed"); inc=1; do_output(fullopt); next; }
/^-fprefetch-loop-arrays$/ { fullopt=$0; canonopt=deesc("-fprefetch-loop-arrays"); inc=1; do_output(fullopt); next; }
/^-fpredictive-commoning$/ { fullopt=$0; canonopt=deesc("-fpredictive-commoning"); inc=1; do_output(fullopt); next; }
/^-fpreconditions$/ { fullopt=$0; canonopt=deesc("-fpreconditions"); inc=1; do_output(fullopt); next; }
/^-fpre-ipa-mem-report$/ { fullopt=$0; canonopt=deesc("-fpre-ipa-mem-report"); inc=1; do_output(fullopt); next; }
/^(-fpre-include=)(.*)$/ { fullopt=$0; canonopt=deesc("-fpre-include"); optarg=gensub(/(-fpre-include=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fpostconditions$/ { fullopt=$0; canonopt=deesc("-fpostconditions"); inc=1; do_output(fullopt); next; }
/^-fpost-ipa-mem-report$/ { fullopt=$0; canonopt=deesc("-fpost-ipa-mem-report"); inc=1; do_output(fullopt); next; }
/^-fpositive-mod-floor-div$/ { fullopt=$0; canonopt=deesc("-fpositive-mod-floor-div"); inc=1; do_output(fullopt); next; }
/^(-fplugin=)(.*)$/ { fullopt=$0; canonopt=deesc("-fplugin"); optarg=gensub(/(-fplugin=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fplugin-arg-)(.*)$/ { fullopt=$0; canonopt=deesc("-fplugin-arg-"); optarg=gensub(/(-fplugin-arg-)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fplt$/ { fullopt=$0; canonopt=deesc("-fplt"); inc=1; do_output(fullopt); next; }
/^-fplan9-extensions$/ { fullopt=$0; canonopt=deesc("-fplan9-extensions"); inc=1; do_output(fullopt); next; }
/^-fpim4$/ { fullopt=$0; canonopt=deesc("-fpim4"); inc=1; do_output(fullopt); next; }
/^-fpim3$/ { fullopt=$0; canonopt=deesc("-fpim3"); inc=1; do_output(fullopt); next; }
/^-fpim2$/ { fullopt=$0; canonopt=deesc("-fpim2"); inc=1; do_output(fullopt); next; }
/^-fpim$/ { fullopt=$0; canonopt=deesc("-fpim"); inc=1; do_output(fullopt); next; }
/^-fpie$/ { fullopt=$0; canonopt=deesc("-fpie"); inc=1; do_output(fullopt); next; }
/^-fpic$/ { fullopt=$0; canonopt=deesc("-fpic"); inc=1; do_output(fullopt); next; }
/^(-fpermitted-flt-eval-methods=)(.*)$/ { fullopt=$0; canonopt=deesc("-fpermitted-flt-eval-methods"); optarg=gensub(/(-fpermitted-flt-eval-methods=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fpermissive$/ { fullopt=$0; canonopt=deesc("-fpermissive"); inc=1; do_output(fullopt); next; }
/^-fpeephole2$/ { fullopt=$0; canonopt=deesc("-fpeephole2"); inc=1; do_output(fullopt); next; }
/^-fpeephole$/ { fullopt=$0; canonopt=deesc("-fpeephole"); inc=1; do_output(fullopt); next; }
/^-fpeel-loops$/ { fullopt=$0; canonopt=deesc("-fpeel-loops"); inc=1; do_output(fullopt); next; }
/^-fpch-preprocess$/ { fullopt=$0; canonopt=deesc("-fpch-preprocess"); inc=1; do_output(fullopt); next; }
/^-fpch-deps$/ { fullopt=$0; canonopt=deesc("-fpch-deps"); inc=1; do_output(fullopt); next; }
/^-fpcc-struct-return$/ { fullopt=$0; canonopt=deesc("-fpcc-struct-return"); inc=1; do_output(fullopt); next; }
/^(-fpatchable-function-entry=)(.*)$/ { fullopt=$0; canonopt=deesc("-fpatchable-function-entry"); optarg=gensub(/(-fpatchable-function-entry=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fpartial-inlining$/ { fullopt=$0; canonopt=deesc("-fpartial-inlining"); inc=1; do_output(fullopt); next; }
/^-fpad-source$/ { fullopt=$0; canonopt=deesc("-fpad-source"); inc=1; do_output(fullopt); next; }
/^(-fpack-struct=)(.*)$/ { fullopt=$0; canonopt=deesc("-fpack-struct"); optarg=gensub(/(-fpack-struct=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fpack-struct$/ { fullopt=$0; canonopt=deesc("-fpack-struct"); inc=1; do_output(fullopt); next; }
/^-fpack-derived$/ { fullopt=$0; canonopt=deesc("-fpack-derived"); inc=1; do_output(fullopt); next; }
/^-foptional-diags$/ { fullopt=$0; canonopt=deesc("-foptional-diags"); inc=1; do_output(fullopt); next; }
/^-foptimize-strlen$/ { fullopt=$0; canonopt=deesc("-foptimize-strlen"); inc=1; do_output(fullopt); next; }
/^-foptimize-sibling-calls$/ { fullopt=$0; canonopt=deesc("-foptimize-sibling-calls"); inc=1; do_output(fullopt); next; }
/^-foptimize-register-move$/ { fullopt=$0; canonopt=deesc("-foptimize-register-move"); inc=1; do_output(fullopt); next; }
/^(-fopt-info-)(.*)$/ { fullopt=$0; canonopt=deesc("-fopt-info-"); optarg=gensub(/(-fopt-info-)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fopt-info$/ { fullopt=$0; canonopt=deesc("-fopt-info"); inc=1; do_output(fullopt); next; }
/^-foperator-names$/ { fullopt=$0; canonopt=deesc("-foperator-names"); inc=1; do_output(fullopt); next; }
/^-fopenmp-simd$/ { fullopt=$0; canonopt=deesc("-fopenmp-simd"); inc=1; do_output(fullopt); next; }
/^-fopenmp$/ { fullopt=$0; canonopt=deesc("-fopenmp"); inc=1; do_output(fullopt); next; }
/^(-fopenacc-dim=)(.*)$/ { fullopt=$0; canonopt=deesc("-fopenacc-dim"); optarg=gensub(/(-fopenacc-dim=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fopenacc$/ { fullopt=$0; canonopt=deesc("-fopenacc"); inc=1; do_output(fullopt); next; }
/^-fonlylink$/ { fullopt=$0; canonopt=deesc("-fonlylink"); inc=1; do_output(fullopt); next; }
/^(-fonly=)(.*)$/ { fullopt=$0; canonopt=deesc("-fonly"); optarg=gensub(/(-fonly=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fomit-frame-pointer$/ { fullopt=$0; canonopt=deesc("-fomit-frame-pointer"); inc=1; do_output(fullopt); next; }
/^(-foffload=)(.*)$/ { fullopt=$0; canonopt=deesc("-foffload"); optarg=gensub(/(-foffload=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-foffload-abi=)(.*)$/ { fullopt=$0; canonopt=deesc("-foffload-abi"); optarg=gensub(/(-foffload-abi=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fobject-path=)(.*)$/ { fullopt=$0; canonopt=deesc("-fobject-path"); optarg=gensub(/(-fobject-path=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fobjc-std=)(.*)$/ { fullopt=$0; canonopt=deesc("-fobjc-std"); optarg=gensub(/(-fobjc-std=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fobjc-sjlj-exceptions$/ { fullopt=$0; canonopt=deesc("-fobjc-sjlj-exceptions"); inc=1; do_output(fullopt); next; }
/^-fobjc-nilcheck$/ { fullopt=$0; canonopt=deesc("-fobjc-nilcheck"); inc=1; do_output(fullopt); next; }
/^-fobjc-gc$/ { fullopt=$0; canonopt=deesc("-fobjc-gc"); inc=1; do_output(fullopt); next; }
/^-fobjc-exceptions$/ { fullopt=$0; canonopt=deesc("-fobjc-exceptions"); inc=1; do_output(fullopt); next; }
/^-fobjc-direct-dispatch$/ { fullopt=$0; canonopt=deesc("-fobjc-direct-dispatch"); inc=1; do_output(fullopt); next; }
/^-fobjc-call-cxx-cdtors$/ { fullopt=$0; canonopt=deesc("-fobjc-call-cxx-cdtors"); inc=1; do_output(fullopt); next; }
/^(-fobjc-abi-version=)(.*)$/ { fullopt=$0; canonopt=deesc("-fobjc-abi-version"); optarg=gensub(/(-fobjc-abi-version=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fnothrow-opt$/ { fullopt=$0; canonopt=deesc("-fnothrow-opt"); inc=1; do_output(fullopt); next; }
/^-fnonnull-objects$/ { fullopt=$0; canonopt=deesc("-fnonnull-objects"); inc=1; do_output(fullopt); next; }
/^-fnonansi-builtins$/ { fullopt=$0; canonopt=deesc("-fnonansi-builtins"); inc=1; do_output(fullopt); next; }
/^-fnon-call-exceptions$/ { fullopt=$0; canonopt=deesc("-fnon-call-exceptions"); inc=1; do_output(fullopt); next; }
/^-fno-zero-link$/ { fullopt=$0; canonopt=deesc("-fno-zero-link"); inc=1; do_output(fullopt); next; }
/^-fno-zero-initialized-in-bss$/ { fullopt=$0; canonopt=deesc("-fno-zero-initialized-in-bss"); inc=1; do_output(fullopt); next; }
/^-fno-zee$/ { fullopt=$0; canonopt=deesc("-fno-zee"); inc=1; do_output(fullopt); next; }
/^-fno-xref$/ { fullopt=$0; canonopt=deesc("-fno-xref"); inc=1; do_output(fullopt); next; }
/^-fno-xcode$/ { fullopt=$0; canonopt=deesc("-fno-xcode"); inc=1; do_output(fullopt); next; }
/^-fno-wrapv-pointer$/ { fullopt=$0; canonopt=deesc("-fno-wrapv-pointer"); inc=1; do_output(fullopt); next; }
/^-fno-wrapv$/ { fullopt=$0; canonopt=deesc("-fno-wrapv"); inc=1; do_output(fullopt); next; }
/^-fno-wpa$/ { fullopt=$0; canonopt=deesc("-fno-wpa"); inc=1; do_output(fullopt); next; }
/^-fno-working-directory$/ { fullopt=$0; canonopt=deesc("-fno-working-directory"); inc=1; do_output(fullopt); next; }
/^-fno-wholevalue$/ { fullopt=$0; canonopt=deesc("-fno-wholevalue"); inc=1; do_output(fullopt); next; }
/^-fno-wholediv$/ { fullopt=$0; canonopt=deesc("-fno-wholediv"); inc=1; do_output(fullopt); next; }
/^-fno-whole-program$/ { fullopt=$0; canonopt=deesc("-fno-whole-program"); inc=1; do_output(fullopt); next; }
/^-fno-whole-file$/ { fullopt=$0; canonopt=deesc("-fno-whole-file"); inc=1; do_output(fullopt); next; }
/^-fno-web$/ { fullopt=$0; canonopt=deesc("-fno-web"); inc=1; do_output(fullopt); next; }
/^-fno-weak-templates$/ { fullopt=$0; canonopt=deesc("-fno-weak-templates"); inc=1; do_output(fullopt); next; }
/^-fno-weak$/ { fullopt=$0; canonopt=deesc("-fno-weak"); inc=1; do_output(fullopt); next; }
/^-fno-vtv-debug$/ { fullopt=$0; canonopt=deesc("-fno-vtv-debug"); inc=1; do_output(fullopt); next; }
/^-fno-vtv-counts$/ { fullopt=$0; canonopt=deesc("-fno-vtv-counts"); inc=1; do_output(fullopt); next; }
/^-fno-vtable-thunks$/ { fullopt=$0; canonopt=deesc("-fno-vtable-thunks"); inc=1; do_output(fullopt); next; }
/^-fno-vtable-gc$/ { fullopt=$0; canonopt=deesc("-fno-vtable-gc"); inc=1; do_output(fullopt); next; }
/^-fno-vpt$/ { fullopt=$0; canonopt=deesc("-fno-vpt"); inc=1; do_output(fullopt); next; }
/^-fno-visibility-ms-compat$/ { fullopt=$0; canonopt=deesc("-fno-visibility-ms-compat"); inc=1; do_output(fullopt); next; }
/^-fno-visibility-inlines-hidden$/ { fullopt=$0; canonopt=deesc("-fno-visibility-inlines-hidden"); inc=1; do_output(fullopt); next; }
/^-fno-version-loops-for-strides$/ { fullopt=$0; canonopt=deesc("-fno-version-loops-for-strides"); inc=1; do_output(fullopt); next; }
/^-fno-version$/ { fullopt=$0; canonopt=deesc("-fno-version"); inc=1; do_output(fullopt); next; }
/^-fno-verbose-asm$/ { fullopt=$0; canonopt=deesc("-fno-verbose-asm"); inc=1; do_output(fullopt); next; }
/^-fno-vect-cost-model$/ { fullopt=$0; canonopt=deesc("-fno-vect-cost-model"); inc=1; do_output(fullopt); next; }
/^-fno-variable-expansion-in-unroller$/ { fullopt=$0; canonopt=deesc("-fno-variable-expansion-in-unroller"); inc=1; do_output(fullopt); next; }
/^-fno-var-tracking-uninit$/ { fullopt=$0; canonopt=deesc("-fno-var-tracking-uninit"); inc=1; do_output(fullopt); next; }
/^-fno-var-tracking-assignments-toggle$/ { fullopt=$0; canonopt=deesc("-fno-var-tracking-assignments-toggle"); inc=1; do_output(fullopt); next; }
/^-fno-var-tracking-assignments$/ { fullopt=$0; canonopt=deesc("-fno-var-tracking-assignments"); inc=1; do_output(fullopt); next; }
/^-fno-var-tracking$/ { fullopt=$0; canonopt=deesc("-fno-var-tracking"); inc=1; do_output(fullopt); next; }
/^-fno-uselist$/ { fullopt=$0; canonopt=deesc("-fno-uselist"); inc=1; do_output(fullopt); next; }
/^-fno-use-linker-plugin$/ { fullopt=$0; canonopt=deesc("-fno-use-linker-plugin"); inc=1; do_output(fullopt); next; }
/^-fno-use-cxa-get-exception-ptr$/ { fullopt=$0; canonopt=deesc("-fno-use-cxa-get-exception-ptr"); inc=1; do_output(fullopt); next; }
/^-fno-use-cxa-atexit$/ { fullopt=$0; canonopt=deesc("-fno-use-cxa-atexit"); inc=1; do_output(fullopt); next; }
/^-fno-unwind-tables$/ { fullopt=$0; canonopt=deesc("-fno-unwind-tables"); inc=1; do_output(fullopt); next; }
/^-fno-unswitch-loops$/ { fullopt=$0; canonopt=deesc("-fno-unswitch-loops"); inc=1; do_output(fullopt); next; }
/^-fno-unsigned-char$/ { fullopt=$0; canonopt=deesc("-fno-unsigned-char"); inc=1; do_output(fullopt); next; }
/^-fno-unsigned-bitfields$/ { fullopt=$0; canonopt=deesc("-fno-unsigned-bitfields"); inc=1; do_output(fullopt); next; }
/^-fno-unsafe-math-optimizations$/ { fullopt=$0; canonopt=deesc("-fno-unsafe-math-optimizations"); inc=1; do_output(fullopt); next; }
/^-fno-unsafe-loop-optimizations$/ { fullopt=$0; canonopt=deesc("-fno-unsafe-loop-optimizations"); inc=1; do_output(fullopt); next; }
/^-fno-unroll-loops$/ { fullopt=$0; canonopt=deesc("-fno-unroll-loops"); inc=1; do_output(fullopt); next; }
/^-fno-unroll-completely-grow-size$/ { fullopt=$0; canonopt=deesc("-fno-unroll-completely-grow-size"); inc=1; do_output(fullopt); next; }
/^-fno-unroll-all-loops$/ { fullopt=$0; canonopt=deesc("-fno-unroll-all-loops"); inc=1; do_output(fullopt); next; }
/^-fno-unittest$/ { fullopt=$0; canonopt=deesc("-fno-unittest"); inc=1; do_output(fullopt); next; }
/^-fno-unit-at-a-time$/ { fullopt=$0; canonopt=deesc("-fno-unit-at-a-time"); inc=1; do_output(fullopt); next; }
/^-fno-underscoring$/ { fullopt=$0; canonopt=deesc("-fno-underscoring"); inc=1; do_output(fullopt); next; }
/^-fno-unconstrained-commons$/ { fullopt=$0; canonopt=deesc("-fno-unconstrained-commons"); inc=1; do_output(fullopt); next; }
/^-fno-unbounded-by-reference$/ { fullopt=$0; canonopt=deesc("-fno-unbounded-by-reference"); inc=1; do_output(fullopt); next; }
/^-fno-tree-vrp$/ { fullopt=$0; canonopt=deesc("-fno-tree-vrp"); inc=1; do_output(fullopt); next; }
/^-fno-tree-vectorize$/ { fullopt=$0; canonopt=deesc("-fno-tree-vectorize"); inc=1; do_output(fullopt); next; }
/^-fno-tree-vect-loop-version$/ { fullopt=$0; canonopt=deesc("-fno-tree-vect-loop-version"); inc=1; do_output(fullopt); next; }
/^-fno-tree-ter$/ { fullopt=$0; canonopt=deesc("-fno-tree-ter"); inc=1; do_output(fullopt); next; }
/^-fno-tree-tail-merge$/ { fullopt=$0; canonopt=deesc("-fno-tree-tail-merge"); inc=1; do_output(fullopt); next; }
/^-fno-tree-switch-conversion$/ { fullopt=$0; canonopt=deesc("-fno-tree-switch-conversion"); inc=1; do_output(fullopt); next; }
/^-fno-tree-store-copy-prop$/ { fullopt=$0; canonopt=deesc("-fno-tree-store-copy-prop"); inc=1; do_output(fullopt); next; }
/^-fno-tree-store-ccp$/ { fullopt=$0; canonopt=deesc("-fno-tree-store-ccp"); inc=1; do_output(fullopt); next; }
/^-fno-tree-sra$/ { fullopt=$0; canonopt=deesc("-fno-tree-sra"); inc=1; do_output(fullopt); next; }
/^-fno-tree-slsr$/ { fullopt=$0; canonopt=deesc("-fno-tree-slsr"); inc=1; do_output(fullopt); next; }
/^-fno-tree-slp-vectorize$/ { fullopt=$0; canonopt=deesc("-fno-tree-slp-vectorize"); inc=1; do_output(fullopt); next; }
/^-fno-tree-sink$/ { fullopt=$0; canonopt=deesc("-fno-tree-sink"); inc=1; do_output(fullopt); next; }
/^-fno-tree-scev-cprop$/ { fullopt=$0; canonopt=deesc("-fno-tree-scev-cprop"); inc=1; do_output(fullopt); next; }
/^-fno-tree-salias$/ { fullopt=$0; canonopt=deesc("-fno-tree-salias"); inc=1; do_output(fullopt); next; }
/^-fno-tree-reassoc$/ { fullopt=$0; canonopt=deesc("-fno-tree-reassoc"); inc=1; do_output(fullopt); next; }
/^-fno-tree-pta$/ { fullopt=$0; canonopt=deesc("-fno-tree-pta"); inc=1; do_output(fullopt); next; }
/^-fno-tree-pre$/ { fullopt=$0; canonopt=deesc("-fno-tree-pre"); inc=1; do_output(fullopt); next; }
/^-fno-tree-phiprop$/ { fullopt=$0; canonopt=deesc("-fno-tree-phiprop"); inc=1; do_output(fullopt); next; }
/^-fno-tree-partial-pre$/ { fullopt=$0; canonopt=deesc("-fno-tree-partial-pre"); inc=1; do_output(fullopt); next; }
/^-fno-tree-lrs$/ { fullopt=$0; canonopt=deesc("-fno-tree-lrs"); inc=1; do_output(fullopt); next; }
/^-fno-tree-loop-vectorize$/ { fullopt=$0; canonopt=deesc("-fno-tree-loop-vectorize"); inc=1; do_output(fullopt); next; }
/^-fno-tree-loop-optimize$/ { fullopt=$0; canonopt=deesc("-fno-tree-loop-optimize"); inc=1; do_output(fullopt); next; }
/^-fno-tree-loop-linear$/ { fullopt=$0; canonopt=deesc("-fno-tree-loop-linear"); inc=1; do_output(fullopt); next; }
/^-fno-tree-loop-ivcanon$/ { fullopt=$0; canonopt=deesc("-fno-tree-loop-ivcanon"); inc=1; do_output(fullopt); next; }
/^-fno-tree-loop-im$/ { fullopt=$0; canonopt=deesc("-fno-tree-loop-im"); inc=1; do_output(fullopt); next; }
/^-fno-tree-loop-if-convert-stores$/ { fullopt=$0; canonopt=deesc("-fno-tree-loop-if-convert-stores"); inc=1; do_output(fullopt); next; }
/^-fno-tree-loop-if-convert$/ { fullopt=$0; canonopt=deesc("-fno-tree-loop-if-convert"); inc=1; do_output(fullopt); next; }
/^-fno-tree-loop-distribution$/ { fullopt=$0; canonopt=deesc("-fno-tree-loop-distribution"); inc=1; do_output(fullopt); next; }
/^-fno-tree-loop-distribute-patterns$/ { fullopt=$0; canonopt=deesc("-fno-tree-loop-distribute-patterns"); inc=1; do_output(fullopt); next; }
/^-fno-tree-fre$/ { fullopt=$0; canonopt=deesc("-fno-tree-fre"); inc=1; do_output(fullopt); next; }
/^-fno-tree-forwprop$/ { fullopt=$0; canonopt=deesc("-fno-tree-forwprop"); inc=1; do_output(fullopt); next; }
/^-fno-tree-dse$/ { fullopt=$0; canonopt=deesc("-fno-tree-dse"); inc=1; do_output(fullopt); next; }
/^-fno-tree-dominator-opts$/ { fullopt=$0; canonopt=deesc("-fno-tree-dominator-opts"); inc=1; do_output(fullopt); next; }
/^-fno-tree-dce$/ { fullopt=$0; canonopt=deesc("-fno-tree-dce"); inc=1; do_output(fullopt); next; }
/^-fno-tree-cselim$/ { fullopt=$0; canonopt=deesc("-fno-tree-cselim"); inc=1; do_output(fullopt); next; }
/^-fno-tree-copyrename$/ { fullopt=$0; canonopt=deesc("-fno-tree-copyrename"); inc=1; do_output(fullopt); next; }
/^-fno-tree-copy-prop$/ { fullopt=$0; canonopt=deesc("-fno-tree-copy-prop"); inc=1; do_output(fullopt); next; }
/^-fno-tree-coalesce-vars$/ { fullopt=$0; canonopt=deesc("-fno-tree-coalesce-vars"); inc=1; do_output(fullopt); next; }
/^-fno-tree-coalesce-inlined-vars$/ { fullopt=$0; canonopt=deesc("-fno-tree-coalesce-inlined-vars"); inc=1; do_output(fullopt); next; }
/^-fno-tree-ch$/ { fullopt=$0; canonopt=deesc("-fno-tree-ch"); inc=1; do_output(fullopt); next; }
/^-fno-tree-ccp$/ { fullopt=$0; canonopt=deesc("-fno-tree-ccp"); inc=1; do_output(fullopt); next; }
/^-fno-tree-builtin-call-dce$/ { fullopt=$0; canonopt=deesc("-fno-tree-builtin-call-dce"); inc=1; do_output(fullopt); next; }
/^-fno-tree-bit-ccp$/ { fullopt=$0; canonopt=deesc("-fno-tree-bit-ccp"); inc=1; do_output(fullopt); next; }
/^-fno-trapv$/ { fullopt=$0; canonopt=deesc("-fno-trapv"); inc=1; do_output(fullopt); next; }
/^-fno-trapping-math$/ { fullopt=$0; canonopt=deesc("-fno-trapping-math"); inc=1; do_output(fullopt); next; }
/^-fno-trampolines$/ { fullopt=$0; canonopt=deesc("-fno-trampolines"); inc=1; do_output(fullopt); next; }
/^-fno-track-macro-expansion$/ { fullopt=$0; canonopt=deesc("-fno-track-macro-expansion"); inc=1; do_output(fullopt); next; }
/^-fno-tracer$/ { fullopt=$0; canonopt=deesc("-fno-tracer"); inc=1; do_output(fullopt); next; }
/^-fno-toplevel-reorder$/ { fullopt=$0; canonopt=deesc("-fno-toplevel-reorder"); inc=1; do_output(fullopt); next; }
/^-fno-time-report-details$/ { fullopt=$0; canonopt=deesc("-fno-time-report-details"); inc=1; do_output(fullopt); next; }
/^-fno-time-report$/ { fullopt=$0; canonopt=deesc("-fno-time-report"); inc=1; do_output(fullopt); next; }
/^-fno-threadsafe-statics$/ { fullopt=$0; canonopt=deesc("-fno-threadsafe-statics"); inc=1; do_output(fullopt); next; }
/^-fno-thread-jumps$/ { fullopt=$0; canonopt=deesc("-fno-thread-jumps"); inc=1; do_output(fullopt); next; }
/^-fno-this-is-variable$/ { fullopt=$0; canonopt=deesc("-fno-this-is-variable"); inc=1; do_output(fullopt); next; }
/^-fno-test-forall-temp$/ { fullopt=$0; canonopt=deesc("-fno-test-forall-temp"); inc=1; do_output(fullopt); next; }
/^-fno-test-coverage$/ { fullopt=$0; canonopt=deesc("-fno-test-coverage"); inc=1; do_output(fullopt); next; }
/^-fno-template-depth-$/ { fullopt=$0; canonopt=deesc("-fno-template-depth-"); inc=1; do_output(fullopt); next; }
/^-fno-target-help$/ { fullopt=$0; canonopt=deesc("-fno-target-help"); inc=1; do_output(fullopt); next; }
/^-fno-tail-call-workaround$/ { fullopt=$0; canonopt=deesc("-fno-tail-call-workaround"); inc=1; do_output(fullopt); next; }
/^-fno-syntax-only$/ { fullopt=$0; canonopt=deesc("-fno-syntax-only"); inc=1; do_output(fullopt); next; }
/^-fno-sync-libcalls$/ { fullopt=$0; canonopt=deesc("-fno-sync-libcalls"); inc=1; do_output(fullopt); next; }
/^-fno-switch-errors$/ { fullopt=$0; canonopt=deesc("-fno-switch-errors"); inc=1; do_output(fullopt); next; }
/^-fno-swig$/ { fullopt=$0; canonopt=deesc("-fno-swig"); inc=1; do_output(fullopt); next; }
/^-fno-strong-eval-order$/ { fullopt=$0; canonopt=deesc("-fno-strong-eval-order"); inc=1; do_output(fullopt); next; }
/^-fno-strict-volatile-bitfields$/ { fullopt=$0; canonopt=deesc("-fno-strict-volatile-bitfields"); inc=1; do_output(fullopt); next; }
/^-fno-strict-prototype$/ { fullopt=$0; canonopt=deesc("-fno-strict-prototype"); inc=1; do_output(fullopt); next; }
/^-fno-strict-overflow$/ { fullopt=$0; canonopt=deesc("-fno-strict-overflow"); inc=1; do_output(fullopt); next; }
/^-fno-strict-enums$/ { fullopt=$0; canonopt=deesc("-fno-strict-enums"); inc=1; do_output(fullopt); next; }
/^-fno-strict-aliasing$/ { fullopt=$0; canonopt=deesc("-fno-strict-aliasing"); inc=1; do_output(fullopt); next; }
/^-fno-strength-reduce$/ { fullopt=$0; canonopt=deesc("-fno-strength-reduce"); inc=1; do_output(fullopt); next; }
/^-fno-store-merging$/ { fullopt=$0; canonopt=deesc("-fno-store-merging"); inc=1; do_output(fullopt); next; }
/^-fno-stdarg-opt$/ { fullopt=$0; canonopt=deesc("-fno-stdarg-opt"); inc=1; do_output(fullopt); next; }
/^-fno-stats$/ { fullopt=$0; canonopt=deesc("-fno-stats"); inc=1; do_output(fullopt); next; }
/^-fno-stack-usage$/ { fullopt=$0; canonopt=deesc("-fno-stack-usage"); inc=1; do_output(fullopt); next; }
/^-fno-stack-protector-strong$/ { fullopt=$0; canonopt=deesc("-fno-stack-protector-strong"); inc=1; do_output(fullopt); next; }
/^-fno-stack-protector-explicit$/ { fullopt=$0; canonopt=deesc("-fno-stack-protector-explicit"); inc=1; do_output(fullopt); next; }
/^-fno-stack-protector-all$/ { fullopt=$0; canonopt=deesc("-fno-stack-protector-all"); inc=1; do_output(fullopt); next; }
/^-fno-stack-protector$/ { fullopt=$0; canonopt=deesc("-fno-stack-protector"); inc=1; do_output(fullopt); next; }
/^-fno-stack-limit$/ { fullopt=$0; canonopt=deesc("-fno-stack-limit"); inc=1; do_output(fullopt); next; }
/^-fno-stack-clash-protection$/ { fullopt=$0; canonopt=deesc("-fno-stack-clash-protection"); inc=1; do_output(fullopt); next; }
/^-fno-stack-check$/ { fullopt=$0; canonopt=deesc("-fno-stack-check"); inc=1; do_output(fullopt); next; }
/^-fno-stack-arrays$/ { fullopt=$0; canonopt=deesc("-fno-stack-arrays"); inc=1; do_output(fullopt); next; }
/^-fno-ssa-phiopt$/ { fullopt=$0; canonopt=deesc("-fno-ssa-phiopt"); inc=1; do_output(fullopt); next; }
/^-fno-ssa-backprop$/ { fullopt=$0; canonopt=deesc("-fno-ssa-backprop"); inc=1; do_output(fullopt); next; }
/^-fno-squangle$/ { fullopt=$0; canonopt=deesc("-fno-squangle"); inc=1; do_output(fullopt); next; }
/^-fno-split-wide-types-early$/ { fullopt=$0; canonopt=deesc("-fno-split-wide-types-early"); inc=1; do_output(fullopt); next; }
/^-fno-split-wide-types$/ { fullopt=$0; canonopt=deesc("-fno-split-wide-types"); inc=1; do_output(fullopt); next; }
/^-fno-split-stack$/ { fullopt=$0; canonopt=deesc("-fno-split-stack"); inc=1; do_output(fullopt); next; }
/^-fno-split-paths$/ { fullopt=$0; canonopt=deesc("-fno-split-paths"); inc=1; do_output(fullopt); next; }
/^-fno-split-loops$/ { fullopt=$0; canonopt=deesc("-fno-split-loops"); inc=1; do_output(fullopt); next; }
/^-fno-split-ivs-in-unroller$/ { fullopt=$0; canonopt=deesc("-fno-split-ivs-in-unroller"); inc=1; do_output(fullopt); next; }
/^-fno-sources$/ { fullopt=$0; canonopt=deesc("-fno-sources"); inc=1; do_output(fullopt); next; }
/^-fno-soft-check-all$/ { fullopt=$0; canonopt=deesc("-fno-soft-check-all"); inc=1; do_output(fullopt); next; }
/^-fno-sized-deallocation$/ { fullopt=$0; canonopt=deesc("-fno-sized-deallocation"); inc=1; do_output(fullopt); next; }
/^-fno-single-precision-constant$/ { fullopt=$0; canonopt=deesc("-fno-single-precision-constant"); inc=1; do_output(fullopt); next; }
/^-fno-signed-zeros$/ { fullopt=$0; canonopt=deesc("-fno-signed-zeros"); inc=1; do_output(fullopt); next; }
/^-fno-signed-char$/ { fullopt=$0; canonopt=deesc("-fno-signed-char"); inc=1; do_output(fullopt); next; }
/^-fno-signed-bitfields$/ { fullopt=$0; canonopt=deesc("-fno-signed-bitfields"); inc=1; do_output(fullopt); next; }
/^-fno-signaling-nans$/ { fullopt=$0; canonopt=deesc("-fno-signaling-nans"); inc=1; do_output(fullopt); next; }
/^-fno-sign-zero$/ { fullopt=$0; canonopt=deesc("-fno-sign-zero"); inc=1; do_output(fullopt); next; }
/^-fno-shrink-wrap-separate$/ { fullopt=$0; canonopt=deesc("-fno-shrink-wrap-separate"); inc=1; do_output(fullopt); next; }
/^-fno-shrink-wrap$/ { fullopt=$0; canonopt=deesc("-fno-shrink-wrap"); inc=1; do_output(fullopt); next; }
/^-fno-show-column$/ { fullopt=$0; canonopt=deesc("-fno-show-column"); inc=1; do_output(fullopt); next; }
/^-fno-short-wchar$/ { fullopt=$0; canonopt=deesc("-fno-short-wchar"); inc=1; do_output(fullopt); next; }
/^-fno-short-enums$/ { fullopt=$0; canonopt=deesc("-fno-short-enums"); inc=1; do_output(fullopt); next; }
/^-fno-shared$/ { fullopt=$0; canonopt=deesc("-fno-shared"); inc=1; do_output(fullopt); next; }
/^-fno-semantic-interposition$/ { fullopt=$0; canonopt=deesc("-fno-semantic-interposition"); inc=1; do_output(fullopt); next; }
/^-fno-selective-scheduling2$/ { fullopt=$0; canonopt=deesc("-fno-selective-scheduling2"); inc=1; do_output(fullopt); next; }
/^-fno-selective-scheduling$/ { fullopt=$0; canonopt=deesc("-fno-selective-scheduling"); inc=1; do_output(fullopt); next; }
/^-fno-sel-sched-reschedule-pipelined$/ { fullopt=$0; canonopt=deesc("-fno-sel-sched-reschedule-pipelined"); inc=1; do_output(fullopt); next; }
/^-fno-sel-sched-pipelining-outer-loops$/ { fullopt=$0; canonopt=deesc("-fno-sel-sched-pipelining-outer-loops"); inc=1; do_output(fullopt); next; }
/^-fno-sel-sched-pipelining$/ { fullopt=$0; canonopt=deesc("-fno-sel-sched-pipelining"); inc=1; do_output(fullopt); next; }
/^-fno-see$/ { fullopt=$0; canonopt=deesc("-fno-see"); inc=1; do_output(fullopt); next; }
/^-fno-section-anchors$/ { fullopt=$0; canonopt=deesc("-fno-section-anchors"); inc=1; do_output(fullopt); next; }
/^-fno-second-underscore$/ { fullopt=$0; canonopt=deesc("-fno-second-underscore"); inc=1; do_output(fullopt); next; }
/^-fno-schedule-insns2$/ { fullopt=$0; canonopt=deesc("-fno-schedule-insns2"); inc=1; do_output(fullopt); next; }
/^-fno-schedule-insns$/ { fullopt=$0; canonopt=deesc("-fno-schedule-insns"); inc=1; do_output(fullopt); next; }
/^-fno-schedule-fusion$/ { fullopt=$0; canonopt=deesc("-fno-schedule-fusion"); inc=1; do_output(fullopt); next; }
/^-fno-sched2-use-traces$/ { fullopt=$0; canonopt=deesc("-fno-sched2-use-traces"); inc=1; do_output(fullopt); next; }
/^-fno-sched2-use-superblocks$/ { fullopt=$0; canonopt=deesc("-fno-sched2-use-superblocks"); inc=1; do_output(fullopt); next; }
/^-fno-sched-stalled-insns-dep$/ { fullopt=$0; canonopt=deesc("-fno-sched-stalled-insns-dep"); inc=1; do_output(fullopt); next; }
/^-fno-sched-stalled-insns$/ { fullopt=$0; canonopt=deesc("-fno-sched-stalled-insns"); inc=1; do_output(fullopt); next; }
/^-fno-sched-spec-load-dangerous$/ { fullopt=$0; canonopt=deesc("-fno-sched-spec-load-dangerous"); inc=1; do_output(fullopt); next; }
/^-fno-sched-spec-load$/ { fullopt=$0; canonopt=deesc("-fno-sched-spec-load"); inc=1; do_output(fullopt); next; }
/^-fno-sched-spec-insn-heuristic$/ { fullopt=$0; canonopt=deesc("-fno-sched-spec-insn-heuristic"); inc=1; do_output(fullopt); next; }
/^-fno-sched-spec$/ { fullopt=$0; canonopt=deesc("-fno-sched-spec"); inc=1; do_output(fullopt); next; }
/^-fno-sched-rank-heuristic$/ { fullopt=$0; canonopt=deesc("-fno-sched-rank-heuristic"); inc=1; do_output(fullopt); next; }
/^-fno-sched-pressure$/ { fullopt=$0; canonopt=deesc("-fno-sched-pressure"); inc=1; do_output(fullopt); next; }
/^-fno-sched-last-insn-heuristic$/ { fullopt=$0; canonopt=deesc("-fno-sched-last-insn-heuristic"); inc=1; do_output(fullopt); next; }
/^-fno-sched-interblock$/ { fullopt=$0; canonopt=deesc("-fno-sched-interblock"); inc=1; do_output(fullopt); next; }
/^-fno-sched-group-heuristic$/ { fullopt=$0; canonopt=deesc("-fno-sched-group-heuristic"); inc=1; do_output(fullopt); next; }
/^-fno-sched-dep-count-heuristic$/ { fullopt=$0; canonopt=deesc("-fno-sched-dep-count-heuristic"); inc=1; do_output(fullopt); next; }
/^-fno-sched-critical-path-heuristic$/ { fullopt=$0; canonopt=deesc("-fno-sched-critical-path-heuristic"); inc=1; do_output(fullopt); next; }
/^-fno-save-optimization-record$/ { fullopt=$0; canonopt=deesc("-fno-save-optimization-record"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-undefined-trap-on-error$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-undefined-trap-on-error"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-recover$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-recover"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-address-use-after-scope$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-address-use-after-scope"); inc=1; do_output(fullopt); next; }
/^-fno-rtti$/ { fullopt=$0; canonopt=deesc("-fno-rtti"); inc=1; do_output(fullopt); next; }
/^-fno-rounding-math$/ { fullopt=$0; canonopt=deesc("-fno-rounding-math"); inc=1; do_output(fullopt); next; }
/^-fno-return$/ { fullopt=$0; canonopt=deesc("-fno-return"); inc=1; do_output(fullopt); next; }
/^-fno-reschedule-modulo-scheduled-loops$/ { fullopt=$0; canonopt=deesc("-fno-reschedule-modulo-scheduled-loops"); inc=1; do_output(fullopt); next; }
/^-fno-rerun-loop-opt$/ { fullopt=$0; canonopt=deesc("-fno-rerun-loop-opt"); inc=1; do_output(fullopt); next; }
/^-fno-rerun-cse-after-loop$/ { fullopt=$0; canonopt=deesc("-fno-rerun-cse-after-loop"); inc=1; do_output(fullopt); next; }
/^-fno-require-return-statement$/ { fullopt=$0; canonopt=deesc("-fno-require-return-statement"); inc=1; do_output(fullopt); next; }
/^-fno-report-bug$/ { fullopt=$0; canonopt=deesc("-fno-report-bug"); inc=1; do_output(fullopt); next; }
/^-fno-repo$/ { fullopt=$0; canonopt=deesc("-fno-repo"); inc=1; do_output(fullopt); next; }
/^-fno-replace-objc-classes$/ { fullopt=$0; canonopt=deesc("-fno-replace-objc-classes"); inc=1; do_output(fullopt); next; }
/^-fno-repack-arrays$/ { fullopt=$0; canonopt=deesc("-fno-repack-arrays"); inc=1; do_output(fullopt); next; }
/^-fno-reorder-functions$/ { fullopt=$0; canonopt=deesc("-fno-reorder-functions"); inc=1; do_output(fullopt); next; }
/^-fno-reorder-blocks-and-partition$/ { fullopt=$0; canonopt=deesc("-fno-reorder-blocks-and-partition"); inc=1; do_output(fullopt); next; }
/^-fno-reorder-blocks$/ { fullopt=$0; canonopt=deesc("-fno-reorder-blocks"); inc=1; do_output(fullopt); next; }
/^-fno-rename-registers$/ { fullopt=$0; canonopt=deesc("-fno-rename-registers"); inc=1; do_output(fullopt); next; }
/^-fno-release$/ { fullopt=$0; canonopt=deesc("-fno-release"); inc=1; do_output(fullopt); next; }
/^-fno-regmove$/ { fullopt=$0; canonopt=deesc("-fno-regmove"); inc=1; do_output(fullopt); next; }
/^-fno-reg-struct-return$/ { fullopt=$0; canonopt=deesc("-fno-reg-struct-return"); inc=1; do_output(fullopt); next; }
/^-fno-ree$/ { fullopt=$0; canonopt=deesc("-fno-ree"); inc=1; do_output(fullopt); next; }
/^-fno-recursive$/ { fullopt=$0; canonopt=deesc("-fno-recursive"); inc=1; do_output(fullopt); next; }
/^-fno-record-gcc-switches$/ { fullopt=$0; canonopt=deesc("-fno-record-gcc-switches"); inc=1; do_output(fullopt); next; }
/^-fno-reciprocal-math$/ { fullopt=$0; canonopt=deesc("-fno-reciprocal-math"); inc=1; do_output(fullopt); next; }
/^-fno-realloc-lhs$/ { fullopt=$0; canonopt=deesc("-fno-realloc-lhs"); inc=1; do_output(fullopt); next; }
/^-fno-real-8-real-4$/ { fullopt=$0; canonopt=deesc("-fno-real-8-real-4"); inc=1; do_output(fullopt); next; }
/^-fno-real-8-real-16$/ { fullopt=$0; canonopt=deesc("-fno-real-8-real-16"); inc=1; do_output(fullopt); next; }
/^-fno-real-8-real-10$/ { fullopt=$0; canonopt=deesc("-fno-real-8-real-10"); inc=1; do_output(fullopt); next; }
/^-fno-real-4-real-8$/ { fullopt=$0; canonopt=deesc("-fno-real-4-real-8"); inc=1; do_output(fullopt); next; }
/^-fno-real-4-real-16$/ { fullopt=$0; canonopt=deesc("-fno-real-4-real-16"); inc=1; do_output(fullopt); next; }
/^-fno-real-4-real-10$/ { fullopt=$0; canonopt=deesc("-fno-real-4-real-10"); inc=1; do_output(fullopt); next; }
/^-fno-range-check$/ { fullopt=$0; canonopt=deesc("-fno-range-check"); inc=1; do_output(fullopt); next; }
/^-fno-range$/ { fullopt=$0; canonopt=deesc("-fno-range"); inc=1; do_output(fullopt); next; }
/^-fno-random-seed$/ { fullopt=$0; canonopt=deesc("-fno-random-seed"); inc=1; do_output(fullopt); next; }
/^-fno-q$/ { fullopt=$0; canonopt=deesc("-fno-q"); inc=1; do_output(fullopt); next; }
/^-fno-pthread$/ { fullopt=$0; canonopt=deesc("-fno-pthread"); inc=1; do_output(fullopt); next; }
/^-fno-protect-parens$/ { fullopt=$0; canonopt=deesc("-fno-protect-parens"); inc=1; do_output(fullopt); next; }
/^-fno-profile-values$/ { fullopt=$0; canonopt=deesc("-fno-profile-values"); inc=1; do_output(fullopt); next; }
/^-fno-profile-use$/ { fullopt=$0; canonopt=deesc("-fno-profile-use"); inc=1; do_output(fullopt); next; }
/^-fno-profile-report$/ { fullopt=$0; canonopt=deesc("-fno-profile-report"); inc=1; do_output(fullopt); next; }
/^-fno-profile-reorder-functions$/ { fullopt=$0; canonopt=deesc("-fno-profile-reorder-functions"); inc=1; do_output(fullopt); next; }
/^-fno-profile-partial-training$/ { fullopt=$0; canonopt=deesc("-fno-profile-partial-training"); inc=1; do_output(fullopt); next; }
/^-fno-profile-info-section$/ { fullopt=$0; canonopt=deesc("-fno-profile-info-section"); inc=1; do_output(fullopt); next; }
/^-fno-profile-generate$/ { fullopt=$0; canonopt=deesc("-fno-profile-generate"); inc=1; do_output(fullopt); next; }
/^-fno-profile-correction$/ { fullopt=$0; canonopt=deesc("-fno-profile-correction"); inc=1; do_output(fullopt); next; }
/^-fno-profile-arcs$/ { fullopt=$0; canonopt=deesc("-fno-profile-arcs"); inc=1; do_output(fullopt); next; }
/^-fno-profile-abs-path$/ { fullopt=$0; canonopt=deesc("-fno-profile-abs-path"); inc=1; do_output(fullopt); next; }
/^-fno-profile$/ { fullopt=$0; canonopt=deesc("-fno-profile"); inc=1; do_output(fullopt); next; }
/^-fno-printf-return-value$/ { fullopt=$0; canonopt=deesc("-fno-printf-return-value"); inc=1; do_output(fullopt); next; }
/^-fno-pretty-templates$/ { fullopt=$0; canonopt=deesc("-fno-pretty-templates"); inc=1; do_output(fullopt); next; }
/^-fno-preprocessed$/ { fullopt=$0; canonopt=deesc("-fno-preprocessed"); inc=1; do_output(fullopt); next; }
/^-fno-prefetch-loop-arrays$/ { fullopt=$0; canonopt=deesc("-fno-prefetch-loop-arrays"); inc=1; do_output(fullopt); next; }
/^-fno-predictive-commoning$/ { fullopt=$0; canonopt=deesc("-fno-predictive-commoning"); inc=1; do_output(fullopt); next; }
/^-fno-preconditions$/ { fullopt=$0; canonopt=deesc("-fno-preconditions"); inc=1; do_output(fullopt); next; }
/^-fno-pre-ipa-mem-report$/ { fullopt=$0; canonopt=deesc("-fno-pre-ipa-mem-report"); inc=1; do_output(fullopt); next; }
/^-fno-postconditions$/ { fullopt=$0; canonopt=deesc("-fno-postconditions"); inc=1; do_output(fullopt); next; }
/^-fno-post-ipa-mem-report$/ { fullopt=$0; canonopt=deesc("-fno-post-ipa-mem-report"); inc=1; do_output(fullopt); next; }
/^-fno-positive-mod-floor-div$/ { fullopt=$0; canonopt=deesc("-fno-positive-mod-floor-div"); inc=1; do_output(fullopt); next; }
/^-fno-plt$/ { fullopt=$0; canonopt=deesc("-fno-plt"); inc=1; do_output(fullopt); next; }
/^-fno-plan9-extensions$/ { fullopt=$0; canonopt=deesc("-fno-plan9-extensions"); inc=1; do_output(fullopt); next; }
/^-fno-pim4$/ { fullopt=$0; canonopt=deesc("-fno-pim4"); inc=1; do_output(fullopt); next; }
/^-fno-pim3$/ { fullopt=$0; canonopt=deesc("-fno-pim3"); inc=1; do_output(fullopt); next; }
/^-fno-pim2$/ { fullopt=$0; canonopt=deesc("-fno-pim2"); inc=1; do_output(fullopt); next; }
/^-fno-pim$/ { fullopt=$0; canonopt=deesc("-fno-pim"); inc=1; do_output(fullopt); next; }
/^-fno-pie$/ { fullopt=$0; canonopt=deesc("-fno-pie"); inc=1; do_output(fullopt); next; }
/^-fno-pic$/ { fullopt=$0; canonopt=deesc("-fno-pic"); inc=1; do_output(fullopt); next; }
/^-fno-permissive$/ { fullopt=$0; canonopt=deesc("-fno-permissive"); inc=1; do_output(fullopt); next; }
/^-fno-peephole2$/ { fullopt=$0; canonopt=deesc("-fno-peephole2"); inc=1; do_output(fullopt); next; }
/^-fno-peephole$/ { fullopt=$0; canonopt=deesc("-fno-peephole"); inc=1; do_output(fullopt); next; }
/^-fno-peel-loops$/ { fullopt=$0; canonopt=deesc("-fno-peel-loops"); inc=1; do_output(fullopt); next; }
/^-fno-pch-preprocess$/ { fullopt=$0; canonopt=deesc("-fno-pch-preprocess"); inc=1; do_output(fullopt); next; }
/^-fno-pch-deps$/ { fullopt=$0; canonopt=deesc("-fno-pch-deps"); inc=1; do_output(fullopt); next; }
/^-fno-pcc-struct-return$/ { fullopt=$0; canonopt=deesc("-fno-pcc-struct-return"); inc=1; do_output(fullopt); next; }
/^-fno-partial-inlining$/ { fullopt=$0; canonopt=deesc("-fno-partial-inlining"); inc=1; do_output(fullopt); next; }
/^-fno-pad-source$/ { fullopt=$0; canonopt=deesc("-fno-pad-source"); inc=1; do_output(fullopt); next; }
/^-fno-pack-struct$/ { fullopt=$0; canonopt=deesc("-fno-pack-struct"); inc=1; do_output(fullopt); next; }
/^-fno-pack-derived$/ { fullopt=$0; canonopt=deesc("-fno-pack-derived"); inc=1; do_output(fullopt); next; }
/^-fno-optional-diags$/ { fullopt=$0; canonopt=deesc("-fno-optional-diags"); inc=1; do_output(fullopt); next; }
/^-fno-optimize-strlen$/ { fullopt=$0; canonopt=deesc("-fno-optimize-strlen"); inc=1; do_output(fullopt); next; }
/^-fno-optimize-sibling-calls$/ { fullopt=$0; canonopt=deesc("-fno-optimize-sibling-calls"); inc=1; do_output(fullopt); next; }
/^-fno-optimize-register-move$/ { fullopt=$0; canonopt=deesc("-fno-optimize-register-move"); inc=1; do_output(fullopt); next; }
/^-fno-opt-info$/ { fullopt=$0; canonopt=deesc("-fno-opt-info"); inc=1; do_output(fullopt); next; }
/^-fno-operator-names$/ { fullopt=$0; canonopt=deesc("-fno-operator-names"); inc=1; do_output(fullopt); next; }
/^-fno-openmp-simd$/ { fullopt=$0; canonopt=deesc("-fno-openmp-simd"); inc=1; do_output(fullopt); next; }
/^-fno-openmp$/ { fullopt=$0; canonopt=deesc("-fno-openmp"); inc=1; do_output(fullopt); next; }
/^-fno-openacc$/ { fullopt=$0; canonopt=deesc("-fno-openacc"); inc=1; do_output(fullopt); next; }
/^-fno-onlylink$/ { fullopt=$0; canonopt=deesc("-fno-onlylink"); inc=1; do_output(fullopt); next; }
/^-fno-omit-frame-pointer$/ { fullopt=$0; canonopt=deesc("-fno-omit-frame-pointer"); inc=1; do_output(fullopt); next; }
/^-fno-objc-sjlj-exceptions$/ { fullopt=$0; canonopt=deesc("-fno-objc-sjlj-exceptions"); inc=1; do_output(fullopt); next; }
/^-fno-objc-nilcheck$/ { fullopt=$0; canonopt=deesc("-fno-objc-nilcheck"); inc=1; do_output(fullopt); next; }
/^-fno-objc-gc$/ { fullopt=$0; canonopt=deesc("-fno-objc-gc"); inc=1; do_output(fullopt); next; }
/^-fno-objc-exceptions$/ { fullopt=$0; canonopt=deesc("-fno-objc-exceptions"); inc=1; do_output(fullopt); next; }
/^-fno-objc-direct-dispatch$/ { fullopt=$0; canonopt=deesc("-fno-objc-direct-dispatch"); inc=1; do_output(fullopt); next; }
/^-fno-objc-call-cxx-cdtors$/ { fullopt=$0; canonopt=deesc("-fno-objc-call-cxx-cdtors"); inc=1; do_output(fullopt); next; }
/^-fno-nothrow-opt$/ { fullopt=$0; canonopt=deesc("-fno-nothrow-opt"); inc=1; do_output(fullopt); next; }
/^-fno-nonnull-objects$/ { fullopt=$0; canonopt=deesc("-fno-nonnull-objects"); inc=1; do_output(fullopt); next; }
/^-fno-nonansi-builtins$/ { fullopt=$0; canonopt=deesc("-fno-nonansi-builtins"); inc=1; do_output(fullopt); next; }
/^-fno-non-call-exceptions$/ { fullopt=$0; canonopt=deesc("-fno-non-call-exceptions"); inc=1; do_output(fullopt); next; }
/^-fno-nil-receivers$/ { fullopt=$0; canonopt=deesc("-fno-nil-receivers"); inc=1; do_output(fullopt); next; }
/^-fno-nil$/ { fullopt=$0; canonopt=deesc("-fno-nil"); inc=1; do_output(fullopt); next; }
/^-fno-next-runtime$/ { fullopt=$0; canonopt=deesc("-fno-next-runtime"); inc=1; do_output(fullopt); next; }
/^-fno-new-ttp-matching$/ { fullopt=$0; canonopt=deesc("-fno-new-ttp-matching"); inc=1; do_output(fullopt); next; }
/^-fno-new-inheriting-ctors$/ { fullopt=$0; canonopt=deesc("-fno-new-inheriting-ctors"); inc=1; do_output(fullopt); next; }
/^-fno-new-abi$/ { fullopt=$0; canonopt=deesc("-fno-new-abi"); inc=1; do_output(fullopt); next; }
/^-fno-name-mangling-version-$/ { fullopt=$0; canonopt=deesc("-fno-name-mangling-version-"); inc=1; do_output(fullopt); next; }
/^-fno-mudflapth$/ { fullopt=$0; canonopt=deesc("-fno-mudflapth"); inc=1; do_output(fullopt); next; }
/^-fno-mudflapir$/ { fullopt=$0; canonopt=deesc("-fno-mudflapir"); inc=1; do_output(fullopt); next; }
/^-fno-mudflap$/ { fullopt=$0; canonopt=deesc("-fno-mudflap"); inc=1; do_output(fullopt); next; }
/^-fno-ms-extensions$/ { fullopt=$0; canonopt=deesc("-fno-ms-extensions"); inc=1; do_output(fullopt); next; }
/^-fno-move-loop-invariants$/ { fullopt=$0; canonopt=deesc("-fno-move-loop-invariants"); inc=1; do_output(fullopt); next; }
/^-fno-modulo-sched-allow-regmoves$/ { fullopt=$0; canonopt=deesc("-fno-modulo-sched-allow-regmoves"); inc=1; do_output(fullopt); next; }
/^-fno-modulo-sched$/ { fullopt=$0; canonopt=deesc("-fno-modulo-sched"); inc=1; do_output(fullopt); next; }
/^-fno-modules-ts$/ { fullopt=$0; canonopt=deesc("-fno-modules-ts"); inc=1; do_output(fullopt); next; }
/^-fno-modules$/ { fullopt=$0; canonopt=deesc("-fno-modules"); inc=1; do_output(fullopt); next; }
/^-fno-moduleinfo$/ { fullopt=$0; canonopt=deesc("-fno-moduleinfo"); inc=1; do_output(fullopt); next; }
/^-fno-module-version-ignore$/ { fullopt=$0; canonopt=deesc("-fno-module-version-ignore"); inc=1; do_output(fullopt); next; }
/^-fno-module-private$/ { fullopt=$0; canonopt=deesc("-fno-module-private"); inc=1; do_output(fullopt); next; }
/^-fno-module-only$/ { fullopt=$0; canonopt=deesc("-fno-module-only"); inc=1; do_output(fullopt); next; }
/^-fno-module-lazy$/ { fullopt=$0; canonopt=deesc("-fno-module-lazy"); inc=1; do_output(fullopt); next; }
/^-fno-module-implicit-inline$/ { fullopt=$0; canonopt=deesc("-fno-module-implicit-inline"); inc=1; do_output(fullopt); next; }
/^-fno-module-header$/ { fullopt=$0; canonopt=deesc("-fno-module-header"); inc=1; do_output(fullopt); next; }
/^-fno-merge-debug-strings$/ { fullopt=$0; canonopt=deesc("-fno-merge-debug-strings"); inc=1; do_output(fullopt); next; }
/^-fno-merge-constants$/ { fullopt=$0; canonopt=deesc("-fno-merge-constants"); inc=1; do_output(fullopt); next; }
/^-fno-merge-all-constants$/ { fullopt=$0; canonopt=deesc("-fno-merge-all-constants"); inc=1; do_output(fullopt); next; }
/^-fno-mem-report-wpa$/ { fullopt=$0; canonopt=deesc("-fno-mem-report-wpa"); inc=1; do_output(fullopt); next; }
/^-fno-mem-report$/ { fullopt=$0; canonopt=deesc("-fno-mem-report"); inc=1; do_output(fullopt); next; }
/^-fno-math-errno$/ { fullopt=$0; canonopt=deesc("-fno-math-errno"); inc=1; do_output(fullopt); next; }
/^-fno-makelist$/ { fullopt=$0; canonopt=deesc("-fno-makelist"); inc=1; do_output(fullopt); next; }
/^-fno-makeinit$/ { fullopt=$0; canonopt=deesc("-fno-makeinit"); inc=1; do_output(fullopt); next; }
/^-fno-main$/ { fullopt=$0; canonopt=deesc("-fno-main"); inc=1; do_output(fullopt); next; }
/^-fno-m2-whole-program$/ { fullopt=$0; canonopt=deesc("-fno-m2-whole-program"); inc=1; do_output(fullopt); next; }
/^-fno-m2-version$/ { fullopt=$0; canonopt=deesc("-fno-m2-version"); inc=1; do_output(fullopt); next; }
/^-fno-m2-strict-type$/ { fullopt=$0; canonopt=deesc("-fno-m2-strict-type"); inc=1; do_output(fullopt); next; }
/^-fno-m2-statistics$/ { fullopt=$0; canonopt=deesc("-fno-m2-statistics"); inc=1; do_output(fullopt); next; }
/^-fno-m2-plugin$/ { fullopt=$0; canonopt=deesc("-fno-m2-plugin"); inc=1; do_output(fullopt); next; }
/^-fno-m2-lower-case$/ { fullopt=$0; canonopt=deesc("-fno-m2-lower-case"); inc=1; do_output(fullopt); next; }
/^-fno-m2-g$/ { fullopt=$0; canonopt=deesc("-fno-m2-g"); inc=1; do_output(fullopt); next; }
/^-fno-ltrans$/ { fullopt=$0; canonopt=deesc("-fno-ltrans"); inc=1; do_output(fullopt); next; }
/^-fno-lto-report-wpa$/ { fullopt=$0; canonopt=deesc("-fno-lto-report-wpa"); inc=1; do_output(fullopt); next; }
/^-fno-lto-report$/ { fullopt=$0; canonopt=deesc("-fno-lto-report"); inc=1; do_output(fullopt); next; }
/^-fno-lto-odr-type-merging$/ { fullopt=$0; canonopt=deesc("-fno-lto-odr-type-merging"); inc=1; do_output(fullopt); next; }
/^-fno-lto$/ { fullopt=$0; canonopt=deesc("-fno-lto"); inc=1; do_output(fullopt); next; }
/^-fno-lra-remat$/ { fullopt=$0; canonopt=deesc("-fno-lra-remat"); inc=1; do_output(fullopt); next; }
/^-fno-loop-unroll-and-jam$/ { fullopt=$0; canonopt=deesc("-fno-loop-unroll-and-jam"); inc=1; do_output(fullopt); next; }
/^-fno-loop-strip-mine$/ { fullopt=$0; canonopt=deesc("-fno-loop-strip-mine"); inc=1; do_output(fullopt); next; }
/^-fno-loop-parallelize-all$/ { fullopt=$0; canonopt=deesc("-fno-loop-parallelize-all"); inc=1; do_output(fullopt); next; }
/^-fno-loop-optimize$/ { fullopt=$0; canonopt=deesc("-fno-loop-optimize"); inc=1; do_output(fullopt); next; }
/^-fno-loop-nest-optimize$/ { fullopt=$0; canonopt=deesc("-fno-loop-nest-optimize"); inc=1; do_output(fullopt); next; }
/^-fno-loop-interchange$/ { fullopt=$0; canonopt=deesc("-fno-loop-interchange"); inc=1; do_output(fullopt); next; }
/^-fno-loop-flatten$/ { fullopt=$0; canonopt=deesc("-fno-loop-flatten"); inc=1; do_output(fullopt); next; }
/^-fno-loop-block$/ { fullopt=$0; canonopt=deesc("-fno-loop-block"); inc=1; do_output(fullopt); next; }
/^-fno-local-ivars$/ { fullopt=$0; canonopt=deesc("-fno-local-ivars"); inc=1; do_output(fullopt); next; }
/^-fno-live-range-shrinkage$/ { fullopt=$0; canonopt=deesc("-fno-live-range-shrinkage"); inc=1; do_output(fullopt); next; }
/^-fno-live-patching$/ { fullopt=$0; canonopt=deesc("-fno-live-patching"); inc=1; do_output(fullopt); next; }
/^-fno-limit-function-alignment$/ { fullopt=$0; canonopt=deesc("-fno-limit-function-alignment"); inc=1; do_output(fullopt); next; }
/^-fno-lifetime-dse$/ { fullopt=$0; canonopt=deesc("-fno-lifetime-dse"); inc=1; do_output(fullopt); next; }
/^-fno-leading-underscore$/ { fullopt=$0; canonopt=deesc("-fno-leading-underscore"); inc=1; do_output(fullopt); next; }
/^-fno-lax-vector-conversions$/ { fullopt=$0; canonopt=deesc("-fno-lax-vector-conversions"); inc=1; do_output(fullopt); next; }
/^-fno-large-source-files$/ { fullopt=$0; canonopt=deesc("-fno-large-source-files"); inc=1; do_output(fullopt); next; }
/^-fno-lang-info-module-cmi$/ { fullopt=$0; canonopt=deesc("-fno-lang-info-module-cmi"); inc=1; do_output(fullopt); next; }
/^-fno-lang-info-include-translate-not$/ { fullopt=$0; canonopt=deesc("-fno-lang-info-include-translate-not"); inc=1; do_output(fullopt); next; }
/^-fno-lang-info-include-translate$/ { fullopt=$0; canonopt=deesc("-fno-lang-info-include-translate"); inc=1; do_output(fullopt); next; }
/^-fno-labels-ok$/ { fullopt=$0; canonopt=deesc("-fno-labels-ok"); inc=1; do_output(fullopt); next; }
/^-fno-keep-static-functions$/ { fullopt=$0; canonopt=deesc("-fno-keep-static-functions"); inc=1; do_output(fullopt); next; }
/^-fno-keep-static-consts$/ { fullopt=$0; canonopt=deesc("-fno-keep-static-consts"); inc=1; do_output(fullopt); next; }
/^-fno-keep-inline-functions$/ { fullopt=$0; canonopt=deesc("-fno-keep-inline-functions"); inc=1; do_output(fullopt); next; }
/^-fno-keep-gc-roots-live$/ { fullopt=$0; canonopt=deesc("-fno-keep-gc-roots-live"); inc=1; do_output(fullopt); next; }
/^-fno-jump-tables$/ { fullopt=$0; canonopt=deesc("-fno-jump-tables"); inc=1; do_output(fullopt); next; }
/^-fno-ivopts$/ { fullopt=$0; canonopt=deesc("-fno-ivopts"); inc=1; do_output(fullopt); next; }
/^-fno-isolate-erroneous-paths-dereference$/ { fullopt=$0; canonopt=deesc("-fno-isolate-erroneous-paths-dereference"); inc=1; do_output(fullopt); next; }
/^-fno-isolate-erroneous-paths-attribute$/ { fullopt=$0; canonopt=deesc("-fno-isolate-erroneous-paths-attribute"); inc=1; do_output(fullopt); next; }
/^-fno-iso$/ { fullopt=$0; canonopt=deesc("-fno-iso"); inc=1; do_output(fullopt); next; }
/^-fno-ira-share-spill-slots$/ { fullopt=$0; canonopt=deesc("-fno-ira-share-spill-slots"); inc=1; do_output(fullopt); next; }
/^-fno-ira-share-save-slots$/ { fullopt=$0; canonopt=deesc("-fno-ira-share-save-slots"); inc=1; do_output(fullopt); next; }
/^-fno-ira-loop-pressure$/ { fullopt=$0; canonopt=deesc("-fno-ira-loop-pressure"); inc=1; do_output(fullopt); next; }
/^-fno-ira-hoist-pressure$/ { fullopt=$0; canonopt=deesc("-fno-ira-hoist-pressure"); inc=1; do_output(fullopt); next; }
/^-fno-ipa-vrp$/ { fullopt=$0; canonopt=deesc("-fno-ipa-vrp"); inc=1; do_output(fullopt); next; }
/^-fno-ipa-struct-reorg$/ { fullopt=$0; canonopt=deesc("-fno-ipa-struct-reorg"); inc=1; do_output(fullopt); next; }
/^-fno-ipa-stack-alignment$/ { fullopt=$0; canonopt=deesc("-fno-ipa-stack-alignment"); inc=1; do_output(fullopt); next; }
/^-fno-ipa-sra$/ { fullopt=$0; canonopt=deesc("-fno-ipa-sra"); inc=1; do_output(fullopt); next; }
/^-fno-ipa-reference-addressable$/ { fullopt=$0; canonopt=deesc("-fno-ipa-reference-addressable"); inc=1; do_output(fullopt); next; }
/^-fno-ipa-reference$/ { fullopt=$0; canonopt=deesc("-fno-ipa-reference"); inc=1; do_output(fullopt); next; }
/^-fno-ipa-ra$/ { fullopt=$0; canonopt=deesc("-fno-ipa-ra"); inc=1; do_output(fullopt); next; }
/^-fno-ipa-pure-const$/ { fullopt=$0; canonopt=deesc("-fno-ipa-pure-const"); inc=1; do_output(fullopt); next; }
/^-fno-ipa-pta$/ { fullopt=$0; canonopt=deesc("-fno-ipa-pta"); inc=1; do_output(fullopt); next; }
/^-fno-ipa-profile$/ { fullopt=$0; canonopt=deesc("-fno-ipa-profile"); inc=1; do_output(fullopt); next; }
/^-fno-ipa-modref$/ { fullopt=$0; canonopt=deesc("-fno-ipa-modref"); inc=1; do_output(fullopt); next; }
/^-fno-ipa-matrix-reorg$/ { fullopt=$0; canonopt=deesc("-fno-ipa-matrix-reorg"); inc=1; do_output(fullopt); next; }
/^-fno-ipa-icf-variables$/ { fullopt=$0; canonopt=deesc("-fno-ipa-icf-variables"); inc=1; do_output(fullopt); next; }
/^-fno-ipa-icf-functions$/ { fullopt=$0; canonopt=deesc("-fno-ipa-icf-functions"); inc=1; do_output(fullopt); next; }
/^-fno-ipa-icf$/ { fullopt=$0; canonopt=deesc("-fno-ipa-icf"); inc=1; do_output(fullopt); next; }
/^-fno-ipa-cp-clone$/ { fullopt=$0; canonopt=deesc("-fno-ipa-cp-clone"); inc=1; do_output(fullopt); next; }
/^-fno-ipa-cp-alignment$/ { fullopt=$0; canonopt=deesc("-fno-ipa-cp-alignment"); inc=1; do_output(fullopt); next; }
/^-fno-ipa-cp$/ { fullopt=$0; canonopt=deesc("-fno-ipa-cp"); inc=1; do_output(fullopt); next; }
/^-fno-ipa-bit-cp$/ { fullopt=$0; canonopt=deesc("-fno-ipa-bit-cp"); inc=1; do_output(fullopt); next; }
/^-fno-invariants$/ { fullopt=$0; canonopt=deesc("-fno-invariants"); inc=1; do_output(fullopt); next; }
/^-fno-integer-4-integer-8$/ { fullopt=$0; canonopt=deesc("-fno-integer-4-integer-8"); inc=1; do_output(fullopt); next; }
/^-fno-instrument-functions$/ { fullopt=$0; canonopt=deesc("-fno-instrument-functions"); inc=1; do_output(fullopt); next; }
/^-fno-inline-small-functions$/ { fullopt=$0; canonopt=deesc("-fno-inline-small-functions"); inc=1; do_output(fullopt); next; }
/^-fno-inline-limit-$/ { fullopt=$0; canonopt=deesc("-fno-inline-limit-"); inc=1; do_output(fullopt); next; }
/^-fno-inline-functions-called-once$/ { fullopt=$0; canonopt=deesc("-fno-inline-functions-called-once"); inc=1; do_output(fullopt); next; }
/^-fno-inline-functions$/ { fullopt=$0; canonopt=deesc("-fno-inline-functions"); inc=1; do_output(fullopt); next; }
/^-fno-inline-atomics$/ { fullopt=$0; canonopt=deesc("-fno-inline-atomics"); inc=1; do_output(fullopt); next; }
/^-fno-inline-arg-packing$/ { fullopt=$0; canonopt=deesc("-fno-inline-arg-packing"); inc=1; do_output(fullopt); next; }
/^-fno-inline$/ { fullopt=$0; canonopt=deesc("-fno-inline"); inc=1; do_output(fullopt); next; }
/^-fno-init-local-zero$/ { fullopt=$0; canonopt=deesc("-fno-init-local-zero"); inc=1; do_output(fullopt); next; }
/^-fno-init-derived$/ { fullopt=$0; canonopt=deesc("-fno-init-derived"); inc=1; do_output(fullopt); next; }
/^-fno-inhibit-size-directive$/ { fullopt=$0; canonopt=deesc("-fno-inhibit-size-directive"); inc=1; do_output(fullopt); next; }
/^-fno-indirect-inlining$/ { fullopt=$0; canonopt=deesc("-fno-indirect-inlining"); inc=1; do_output(fullopt); next; }
/^-fno-index$/ { fullopt=$0; canonopt=deesc("-fno-index"); inc=1; do_output(fullopt); next; }
/^-fno-implicit-templates$/ { fullopt=$0; canonopt=deesc("-fno-implicit-templates"); inc=1; do_output(fullopt); next; }
/^-fno-implicit-none$/ { fullopt=$0; canonopt=deesc("-fno-implicit-none"); inc=1; do_output(fullopt); next; }
/^-fno-implicit-inline-templates$/ { fullopt=$0; canonopt=deesc("-fno-implicit-inline-templates"); inc=1; do_output(fullopt); next; }
/^-fno-implement-inlines$/ { fullopt=$0; canonopt=deesc("-fno-implement-inlines"); inc=1; do_output(fullopt); next; }
/^-fno-ignore-unknown-pragmas$/ { fullopt=$0; canonopt=deesc("-fno-ignore-unknown-pragmas"); inc=1; do_output(fullopt); next; }
/^-fno-if-conversion2$/ { fullopt=$0; canonopt=deesc("-fno-if-conversion2"); inc=1; do_output(fullopt); next; }
/^-fno-if-conversion$/ { fullopt=$0; canonopt=deesc("-fno-if-conversion"); inc=1; do_output(fullopt); next; }
/^-fno-ident$/ { fullopt=$0; canonopt=deesc("-fno-ident"); inc=1; do_output(fullopt); next; }
/^-fno-huge-objects$/ { fullopt=$0; canonopt=deesc("-fno-huge-objects"); inc=1; do_output(fullopt); next; }
/^-fno-hosted$/ { fullopt=$0; canonopt=deesc("-fno-hosted"); inc=1; do_output(fullopt); next; }
/^-fno-honor-std$/ { fullopt=$0; canonopt=deesc("-fno-honor-std"); inc=1; do_output(fullopt); next; }
/^-fno-hoist-adjacent-loads$/ { fullopt=$0; canonopt=deesc("-fno-hoist-adjacent-loads"); inc=1; do_output(fullopt); next; }
/^-fno-help$/ { fullopt=$0; canonopt=deesc("-fno-help"); inc=1; do_output(fullopt); next; }
/^-fno-handle-exceptions$/ { fullopt=$0; canonopt=deesc("-fno-handle-exceptions"); inc=1; do_output(fullopt); next; }
/^-fno-guiding-decls$/ { fullopt=$0; canonopt=deesc("-fno-guiding-decls"); inc=1; do_output(fullopt); next; }
/^-fno-guess-branch-probability$/ { fullopt=$0; canonopt=deesc("-fno-guess-branch-probability"); inc=1; do_output(fullopt); next; }
/^-fno-graphite-identity$/ { fullopt=$0; canonopt=deesc("-fno-graphite-identity"); inc=1; do_output(fullopt); next; }
/^-fno-graphite$/ { fullopt=$0; canonopt=deesc("-fno-graphite"); inc=1; do_output(fullopt); next; }
/^-fno-go-debug-optimization$/ { fullopt=$0; canonopt=deesc("-fno-go-debug-optimization"); inc=1; do_output(fullopt); next; }
/^-fno-go-debug-escape$/ { fullopt=$0; canonopt=deesc("-fno-go-debug-escape"); inc=1; do_output(fullopt); next; }
/^-fno-go-compiling-runtime$/ { fullopt=$0; canonopt=deesc("-fno-go-compiling-runtime"); inc=1; do_output(fullopt); next; }
/^-fno-go-check-divide-zero$/ { fullopt=$0; canonopt=deesc("-fno-go-check-divide-zero"); inc=1; do_output(fullopt); next; }
/^-fno-go-check-divide-overflow$/ { fullopt=$0; canonopt=deesc("-fno-go-check-divide-overflow"); inc=1; do_output(fullopt); next; }
/^-fno-gnu89-inline$/ { fullopt=$0; canonopt=deesc("-fno-gnu89-inline"); inc=1; do_output(fullopt); next; }
/^-fno-gnu-unique$/ { fullopt=$0; canonopt=deesc("-fno-gnu-unique"); inc=1; do_output(fullopt); next; }
/^-fno-gnu-tm$/ { fullopt=$0; canonopt=deesc("-fno-gnu-tm"); inc=1; do_output(fullopt); next; }
/^-fno-gnu-runtime$/ { fullopt=$0; canonopt=deesc("-fno-gnu-runtime"); inc=1; do_output(fullopt); next; }
/^-fno-gnu-keywords$/ { fullopt=$0; canonopt=deesc("-fno-gnu-keywords"); inc=1; do_output(fullopt); next; }
/^-fno-gimple$/ { fullopt=$0; canonopt=deesc("-fno-gimple"); inc=1; do_output(fullopt); next; }
/^-fno-gcse-sm$/ { fullopt=$0; canonopt=deesc("-fno-gcse-sm"); inc=1; do_output(fullopt); next; }
/^-fno-gcse-lm$/ { fullopt=$0; canonopt=deesc("-fno-gcse-lm"); inc=1; do_output(fullopt); next; }
/^-fno-gcse-las$/ { fullopt=$0; canonopt=deesc("-fno-gcse-las"); inc=1; do_output(fullopt); next; }
/^-fno-gcse-after-reload$/ { fullopt=$0; canonopt=deesc("-fno-gcse-after-reload"); inc=1; do_output(fullopt); next; }
/^-fno-gcse$/ { fullopt=$0; canonopt=deesc("-fno-gcse"); inc=1; do_output(fullopt); next; }
/^-fno-function-sections$/ { fullopt=$0; canonopt=deesc("-fno-function-sections"); inc=1; do_output(fullopt); next; }
/^-fno-function-cse$/ { fullopt=$0; canonopt=deesc("-fno-function-cse"); inc=1; do_output(fullopt); next; }
/^-fno-frontend-optimize$/ { fullopt=$0; canonopt=deesc("-fno-frontend-optimize"); inc=1; do_output(fullopt); next; }
/^-fno-frontend-loop-interchange$/ { fullopt=$0; canonopt=deesc("-fno-frontend-loop-interchange"); inc=1; do_output(fullopt); next; }
/^-fno-friend-injection$/ { fullopt=$0; canonopt=deesc("-fno-friend-injection"); inc=1; do_output(fullopt); next; }
/^-fno-freestanding$/ { fullopt=$0; canonopt=deesc("-fno-freestanding"); inc=1; do_output(fullopt); next; }
/^-fno-free-line-length-none$/ { fullopt=$0; canonopt=deesc("-fno-free-line-length-none"); inc=1; do_output(fullopt); next; }
/^-fno-free-form$/ { fullopt=$0; canonopt=deesc("-fno-free-form"); inc=1; do_output(fullopt); next; }
/^-fno-fp-int-builtin-inexact$/ { fullopt=$0; canonopt=deesc("-fno-fp-int-builtin-inexact"); inc=1; do_output(fullopt); next; }
/^-fno-forward-propagate$/ { fullopt=$0; canonopt=deesc("-fno-forward-propagate"); inc=1; do_output(fullopt); next; }
/^-fno-force-addr$/ { fullopt=$0; canonopt=deesc("-fno-force-addr"); inc=1; do_output(fullopt); next; }
/^-fno-for-scope$/ { fullopt=$0; canonopt=deesc("-fno-for-scope"); inc=1; do_output(fullopt); next; }
/^-fno-floatvalue$/ { fullopt=$0; canonopt=deesc("-fno-floatvalue"); inc=1; do_output(fullopt); next; }
/^-fno-float-store$/ { fullopt=$0; canonopt=deesc("-fno-float-store"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-line-length-none$/ { fullopt=$0; canonopt=deesc("-fno-fixed-line-length-none"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-form$/ { fullopt=$0; canonopt=deesc("-fno-fixed-form"); inc=1; do_output(fullopt); next; }
/^-fno-finite-math-only$/ { fullopt=$0; canonopt=deesc("-fno-finite-math-only"); inc=1; do_output(fullopt); next; }
/^-fno-finite-loops$/ { fullopt=$0; canonopt=deesc("-fno-finite-loops"); inc=1; do_output(fullopt); next; }
/^-fno-fat-lto-objects$/ { fullopt=$0; canonopt=deesc("-fno-fat-lto-objects"); inc=1; do_output(fullopt); next; }
/^-fno-fast-math$/ { fullopt=$0; canonopt=deesc("-fno-fast-math"); inc=1; do_output(fullopt); next; }
/^-fno-f2c$/ { fullopt=$0; canonopt=deesc("-fno-f2c"); inc=1; do_output(fullopt); next; }
/^-fno-external-templates$/ { fullopt=$0; canonopt=deesc("-fno-external-templates"); inc=1; do_output(fullopt); next; }
/^-fno-external-blas$/ { fullopt=$0; canonopt=deesc("-fno-external-blas"); inc=1; do_output(fullopt); next; }
/^-fno-extern-tls-init$/ { fullopt=$0; canonopt=deesc("-fno-extern-tls-init"); inc=1; do_output(fullopt); next; }
/^-fno-extended-opaque$/ { fullopt=$0; canonopt=deesc("-fno-extended-opaque"); inc=1; do_output(fullopt); next; }
/^-fno-extended-identifiers$/ { fullopt=$0; canonopt=deesc("-fno-extended-identifiers"); inc=1; do_output(fullopt); next; }
/^-fno-ext-numeric-literals$/ { fullopt=$0; canonopt=deesc("-fno-ext-numeric-literals"); inc=1; do_output(fullopt); next; }
/^-fno-expensive-optimizations$/ { fullopt=$0; canonopt=deesc("-fno-expensive-optimizations"); inc=1; do_output(fullopt); next; }
/^-fno-exceptions$/ { fullopt=$0; canonopt=deesc("-fno-exceptions"); inc=1; do_output(fullopt); next; }
/^-fno-enum-int-equiv$/ { fullopt=$0; canonopt=deesc("-fno-enum-int-equiv"); inc=1; do_output(fullopt); next; }
/^-fno-enforce-eh-specs$/ { fullopt=$0; canonopt=deesc("-fno-enforce-eh-specs"); inc=1; do_output(fullopt); next; }
/^-fno-emit-struct-debug-reduced$/ { fullopt=$0; canonopt=deesc("-fno-emit-struct-debug-reduced"); inc=1; do_output(fullopt); next; }
/^-fno-emit-struct-debug-baseonly$/ { fullopt=$0; canonopt=deesc("-fno-emit-struct-debug-baseonly"); inc=1; do_output(fullopt); next; }
/^-fno-emit-class-debug-always$/ { fullopt=$0; canonopt=deesc("-fno-emit-class-debug-always"); inc=1; do_output(fullopt); next; }
/^-fno-eliminate-unused-debug-types$/ { fullopt=$0; canonopt=deesc("-fno-eliminate-unused-debug-types"); inc=1; do_output(fullopt); next; }
/^-fno-eliminate-unused-debug-symbols$/ { fullopt=$0; canonopt=deesc("-fno-eliminate-unused-debug-symbols"); inc=1; do_output(fullopt); next; }
/^-fno-eliminate-dwarf2-dups$/ { fullopt=$0; canonopt=deesc("-fno-eliminate-dwarf2-dups"); inc=1; do_output(fullopt); next; }
/^-fno-elide-type$/ { fullopt=$0; canonopt=deesc("-fno-elide-type"); inc=1; do_output(fullopt); next; }
/^-fno-elide-constructors$/ { fullopt=$0; canonopt=deesc("-fno-elide-constructors"); inc=1; do_output(fullopt); next; }
/^-fno-early-inlining$/ { fullopt=$0; canonopt=deesc("-fno-early-inlining"); inc=1; do_output(fullopt); next; }
/^-fno-dwarf2-cfi-asm$/ { fullopt=$0; canonopt=deesc("-fno-dwarf2-cfi-asm"); inc=1; do_output(fullopt); next; }
/^-fno-dump-unnumbered-links$/ { fullopt=$0; canonopt=deesc("-fno-dump-unnumbered-links"); inc=1; do_output(fullopt); next; }
/^-fno-dump-unnumbered$/ { fullopt=$0; canonopt=deesc("-fno-dump-unnumbered"); inc=1; do_output(fullopt); next; }
/^-fno-dump-system-exports$/ { fullopt=$0; canonopt=deesc("-fno-dump-system-exports"); inc=1; do_output(fullopt); next; }
/^-fno-dump-passes$/ { fullopt=$0; canonopt=deesc("-fno-dump-passes"); inc=1; do_output(fullopt); next; }
/^-fno-dump-parse-tree$/ { fullopt=$0; canonopt=deesc("-fno-dump-parse-tree"); inc=1; do_output(fullopt); next; }
/^-fno-dump-noaddr$/ { fullopt=$0; canonopt=deesc("-fno-dump-noaddr"); inc=1; do_output(fullopt); next; }
/^-fno-dump-internal-locations$/ { fullopt=$0; canonopt=deesc("-fno-dump-internal-locations"); inc=1; do_output(fullopt); next; }
/^-fno-dump-fortran-original$/ { fullopt=$0; canonopt=deesc("-fno-dump-fortran-original"); inc=1; do_output(fullopt); next; }
/^-fno-dump-fortran-optimized$/ { fullopt=$0; canonopt=deesc("-fno-dump-fortran-optimized"); inc=1; do_output(fullopt); next; }
/^-fno-dump-fortran-global$/ { fullopt=$0; canonopt=deesc("-fno-dump-fortran-global"); inc=1; do_output(fullopt); next; }
/^-fno-dump-d-original$/ { fullopt=$0; canonopt=deesc("-fno-dump-d-original"); inc=1; do_output(fullopt); next; }
/^-fno-dump-core$/ { fullopt=$0; canonopt=deesc("-fno-dump-core"); inc=1; do_output(fullopt); next; }
/^-fno-dump-analyzer-supergraph$/ { fullopt=$0; canonopt=deesc("-fno-dump-analyzer-supergraph"); inc=1; do_output(fullopt); next; }
/^-fno-dump-analyzer-stderr$/ { fullopt=$0; canonopt=deesc("-fno-dump-analyzer-stderr"); inc=1; do_output(fullopt); next; }
/^-fno-dump-analyzer-state-purge$/ { fullopt=$0; canonopt=deesc("-fno-dump-analyzer-state-purge"); inc=1; do_output(fullopt); next; }
/^-fno-dump-analyzer-json$/ { fullopt=$0; canonopt=deesc("-fno-dump-analyzer-json"); inc=1; do_output(fullopt); next; }
/^-fno-dump-analyzer-feasibility$/ { fullopt=$0; canonopt=deesc("-fno-dump-analyzer-feasibility"); inc=1; do_output(fullopt); next; }
/^-fno-dump-analyzer-exploded-nodes-3$/ { fullopt=$0; canonopt=deesc("-fno-dump-analyzer-exploded-nodes-3"); inc=1; do_output(fullopt); next; }
/^-fno-dump-analyzer-exploded-nodes-2$/ { fullopt=$0; canonopt=deesc("-fno-dump-analyzer-exploded-nodes-2"); inc=1; do_output(fullopt); next; }
/^-fno-dump-analyzer-exploded-nodes$/ { fullopt=$0; canonopt=deesc("-fno-dump-analyzer-exploded-nodes"); inc=1; do_output(fullopt); next; }
/^-fno-dump-analyzer-exploded-graph$/ { fullopt=$0; canonopt=deesc("-fno-dump-analyzer-exploded-graph"); inc=1; do_output(fullopt); next; }
/^-fno-dump-analyzer-callgraph$/ { fullopt=$0; canonopt=deesc("-fno-dump-analyzer-callgraph"); inc=1; do_output(fullopt); next; }
/^-fno-dump-analyzer$/ { fullopt=$0; canonopt=deesc("-fno-dump-analyzer"); inc=1; do_output(fullopt); next; }
/^-fno-dump-ada-spec-slim$/ { fullopt=$0; canonopt=deesc("-fno-dump-ada-spec-slim"); inc=1; do_output(fullopt); next; }
/^-fno-dump-ada-spec$/ { fullopt=$0; canonopt=deesc("-fno-dump-ada-spec"); inc=1; do_output(fullopt); next; }
/^-fno-dse$/ { fullopt=$0; canonopt=deesc("-fno-dse"); inc=1; do_output(fullopt); next; }
/^-fno-druntime$/ { fullopt=$0; canonopt=deesc("-fno-druntime"); inc=1; do_output(fullopt); next; }
/^-fno-dollars-in-identifiers$/ { fullopt=$0; canonopt=deesc("-fno-dollars-in-identifiers"); inc=1; do_output(fullopt); next; }
/^-fno-dollar-ok$/ { fullopt=$0; canonopt=deesc("-fno-dollar-ok"); inc=1; do_output(fullopt); next; }
/^-fno-doc$/ { fullopt=$0; canonopt=deesc("-fno-doc"); inc=1; do_output(fullopt); next; }
/^-fno-directives-only$/ { fullopt=$0; canonopt=deesc("-fno-directives-only"); inc=1; do_output(fullopt); next; }
/^-fno-diagnostics-show-template-tree$/ { fullopt=$0; canonopt=deesc("-fno-diagnostics-show-template-tree"); inc=1; do_output(fullopt); next; }
/^-fno-diagnostics-show-path-depths$/ { fullopt=$0; canonopt=deesc("-fno-diagnostics-show-path-depths"); inc=1; do_output(fullopt); next; }
/^-fno-diagnostics-show-option$/ { fullopt=$0; canonopt=deesc("-fno-diagnostics-show-option"); inc=1; do_output(fullopt); next; }
/^-fno-diagnostics-show-line-numbers$/ { fullopt=$0; canonopt=deesc("-fno-diagnostics-show-line-numbers"); inc=1; do_output(fullopt); next; }
/^-fno-diagnostics-show-labels$/ { fullopt=$0; canonopt=deesc("-fno-diagnostics-show-labels"); inc=1; do_output(fullopt); next; }
/^-fno-diagnostics-show-cwe$/ { fullopt=$0; canonopt=deesc("-fno-diagnostics-show-cwe"); inc=1; do_output(fullopt); next; }
/^-fno-diagnostics-show-caret$/ { fullopt=$0; canonopt=deesc("-fno-diagnostics-show-caret"); inc=1; do_output(fullopt); next; }
/^-fno-diagnostics-plain-output$/ { fullopt=$0; canonopt=deesc("-fno-diagnostics-plain-output"); inc=1; do_output(fullopt); next; }
/^-fno-diagnostics-parseable-fixits$/ { fullopt=$0; canonopt=deesc("-fno-diagnostics-parseable-fixits"); inc=1; do_output(fullopt); next; }
/^-fno-diagnostics-generate-patch$/ { fullopt=$0; canonopt=deesc("-fno-diagnostics-generate-patch"); inc=1; do_output(fullopt); next; }
/^-fno-diagnostics-color$/ { fullopt=$0; canonopt=deesc("-fno-diagnostics-color"); inc=1; do_output(fullopt); next; }
/^-fno-devirtualize-speculatively$/ { fullopt=$0; canonopt=deesc("-fno-devirtualize-speculatively"); inc=1; do_output(fullopt); next; }
/^-fno-devirtualize-at-ltrans$/ { fullopt=$0; canonopt=deesc("-fno-devirtualize-at-ltrans"); inc=1; do_output(fullopt); next; }
/^-fno-devirtualize$/ { fullopt=$0; canonopt=deesc("-fno-devirtualize"); inc=1; do_output(fullopt); next; }
/^-fno-delete-null-pointer-checks$/ { fullopt=$0; canonopt=deesc("-fno-delete-null-pointer-checks"); inc=1; do_output(fullopt); next; }
/^-fno-delete-dead-exceptions$/ { fullopt=$0; canonopt=deesc("-fno-delete-dead-exceptions"); inc=1; do_output(fullopt); next; }
/^-fno-delayed-branch$/ { fullopt=$0; canonopt=deesc("-fno-delayed-branch"); inc=1; do_output(fullopt); next; }
/^-fno-defer-pop$/ { fullopt=$0; canonopt=deesc("-fno-defer-pop"); inc=1; do_output(fullopt); next; }
/^-fno-default-real-8$/ { fullopt=$0; canonopt=deesc("-fno-default-real-8"); inc=1; do_output(fullopt); next; }
/^-fno-default-real-16$/ { fullopt=$0; canonopt=deesc("-fno-default-real-16"); inc=1; do_output(fullopt); next; }
/^-fno-default-real-10$/ { fullopt=$0; canonopt=deesc("-fno-default-real-10"); inc=1; do_output(fullopt); next; }
/^-fno-default-integer-8$/ { fullopt=$0; canonopt=deesc("-fno-default-integer-8"); inc=1; do_output(fullopt); next; }
/^-fno-default-inline$/ { fullopt=$0; canonopt=deesc("-fno-default-inline"); inc=1; do_output(fullopt); next; }
/^-fno-default-double-8$/ { fullopt=$0; canonopt=deesc("-fno-default-double-8"); inc=1; do_output(fullopt); next; }
/^-fno-deduce-init-list$/ { fullopt=$0; canonopt=deesc("-fno-deduce-init-list"); inc=1; do_output(fullopt); next; }
/^-fno-declone-ctor-dtor$/ { fullopt=$0; canonopt=deesc("-fno-declone-ctor-dtor"); inc=1; do_output(fullopt); next; }
/^-fno-dec-structure$/ { fullopt=$0; canonopt=deesc("-fno-dec-structure"); inc=1; do_output(fullopt); next; }
/^-fno-dec-static$/ { fullopt=$0; canonopt=deesc("-fno-dec-static"); inc=1; do_output(fullopt); next; }
/^-fno-dec-math$/ { fullopt=$0; canonopt=deesc("-fno-dec-math"); inc=1; do_output(fullopt); next; }
/^-fno-dec-intrinsic-ints$/ { fullopt=$0; canonopt=deesc("-fno-dec-intrinsic-ints"); inc=1; do_output(fullopt); next; }
/^-fno-dec-include$/ { fullopt=$0; canonopt=deesc("-fno-dec-include"); inc=1; do_output(fullopt); next; }
/^-fno-dec-format-defaults$/ { fullopt=$0; canonopt=deesc("-fno-dec-format-defaults"); inc=1; do_output(fullopt); next; }
/^-fno-dec-char-conversions$/ { fullopt=$0; canonopt=deesc("-fno-dec-char-conversions"); inc=1; do_output(fullopt); next; }
/^-fno-dec-blank-format-item$/ { fullopt=$0; canonopt=deesc("-fno-dec-blank-format-item"); inc=1; do_output(fullopt); next; }
/^-fno-dec$/ { fullopt=$0; canonopt=deesc("-fno-dec"); inc=1; do_output(fullopt); next; }
/^-fno-debug-types-section$/ { fullopt=$0; canonopt=deesc("-fno-debug-types-section"); inc=1; do_output(fullopt); next; }
/^-fno-debug-trace-quad$/ { fullopt=$0; canonopt=deesc("-fno-debug-trace-quad"); inc=1; do_output(fullopt); next; }
/^-fno-debug-trace-api$/ { fullopt=$0; canonopt=deesc("-fno-debug-trace-api"); inc=1; do_output(fullopt); next; }
/^-fno-debug-function-line-numbers$/ { fullopt=$0; canonopt=deesc("-fno-debug-function-line-numbers"); inc=1; do_output(fullopt); next; }
/^-fno-debug-cpp$/ { fullopt=$0; canonopt=deesc("-fno-debug-cpp"); inc=1; do_output(fullopt); next; }
/^-fno-debug-builtins$/ { fullopt=$0; canonopt=deesc("-fno-debug-builtins"); inc=1; do_output(fullopt); next; }
/^-fno-debug-aux-vars$/ { fullopt=$0; canonopt=deesc("-fno-debug-aux-vars"); inc=1; do_output(fullopt); next; }
/^-fno-debug$/ { fullopt=$0; canonopt=deesc("-fno-debug"); inc=1; do_output(fullopt); next; }
/^-fno-dce$/ { fullopt=$0; canonopt=deesc("-fno-dce"); inc=1; do_output(fullopt); next; }
/^-fno-dbg-cnt-list$/ { fullopt=$0; canonopt=deesc("-fno-dbg-cnt-list"); inc=1; do_output(fullopt); next; }
/^-fno-data-sections$/ { fullopt=$0; canonopt=deesc("-fno-data-sections"); inc=1; do_output(fullopt); next; }
/^-fno-d-lines-as-comments$/ { fullopt=$0; canonopt=deesc("-fno-d-lines-as-comments"); inc=1; do_output(fullopt); next; }
/^-fno-d-lines-as-code$/ { fullopt=$0; canonopt=deesc("-fno-d-lines-as-code"); inc=1; do_output(fullopt); next; }
/^-fno-d$/ { fullopt=$0; canonopt=deesc("-fno-d"); inc=1; do_output(fullopt); next; }
/^-fno-cx-limited-range$/ { fullopt=$0; canonopt=deesc("-fno-cx-limited-range"); inc=1; do_output(fullopt); next; }
/^-fno-cx-fortran-rules$/ { fullopt=$0; canonopt=deesc("-fno-cx-fortran-rules"); inc=1; do_output(fullopt); next; }
/^-fno-cse-skip-blocks$/ { fullopt=$0; canonopt=deesc("-fno-cse-skip-blocks"); inc=1; do_output(fullopt); next; }
/^-fno-cse-follow-jumps$/ { fullopt=$0; canonopt=deesc("-fno-cse-follow-jumps"); inc=1; do_output(fullopt); next; }
/^-fno-crossjumping$/ { fullopt=$0; canonopt=deesc("-fno-crossjumping"); inc=1; do_output(fullopt); next; }
/^-fno-cray-pointer$/ { fullopt=$0; canonopt=deesc("-fno-cray-pointer"); inc=1; do_output(fullopt); next; }
/^-fno-cprop-registers$/ { fullopt=$0; canonopt=deesc("-fno-cprop-registers"); inc=1; do_output(fullopt); next; }
/^-fno-cppend$/ { fullopt=$0; canonopt=deesc("-fno-cppend"); inc=1; do_output(fullopt); next; }
/^-fno-cppbegin$/ { fullopt=$0; canonopt=deesc("-fno-cppbegin"); inc=1; do_output(fullopt); next; }
/^-fno-cpp$/ { fullopt=$0; canonopt=deesc("-fno-cpp"); inc=1; do_output(fullopt); next; }
/^-fno-coroutines$/ { fullopt=$0; canonopt=deesc("-fno-coroutines"); inc=1; do_output(fullopt); next; }
/^-fno-conserve-stack$/ { fullopt=$0; canonopt=deesc("-fno-conserve-stack"); inc=1; do_output(fullopt); next; }
/^-fno-conserve-space$/ { fullopt=$0; canonopt=deesc("-fno-conserve-space"); inc=1; do_output(fullopt); next; }
/^-fno-cond-mismatch$/ { fullopt=$0; canonopt=deesc("-fno-cond-mismatch"); inc=1; do_output(fullopt); next; }
/^-fno-concepts-ts$/ { fullopt=$0; canonopt=deesc("-fno-concepts-ts"); inc=1; do_output(fullopt); next; }
/^-fno-concepts$/ { fullopt=$0; canonopt=deesc("-fno-concepts"); inc=1; do_output(fullopt); next; }
/^-fno-compare-elim$/ { fullopt=$0; canonopt=deesc("-fno-compare-elim"); inc=1; do_output(fullopt); next; }
/^-fno-compare-debug-second$/ { fullopt=$0; canonopt=deesc("-fno-compare-debug-second"); inc=1; do_output(fullopt); next; }
/^-fno-compare-debug$/ { fullopt=$0; canonopt=deesc("-fno-compare-debug"); inc=1; do_output(fullopt); next; }
/^-fno-common$/ { fullopt=$0; canonopt=deesc("-fno-common"); inc=1; do_output(fullopt); next; }
/^-fno-combine-stack-adjustments$/ { fullopt=$0; canonopt=deesc("-fno-combine-stack-adjustments"); inc=1; do_output(fullopt); next; }
/^-fno-code-hoisting$/ { fullopt=$0; canonopt=deesc("-fno-code-hoisting"); inc=1; do_output(fullopt); next; }
/^-fno-cilkplus$/ { fullopt=$0; canonopt=deesc("-fno-cilkplus"); inc=1; do_output(fullopt); next; }
/^-fno-chkp-zero-input-bounds-for-main$/ { fullopt=$0; canonopt=deesc("-fno-chkp-zero-input-bounds-for-main"); inc=1; do_output(fullopt); next; }
/^-fno-chkp-use-wrappers$/ { fullopt=$0; canonopt=deesc("-fno-chkp-use-wrappers"); inc=1; do_output(fullopt); next; }
/^-fno-chkp-use-static-const-bounds$/ { fullopt=$0; canonopt=deesc("-fno-chkp-use-static-const-bounds"); inc=1; do_output(fullopt); next; }
/^-fno-chkp-use-static-bounds$/ { fullopt=$0; canonopt=deesc("-fno-chkp-use-static-bounds"); inc=1; do_output(fullopt); next; }
/^-fno-chkp-use-nochk-string-functions$/ { fullopt=$0; canonopt=deesc("-fno-chkp-use-nochk-string-functions"); inc=1; do_output(fullopt); next; }
/^-fno-chkp-use-fast-string-functions$/ { fullopt=$0; canonopt=deesc("-fno-chkp-use-fast-string-functions"); inc=1; do_output(fullopt); next; }
/^-fno-chkp-treat-zero-dynamic-size-as-infinite$/ { fullopt=$0; canonopt=deesc("-fno-chkp-treat-zero-dynamic-size-as-infinite"); inc=1; do_output(fullopt); next; }
/^-fno-chkp-store-bounds$/ { fullopt=$0; canonopt=deesc("-fno-chkp-store-bounds"); inc=1; do_output(fullopt); next; }
/^-fno-chkp-optimize$/ { fullopt=$0; canonopt=deesc("-fno-chkp-optimize"); inc=1; do_output(fullopt); next; }
/^-fno-chkp-narrow-to-innermost-array$/ { fullopt=$0; canonopt=deesc("-fno-chkp-narrow-to-innermost-array"); inc=1; do_output(fullopt); next; }
/^-fno-chkp-narrow-bounds$/ { fullopt=$0; canonopt=deesc("-fno-chkp-narrow-bounds"); inc=1; do_output(fullopt); next; }
/^-fno-chkp-instrument-marked-only$/ { fullopt=$0; canonopt=deesc("-fno-chkp-instrument-marked-only"); inc=1; do_output(fullopt); next; }
/^-fno-chkp-instrument-calls$/ { fullopt=$0; canonopt=deesc("-fno-chkp-instrument-calls"); inc=1; do_output(fullopt); next; }
/^-fno-chkp-flexible-struct-trailing-arrays$/ { fullopt=$0; canonopt=deesc("-fno-chkp-flexible-struct-trailing-arrays"); inc=1; do_output(fullopt); next; }
/^-fno-chkp-first-field-has-own-bounds$/ { fullopt=$0; canonopt=deesc("-fno-chkp-first-field-has-own-bounds"); inc=1; do_output(fullopt); next; }
/^-fno-chkp-check-write$/ { fullopt=$0; canonopt=deesc("-fno-chkp-check-write"); inc=1; do_output(fullopt); next; }
/^-fno-chkp-check-read$/ { fullopt=$0; canonopt=deesc("-fno-chkp-check-read"); inc=1; do_output(fullopt); next; }
/^-fno-chkp-check-incomplete-type$/ { fullopt=$0; canonopt=deesc("-fno-chkp-check-incomplete-type"); inc=1; do_output(fullopt); next; }
/^-fno-checking$/ { fullopt=$0; canonopt=deesc("-fno-checking"); inc=1; do_output(fullopt); next; }
/^-fno-check-pointer-bounds$/ { fullopt=$0; canonopt=deesc("-fno-check-pointer-bounds"); inc=1; do_output(fullopt); next; }
/^-fno-check-new$/ { fullopt=$0; canonopt=deesc("-fno-check-new"); inc=1; do_output(fullopt); next; }
/^-fno-check-data-deps$/ { fullopt=$0; canonopt=deesc("-fno-check-data-deps"); inc=1; do_output(fullopt); next; }
/^-fno-check-array-temporaries$/ { fullopt=$0; canonopt=deesc("-fno-check-array-temporaries"); inc=1; do_output(fullopt); next; }
/^-fno-char8_t$/ { fullopt=$0; canonopt=deesc("-fno-char8_t"); inc=1; do_output(fullopt); next; }
/^-fno-cf-protection$/ { fullopt=$0; canonopt=deesc("-fno-cf-protection"); inc=1; do_output(fullopt); next; }
/^-fno-case$/ { fullopt=$0; canonopt=deesc("-fno-case"); inc=1; do_output(fullopt); next; }
/^-fno-canonical-system-headers$/ { fullopt=$0; canonopt=deesc("-fno-canonical-system-headers"); inc=1; do_output(fullopt); next; }
/^-fno-callgraph-info$/ { fullopt=$0; canonopt=deesc("-fno-callgraph-info"); inc=1; do_output(fullopt); next; }
/^-fno-caller-saves$/ { fullopt=$0; canonopt=deesc("-fno-caller-saves"); inc=1; do_output(fullopt); next; }
/^-fno-c-prototypes-external$/ { fullopt=$0; canonopt=deesc("-fno-c-prototypes-external"); inc=1; do_output(fullopt); next; }
/^-fno-c-prototypes$/ { fullopt=$0; canonopt=deesc("-fno-c-prototypes"); inc=1; do_output(fullopt); next; }
/^-fno-builtin-$/ { fullopt=$0; canonopt=deesc("-fno-builtin-"); inc=1; do_output(fullopt); next; }
/^-fno-builtin$/ { fullopt=$0; canonopt=deesc("-fno-builtin"); inc=1; do_output(fullopt); next; }
/^-fno-building-libphobos-tests$/ { fullopt=$0; canonopt=deesc("-fno-building-libphobos-tests"); inc=1; do_output(fullopt); next; }
/^-fno-building-libgcc$/ { fullopt=$0; canonopt=deesc("-fno-building-libgcc"); inc=1; do_output(fullopt); next; }
/^-fno-btr-bb-exclusive$/ { fullopt=$0; canonopt=deesc("-fno-btr-bb-exclusive"); inc=1; do_output(fullopt); next; }
/^-fno-branch-target-load-optimize2$/ { fullopt=$0; canonopt=deesc("-fno-branch-target-load-optimize2"); inc=1; do_output(fullopt); next; }
/^-fno-branch-target-load-optimize$/ { fullopt=$0; canonopt=deesc("-fno-branch-target-load-optimize"); inc=1; do_output(fullopt); next; }
/^-fno-branch-probabilities$/ { fullopt=$0; canonopt=deesc("-fno-branch-probabilities"); inc=1; do_output(fullopt); next; }
/^-fno-branch-count-reg$/ { fullopt=$0; canonopt=deesc("-fno-branch-count-reg"); inc=1; do_output(fullopt); next; }
/^-fno-bounds-check$/ { fullopt=$0; canonopt=deesc("-fno-bounds-check"); inc=1; do_output(fullopt); next; }
/^-fno-bounds$/ { fullopt=$0; canonopt=deesc("-fno-bounds"); inc=1; do_output(fullopt); next; }
/^-fno-bit-tests$/ { fullopt=$0; canonopt=deesc("-fno-bit-tests"); inc=1; do_output(fullopt); next; }
/^-fno-backtrace$/ { fullopt=$0; canonopt=deesc("-fno-backtrace"); inc=1; do_output(fullopt); next; }
/^-fno-backslash$/ { fullopt=$0; canonopt=deesc("-fno-backslash"); inc=1; do_output(fullopt); next; }
/^-fno-automatic$/ { fullopt=$0; canonopt=deesc("-fno-automatic"); inc=1; do_output(fullopt); next; }
/^-fno-auto-profile$/ { fullopt=$0; canonopt=deesc("-fno-auto-profile"); inc=1; do_output(fullopt); next; }
/^-fno-auto-init$/ { fullopt=$0; canonopt=deesc("-fno-auto-init"); inc=1; do_output(fullopt); next; }
/^-fno-auto-inc-dec$/ { fullopt=$0; canonopt=deesc("-fno-auto-inc-dec"); inc=1; do_output(fullopt); next; }
/^-fno-asynchronous-unwind-tables$/ { fullopt=$0; canonopt=deesc("-fno-asynchronous-unwind-tables"); inc=1; do_output(fullopt); next; }
/^-fno-associative-math$/ { fullopt=$0; canonopt=deesc("-fno-associative-math"); inc=1; do_output(fullopt); next; }
/^-fno-assert$/ { fullopt=$0; canonopt=deesc("-fno-assert"); inc=1; do_output(fullopt); next; }
/^-fno-asm$/ { fullopt=$0; canonopt=deesc("-fno-asm"); inc=1; do_output(fullopt); next; }
/^-fno-argument-noalias-global$/ { fullopt=$0; canonopt=deesc("-fno-argument-noalias-global"); inc=1; do_output(fullopt); next; }
/^-fno-argument-noalias-anything$/ { fullopt=$0; canonopt=deesc("-fno-argument-noalias-anything"); inc=1; do_output(fullopt); next; }
/^-fno-argument-noalias$/ { fullopt=$0; canonopt=deesc("-fno-argument-noalias"); inc=1; do_output(fullopt); next; }
/^-fno-argument-alias$/ { fullopt=$0; canonopt=deesc("-fno-argument-alias"); inc=1; do_output(fullopt); next; }
/^-fno-analyzer-verbose-state-changes$/ { fullopt=$0; canonopt=deesc("-fno-analyzer-verbose-state-changes"); inc=1; do_output(fullopt); next; }
/^-fno-analyzer-verbose-edges$/ { fullopt=$0; canonopt=deesc("-fno-analyzer-verbose-edges"); inc=1; do_output(fullopt); next; }
/^-fno-analyzer-transitivity$/ { fullopt=$0; canonopt=deesc("-fno-analyzer-transitivity"); inc=1; do_output(fullopt); next; }
/^-fno-analyzer-state-purge$/ { fullopt=$0; canonopt=deesc("-fno-analyzer-state-purge"); inc=1; do_output(fullopt); next; }
/^-fno-analyzer-state-merge$/ { fullopt=$0; canonopt=deesc("-fno-analyzer-state-merge"); inc=1; do_output(fullopt); next; }
/^-fno-analyzer-show-duplicate-count$/ { fullopt=$0; canonopt=deesc("-fno-analyzer-show-duplicate-count"); inc=1; do_output(fullopt); next; }
/^-fno-analyzer-fine-grained$/ { fullopt=$0; canonopt=deesc("-fno-analyzer-fine-grained"); inc=1; do_output(fullopt); next; }
/^-fno-analyzer-feasibility$/ { fullopt=$0; canonopt=deesc("-fno-analyzer-feasibility"); inc=1; do_output(fullopt); next; }
/^-fno-analyzer-call-summaries$/ { fullopt=$0; canonopt=deesc("-fno-analyzer-call-summaries"); inc=1; do_output(fullopt); next; }
/^-fno-analyzer$/ { fullopt=$0; canonopt=deesc("-fno-analyzer"); inc=1; do_output(fullopt); next; }
/^-fno-alt-external-templates$/ { fullopt=$0; canonopt=deesc("-fno-alt-external-templates"); inc=1; do_output(fullopt); next; }
/^-fno-allow-store-data-races$/ { fullopt=$0; canonopt=deesc("-fno-allow-store-data-races"); inc=1; do_output(fullopt); next; }
/^-fno-allow-parameterless-variadic-functions$/ { fullopt=$0; canonopt=deesc("-fno-allow-parameterless-variadic-functions"); inc=1; do_output(fullopt); next; }
/^-fno-allow-leading-underscore$/ { fullopt=$0; canonopt=deesc("-fno-allow-leading-underscore"); inc=1; do_output(fullopt); next; }
/^-fno-allow-invalid-boz$/ { fullopt=$0; canonopt=deesc("-fno-allow-invalid-boz"); inc=1; do_output(fullopt); next; }
/^-fno-allow-argument-mismatch$/ { fullopt=$0; canonopt=deesc("-fno-allow-argument-mismatch"); inc=1; do_output(fullopt); next; }
/^-fno-allocation-dce$/ { fullopt=$0; canonopt=deesc("-fno-allocation-dce"); inc=1; do_output(fullopt); next; }
/^-fno-all-virtual$/ { fullopt=$0; canonopt=deesc("-fno-all-virtual"); inc=1; do_output(fullopt); next; }
/^-fno-all-intrinsics$/ { fullopt=$0; canonopt=deesc("-fno-all-intrinsics"); inc=1; do_output(fullopt); next; }
/^-fno-all-instantiations$/ { fullopt=$0; canonopt=deesc("-fno-all-instantiations"); inc=1; do_output(fullopt); next; }
/^-fno-aligned-new$/ { fullopt=$0; canonopt=deesc("-fno-aligned-new"); inc=1; do_output(fullopt); next; }
/^-fno-align-loops$/ { fullopt=$0; canonopt=deesc("-fno-align-loops"); inc=1; do_output(fullopt); next; }
/^-fno-align-labels$/ { fullopt=$0; canonopt=deesc("-fno-align-labels"); inc=1; do_output(fullopt); next; }
/^-fno-align-jumps$/ { fullopt=$0; canonopt=deesc("-fno-align-jumps"); inc=1; do_output(fullopt); next; }
/^-fno-align-functions$/ { fullopt=$0; canonopt=deesc("-fno-align-functions"); inc=1; do_output(fullopt); next; }
/^-fno-align-commons$/ { fullopt=$0; canonopt=deesc("-fno-align-commons"); inc=1; do_output(fullopt); next; }
/^-fno-aggressive-loop-optimizations$/ { fullopt=$0; canonopt=deesc("-fno-aggressive-loop-optimizations"); inc=1; do_output(fullopt); next; }
/^-fno-aggressive-function-elimination$/ { fullopt=$0; canonopt=deesc("-fno-aggressive-function-elimination"); inc=1; do_output(fullopt); next; }
/^-fno-access-control$/ { fullopt=$0; canonopt=deesc("-fno-access-control"); inc=1; do_output(fullopt); next; }
/^-fno-PIE$/ { fullopt=$0; canonopt=deesc("-fno-PIE"); inc=1; do_output(fullopt); next; }
/^-fno-PIC$/ { fullopt=$0; canonopt=deesc("-fno-PIC"); inc=1; do_output(fullopt); next; }
/^-fnil-receivers$/ { fullopt=$0; canonopt=deesc("-fnil-receivers"); inc=1; do_output(fullopt); next; }
/^-fnil$/ { fullopt=$0; canonopt=deesc("-fnil"); inc=1; do_output(fullopt); next; }
/^-fnext-runtime$/ { fullopt=$0; canonopt=deesc("-fnext-runtime"); inc=1; do_output(fullopt); next; }
/^-fnew-ttp-matching$/ { fullopt=$0; canonopt=deesc("-fnew-ttp-matching"); inc=1; do_output(fullopt); next; }
/^-fnew-inheriting-ctors$/ { fullopt=$0; canonopt=deesc("-fnew-inheriting-ctors"); inc=1; do_output(fullopt); next; }
/^-fnew-abi$/ { fullopt=$0; canonopt=deesc("-fnew-abi"); inc=1; do_output(fullopt); next; }
/^-fname-mangling-version-$/ { fullopt=$0; canonopt=deesc("-fname-mangling-version-"); inc=1; do_output(fullopt); next; }
/^-fmudflapth$/ { fullopt=$0; canonopt=deesc("-fmudflapth"); inc=1; do_output(fullopt); next; }
/^-fmudflapir$/ { fullopt=$0; canonopt=deesc("-fmudflapir"); inc=1; do_output(fullopt); next; }
/^-fmudflap$/ { fullopt=$0; canonopt=deesc("-fmudflap"); inc=1; do_output(fullopt); next; }
/^-fms-extensions$/ { fullopt=$0; canonopt=deesc("-fms-extensions"); inc=1; do_output(fullopt); next; }
/^-fmove-loop-invariants$/ { fullopt=$0; canonopt=deesc("-fmove-loop-invariants"); inc=1; do_output(fullopt); next; }
/^-fmodulo-sched-allow-regmoves$/ { fullopt=$0; canonopt=deesc("-fmodulo-sched-allow-regmoves"); inc=1; do_output(fullopt); next; }
/^-fmodulo-sched$/ { fullopt=$0; canonopt=deesc("-fmodulo-sched"); inc=1; do_output(fullopt); next; }
/^-fmodules-ts$/ { fullopt=$0; canonopt=deesc("-fmodules-ts"); inc=1; do_output(fullopt); next; }
/^-fmodules$/ { fullopt=$0; canonopt=deesc("-fmodules"); inc=1; do_output(fullopt); next; }
/^-fmoduleinfo$/ { fullopt=$0; canonopt=deesc("-fmoduleinfo"); inc=1; do_output(fullopt); next; }
/^-fmodule-version-ignore$/ { fullopt=$0; canonopt=deesc("-fmodule-version-ignore"); inc=1; do_output(fullopt); next; }
/^-fmodule-private$/ { fullopt=$0; canonopt=deesc("-fmodule-private"); inc=1; do_output(fullopt); next; }
/^-fmodule-only$/ { fullopt=$0; canonopt=deesc("-fmodule-only"); inc=1; do_output(fullopt); next; }
/^(-fmodule-mapper=)(.*)$/ { fullopt=$0; canonopt=deesc("-fmodule-mapper"); optarg=gensub(/(-fmodule-mapper=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fmodule-lazy$/ { fullopt=$0; canonopt=deesc("-fmodule-lazy"); inc=1; do_output(fullopt); next; }
/^-fmodule-implicit-inline$/ { fullopt=$0; canonopt=deesc("-fmodule-implicit-inline"); inc=1; do_output(fullopt); next; }
/^(-fmodule-header=)(.*)$/ { fullopt=$0; canonopt=deesc("-fmodule-header"); optarg=gensub(/(-fmodule-header=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fmodule-header$/ { fullopt=$0; canonopt=deesc("-fmodule-header"); inc=1; do_output(fullopt); next; }
/^(-fmodule-file=)(.*)$/ { fullopt=$0; canonopt=deesc("-fmodule-file"); optarg=gensub(/(-fmodule-file=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fmod=)(.*)$/ { fullopt=$0; canonopt=deesc("-fmod"); optarg=gensub(/(-fmod=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fmessage-length=)(.*)$/ { fullopt=$0; canonopt=deesc("-fmessage-length"); optarg=gensub(/(-fmessage-length=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fmerge-debug-strings$/ { fullopt=$0; canonopt=deesc("-fmerge-debug-strings"); inc=1; do_output(fullopt); next; }
/^-fmerge-constants$/ { fullopt=$0; canonopt=deesc("-fmerge-constants"); inc=1; do_output(fullopt); next; }
/^-fmerge-all-constants$/ { fullopt=$0; canonopt=deesc("-fmerge-all-constants"); inc=1; do_output(fullopt); next; }
/^-fmem-report-wpa$/ { fullopt=$0; canonopt=deesc("-fmem-report-wpa"); inc=1; do_output(fullopt); next; }
/^-fmem-report$/ { fullopt=$0; canonopt=deesc("-fmem-report"); inc=1; do_output(fullopt); next; }
/^(-fmax-subrecord-length=)(.*)$/ { fullopt=$0; canonopt=deesc("-fmax-subrecord-length"); optarg=gensub(/(-fmax-subrecord-length=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fmax-stack-var-size=)(.*)$/ { fullopt=$0; canonopt=deesc("-fmax-stack-var-size"); optarg=gensub(/(-fmax-stack-var-size=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fmax-include-depth=)(.*)$/ { fullopt=$0; canonopt=deesc("-fmax-include-depth"); optarg=gensub(/(-fmax-include-depth=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fmax-identifier-length=)(.*)$/ { fullopt=$0; canonopt=deesc("-fmax-identifier-length"); optarg=gensub(/(-fmax-identifier-length=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fmax-errors=)(.*)$/ { fullopt=$0; canonopt=deesc("-fmax-errors"); optarg=gensub(/(-fmax-errors=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fmax-array-constructor=)(.*)$/ { fullopt=$0; canonopt=deesc("-fmax-array-constructor"); optarg=gensub(/(-fmax-array-constructor=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fmath-errno$/ { fullopt=$0; canonopt=deesc("-fmath-errno"); inc=1; do_output(fullopt); next; }
/^-fmakelist$/ { fullopt=$0; canonopt=deesc("-fmakelist"); inc=1; do_output(fullopt); next; }
/^-fmakeinit$/ { fullopt=$0; canonopt=deesc("-fmakeinit"); inc=1; do_output(fullopt); next; }
/^-fmain$/ { fullopt=$0; canonopt=deesc("-fmain"); inc=1; do_output(fullopt); next; }
/^(-fmacro-prefix-map=)(.*)$/ { fullopt=$0; canonopt=deesc("-fmacro-prefix-map"); optarg=gensub(/(-fmacro-prefix-map=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fm2-whole-program$/ { fullopt=$0; canonopt=deesc("-fm2-whole-program"); inc=1; do_output(fullopt); next; }
/^-fm2-version$/ { fullopt=$0; canonopt=deesc("-fm2-version"); inc=1; do_output(fullopt); next; }
/^-fm2-strict-type$/ { fullopt=$0; canonopt=deesc("-fm2-strict-type"); inc=1; do_output(fullopt); next; }
/^-fm2-statistics$/ { fullopt=$0; canonopt=deesc("-fm2-statistics"); inc=1; do_output(fullopt); next; }
/^-fm2-plugin$/ { fullopt=$0; canonopt=deesc("-fm2-plugin"); inc=1; do_output(fullopt); next; }
/^-fm2-lower-case$/ { fullopt=$0; canonopt=deesc("-fm2-lower-case"); inc=1; do_output(fullopt); next; }
/^-fm2-g$/ { fullopt=$0; canonopt=deesc("-fm2-g"); inc=1; do_output(fullopt); next; }
/^(-fltrans-output-list=)(.*)$/ { fullopt=$0; canonopt=deesc("-fltrans-output-list"); optarg=gensub(/(-fltrans-output-list=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fltrans$/ { fullopt=$0; canonopt=deesc("-fltrans"); inc=1; do_output(fullopt); next; }
/^(-flto=)(.*)$/ { fullopt=$0; canonopt=deesc("-flto"); optarg=gensub(/(-flto=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-flto-report-wpa$/ { fullopt=$0; canonopt=deesc("-flto-report-wpa"); inc=1; do_output(fullopt); next; }
/^-flto-report$/ { fullopt=$0; canonopt=deesc("-flto-report"); inc=1; do_output(fullopt); next; }
/^(-flto-partition=)(.*)$/ { fullopt=$0; canonopt=deesc("-flto-partition"); optarg=gensub(/(-flto-partition=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-flto-odr-type-merging$/ { fullopt=$0; canonopt=deesc("-flto-odr-type-merging"); inc=1; do_output(fullopt); next; }
/^(-flto-compression-level=)(.*)$/ { fullopt=$0; canonopt=deesc("-flto-compression-level"); optarg=gensub(/(-flto-compression-level=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-flto$/ { fullopt=$0; canonopt=deesc("-flto"); inc=1; do_output(fullopt); next; }
/^-flra-remat$/ { fullopt=$0; canonopt=deesc("-flra-remat"); inc=1; do_output(fullopt); next; }
/^-floop-unroll-and-jam$/ { fullopt=$0; canonopt=deesc("-floop-unroll-and-jam"); inc=1; do_output(fullopt); next; }
/^-floop-strip-mine$/ { fullopt=$0; canonopt=deesc("-floop-strip-mine"); inc=1; do_output(fullopt); next; }
/^-floop-parallelize-all$/ { fullopt=$0; canonopt=deesc("-floop-parallelize-all"); inc=1; do_output(fullopt); next; }
/^-floop-optimize$/ { fullopt=$0; canonopt=deesc("-floop-optimize"); inc=1; do_output(fullopt); next; }
/^-floop-nest-optimize$/ { fullopt=$0; canonopt=deesc("-floop-nest-optimize"); inc=1; do_output(fullopt); next; }
/^-floop-interchange$/ { fullopt=$0; canonopt=deesc("-floop-interchange"); inc=1; do_output(fullopt); next; }
/^-floop-flatten$/ { fullopt=$0; canonopt=deesc("-floop-flatten"); inc=1; do_output(fullopt); next; }
/^-floop-block$/ { fullopt=$0; canonopt=deesc("-floop-block"); inc=1; do_output(fullopt); next; }
/^(-flocation=)(.*)$/ { fullopt=$0; canonopt=deesc("-flocation"); optarg=gensub(/(-flocation=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-flocal-ivars$/ { fullopt=$0; canonopt=deesc("-flocal-ivars"); inc=1; do_output(fullopt); next; }
/^-flive-range-shrinkage$/ { fullopt=$0; canonopt=deesc("-flive-range-shrinkage"); inc=1; do_output(fullopt); next; }
/^(-flive-patching=)(.*)$/ { fullopt=$0; canonopt=deesc("-flive-patching"); optarg=gensub(/(-flive-patching=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-flive-patching$/ { fullopt=$0; canonopt=deesc("-flive-patching"); inc=1; do_output(fullopt); next; }
/^(-flinker-output=)(.*)$/ { fullopt=$0; canonopt=deesc("-flinker-output"); optarg=gensub(/(-flinker-output=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-flimit-function-alignment$/ { fullopt=$0; canonopt=deesc("-flimit-function-alignment"); inc=1; do_output(fullopt); next; }
/^(-flifetime-dse=)(.*)$/ { fullopt=$0; canonopt=deesc("-flifetime-dse"); optarg=gensub(/(-flifetime-dse=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-flifetime-dse$/ { fullopt=$0; canonopt=deesc("-flifetime-dse"); inc=1; do_output(fullopt); next; }
/^(-flibs=)(.*)$/ { fullopt=$0; canonopt=deesc("-flibs"); optarg=gensub(/(-flibs=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fleading-underscore$/ { fullopt=$0; canonopt=deesc("-fleading-underscore"); inc=1; do_output(fullopt); next; }
/^-flax-vector-conversions$/ { fullopt=$0; canonopt=deesc("-flax-vector-conversions"); inc=1; do_output(fullopt); next; }
/^-flarge-source-files$/ { fullopt=$0; canonopt=deesc("-flarge-source-files"); inc=1; do_output(fullopt); next; }
/^(-flang-info-module-cmi=)(.*)$/ { fullopt=$0; canonopt=deesc("-flang-info-module-cmi"); optarg=gensub(/(-flang-info-module-cmi=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-flang-info-module-cmi$/ { fullopt=$0; canonopt=deesc("-flang-info-module-cmi"); inc=1; do_output(fullopt); next; }
/^(-flang-info-include-translate=)(.*)$/ { fullopt=$0; canonopt=deesc("-flang-info-include-translate"); optarg=gensub(/(-flang-info-include-translate=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-flang-info-include-translate-not$/ { fullopt=$0; canonopt=deesc("-flang-info-include-translate-not"); inc=1; do_output(fullopt); next; }
/^-flang-info-include-translate$/ { fullopt=$0; canonopt=deesc("-flang-info-include-translate"); inc=1; do_output(fullopt); next; }
/^-flabels-ok$/ { fullopt=$0; canonopt=deesc("-flabels-ok"); inc=1; do_output(fullopt); next; }
/^-fkeep-static-functions$/ { fullopt=$0; canonopt=deesc("-fkeep-static-functions"); inc=1; do_output(fullopt); next; }
/^-fkeep-static-consts$/ { fullopt=$0; canonopt=deesc("-fkeep-static-consts"); inc=1; do_output(fullopt); next; }
/^-fkeep-inline-functions$/ { fullopt=$0; canonopt=deesc("-fkeep-inline-functions"); inc=1; do_output(fullopt); next; }
/^-fkeep-gc-roots-live$/ { fullopt=$0; canonopt=deesc("-fkeep-gc-roots-live"); inc=1; do_output(fullopt); next; }
/^-fjump-tables$/ { fullopt=$0; canonopt=deesc("-fjump-tables"); inc=1; do_output(fullopt); next; }
/^-fivopts$/ { fullopt=$0; canonopt=deesc("-fivopts"); inc=1; do_output(fullopt); next; }
/^-fisolate-erroneous-paths-dereference$/ { fullopt=$0; canonopt=deesc("-fisolate-erroneous-paths-dereference"); inc=1; do_output(fullopt); next; }
/^-fisolate-erroneous-paths-attribute$/ { fullopt=$0; canonopt=deesc("-fisolate-erroneous-paths-attribute"); inc=1; do_output(fullopt); next; }
/^-fiso$/ { fullopt=$0; canonopt=deesc("-fiso"); inc=1; do_output(fullopt); next; }
/^(-fira-verbose=)(.*)$/ { fullopt=$0; canonopt=deesc("-fira-verbose"); optarg=gensub(/(-fira-verbose=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fira-share-spill-slots$/ { fullopt=$0; canonopt=deesc("-fira-share-spill-slots"); inc=1; do_output(fullopt); next; }
/^-fira-share-save-slots$/ { fullopt=$0; canonopt=deesc("-fira-share-save-slots"); inc=1; do_output(fullopt); next; }
/^(-fira-region=)(.*)$/ { fullopt=$0; canonopt=deesc("-fira-region"); optarg=gensub(/(-fira-region=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fira-loop-pressure$/ { fullopt=$0; canonopt=deesc("-fira-loop-pressure"); inc=1; do_output(fullopt); next; }
/^-fira-hoist-pressure$/ { fullopt=$0; canonopt=deesc("-fira-hoist-pressure"); inc=1; do_output(fullopt); next; }
/^(-fira-algorithm=)(.*)$/ { fullopt=$0; canonopt=deesc("-fira-algorithm"); optarg=gensub(/(-fira-algorithm=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fipa-vrp$/ { fullopt=$0; canonopt=deesc("-fipa-vrp"); inc=1; do_output(fullopt); next; }
/^-fipa-struct-reorg$/ { fullopt=$0; canonopt=deesc("-fipa-struct-reorg"); inc=1; do_output(fullopt); next; }
/^-fipa-stack-alignment$/ { fullopt=$0; canonopt=deesc("-fipa-stack-alignment"); inc=1; do_output(fullopt); next; }
/^-fipa-sra$/ { fullopt=$0; canonopt=deesc("-fipa-sra"); inc=1; do_output(fullopt); next; }
/^-fipa-reference-addressable$/ { fullopt=$0; canonopt=deesc("-fipa-reference-addressable"); inc=1; do_output(fullopt); next; }
/^-fipa-reference$/ { fullopt=$0; canonopt=deesc("-fipa-reference"); inc=1; do_output(fullopt); next; }
/^-fipa-ra$/ { fullopt=$0; canonopt=deesc("-fipa-ra"); inc=1; do_output(fullopt); next; }
/^-fipa-pure-const$/ { fullopt=$0; canonopt=deesc("-fipa-pure-const"); inc=1; do_output(fullopt); next; }
/^-fipa-pta$/ { fullopt=$0; canonopt=deesc("-fipa-pta"); inc=1; do_output(fullopt); next; }
/^-fipa-profile$/ { fullopt=$0; canonopt=deesc("-fipa-profile"); inc=1; do_output(fullopt); next; }
/^-fipa-modref$/ { fullopt=$0; canonopt=deesc("-fipa-modref"); inc=1; do_output(fullopt); next; }
/^-fipa-matrix-reorg$/ { fullopt=$0; canonopt=deesc("-fipa-matrix-reorg"); inc=1; do_output(fullopt); next; }
/^-fipa-icf-variables$/ { fullopt=$0; canonopt=deesc("-fipa-icf-variables"); inc=1; do_output(fullopt); next; }
/^-fipa-icf-functions$/ { fullopt=$0; canonopt=deesc("-fipa-icf-functions"); inc=1; do_output(fullopt); next; }
/^-fipa-icf$/ { fullopt=$0; canonopt=deesc("-fipa-icf"); inc=1; do_output(fullopt); next; }
/^-fipa-cp-clone$/ { fullopt=$0; canonopt=deesc("-fipa-cp-clone"); inc=1; do_output(fullopt); next; }
/^-fipa-cp-alignment$/ { fullopt=$0; canonopt=deesc("-fipa-cp-alignment"); inc=1; do_output(fullopt); next; }
/^-fipa-cp$/ { fullopt=$0; canonopt=deesc("-fipa-cp"); inc=1; do_output(fullopt); next; }
/^-fipa-bit-cp$/ { fullopt=$0; canonopt=deesc("-fipa-bit-cp"); inc=1; do_output(fullopt); next; }
/^-finvariants$/ { fullopt=$0; canonopt=deesc("-finvariants"); inc=1; do_output(fullopt); next; }
/^(-fintrinsic-modules-path)$/     { fullopt=$0; canonopt=deesc("-fintrinsic-modules-path"); snarfing_optarg=1; inc=2; next; }
/^(-fintrinsic-modules-path=)(.*)$/ { fullopt=$0; canonopt=deesc("-fintrinsic-modules-path"); optarg=gensub(/(-fintrinsic-modules-path=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-finteger-4-integer-8$/ { fullopt=$0; canonopt=deesc("-finteger-4-integer-8"); inc=1; do_output(fullopt); next; }
/^(-finstrument-functions-exclude-function-list=)(.*)$/ { fullopt=$0; canonopt=deesc("-finstrument-functions-exclude-function-list"); optarg=gensub(/(-finstrument-functions-exclude-function-list=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-finstrument-functions-exclude-file-list=)(.*)$/ { fullopt=$0; canonopt=deesc("-finstrument-functions-exclude-file-list"); optarg=gensub(/(-finstrument-functions-exclude-file-list=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-finstrument-functions$/ { fullopt=$0; canonopt=deesc("-finstrument-functions"); inc=1; do_output(fullopt); next; }
/^(-finput-charset=)(.*)$/ { fullopt=$0; canonopt=deesc("-finput-charset"); optarg=gensub(/(-finput-charset=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-finline-small-functions$/ { fullopt=$0; canonopt=deesc("-finline-small-functions"); inc=1; do_output(fullopt); next; }
/^(-finline-matmul-limit=)(.*)$/ { fullopt=$0; canonopt=deesc("-finline-matmul-limit"); optarg=gensub(/(-finline-matmul-limit=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-finline-limit=)(.*)$/ { fullopt=$0; canonopt=deesc("-finline-limit"); optarg=gensub(/(-finline-limit=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-finline-limit-$/ { fullopt=$0; canonopt=deesc("-finline-limit-"); inc=1; do_output(fullopt); next; }
/^-finline-functions-called-once$/ { fullopt=$0; canonopt=deesc("-finline-functions-called-once"); inc=1; do_output(fullopt); next; }
/^-finline-functions$/ { fullopt=$0; canonopt=deesc("-finline-functions"); inc=1; do_output(fullopt); next; }
/^-finline-atomics$/ { fullopt=$0; canonopt=deesc("-finline-atomics"); inc=1; do_output(fullopt); next; }
/^-finline-arg-packing$/ { fullopt=$0; canonopt=deesc("-finline-arg-packing"); inc=1; do_output(fullopt); next; }
/^-finline$/ { fullopt=$0; canonopt=deesc("-finline"); inc=1; do_output(fullopt); next; }
/^(-finit-real=)(.*)$/ { fullopt=$0; canonopt=deesc("-finit-real"); optarg=gensub(/(-finit-real=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-finit-logical=)(.*)$/ { fullopt=$0; canonopt=deesc("-finit-logical"); optarg=gensub(/(-finit-logical=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-finit-local-zero$/ { fullopt=$0; canonopt=deesc("-finit-local-zero"); inc=1; do_output(fullopt); next; }
/^(-finit-integer=)(.*)$/ { fullopt=$0; canonopt=deesc("-finit-integer"); optarg=gensub(/(-finit-integer=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-finit-derived$/ { fullopt=$0; canonopt=deesc("-finit-derived"); inc=1; do_output(fullopt); next; }
/^(-finit-character=)(.*)$/ { fullopt=$0; canonopt=deesc("-finit-character"); optarg=gensub(/(-finit-character=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-finhibit-size-directive$/ { fullopt=$0; canonopt=deesc("-finhibit-size-directive"); inc=1; do_output(fullopt); next; }
/^-findirect-inlining$/ { fullopt=$0; canonopt=deesc("-findirect-inlining"); inc=1; do_output(fullopt); next; }
/^-findex$/ { fullopt=$0; canonopt=deesc("-findex"); inc=1; do_output(fullopt); next; }
/^-fimplicit-templates$/ { fullopt=$0; canonopt=deesc("-fimplicit-templates"); inc=1; do_output(fullopt); next; }
/^-fimplicit-none$/ { fullopt=$0; canonopt=deesc("-fimplicit-none"); inc=1; do_output(fullopt); next; }
/^-fimplicit-inline-templates$/ { fullopt=$0; canonopt=deesc("-fimplicit-inline-templates"); inc=1; do_output(fullopt); next; }
/^-fimplement-inlines$/ { fullopt=$0; canonopt=deesc("-fimplement-inlines"); inc=1; do_output(fullopt); next; }
/^-fignore-unknown-pragmas$/ { fullopt=$0; canonopt=deesc("-fignore-unknown-pragmas"); inc=1; do_output(fullopt); next; }
/^-fif-conversion2$/ { fullopt=$0; canonopt=deesc("-fif-conversion2"); inc=1; do_output(fullopt); next; }
/^-fif-conversion$/ { fullopt=$0; canonopt=deesc("-fif-conversion"); inc=1; do_output(fullopt); next; }
/^-fident$/ { fullopt=$0; canonopt=deesc("-fident"); inc=1; do_output(fullopt); next; }
/^-fhuge-objects$/ { fullopt=$0; canonopt=deesc("-fhuge-objects"); inc=1; do_output(fullopt); next; }
/^-fhosted$/ { fullopt=$0; canonopt=deesc("-fhosted"); inc=1; do_output(fullopt); next; }
/^-fhonor-std$/ { fullopt=$0; canonopt=deesc("-fhonor-std"); inc=1; do_output(fullopt); next; }
/^-fhoist-adjacent-loads$/ { fullopt=$0; canonopt=deesc("-fhoist-adjacent-loads"); inc=1; do_output(fullopt); next; }
/^(-fhelp=)(.*)$/ { fullopt=$0; canonopt=deesc("-fhelp"); optarg=gensub(/(-fhelp=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fhelp$/ { fullopt=$0; canonopt=deesc("-fhelp"); inc=1; do_output(fullopt); next; }
/^-fhandle-exceptions$/ { fullopt=$0; canonopt=deesc("-fhandle-exceptions"); inc=1; do_output(fullopt); next; }
/^-fguiding-decls$/ { fullopt=$0; canonopt=deesc("-fguiding-decls"); inc=1; do_output(fullopt); next; }
/^-fguess-branch-probability$/ { fullopt=$0; canonopt=deesc("-fguess-branch-probability"); inc=1; do_output(fullopt); next; }
/^-fgraphite-identity$/ { fullopt=$0; canonopt=deesc("-fgraphite-identity"); inc=1; do_output(fullopt); next; }
/^-fgraphite$/ { fullopt=$0; canonopt=deesc("-fgraphite"); inc=1; do_output(fullopt); next; }
/^(-fgo-relative-import-path=)(.*)$/ { fullopt=$0; canonopt=deesc("-fgo-relative-import-path"); optarg=gensub(/(-fgo-relative-import-path=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fgo-prefix=)(.*)$/ { fullopt=$0; canonopt=deesc("-fgo-prefix"); optarg=gensub(/(-fgo-prefix=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fgo-pkgpath=)(.*)$/ { fullopt=$0; canonopt=deesc("-fgo-pkgpath"); optarg=gensub(/(-fgo-pkgpath=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fgo-optimize-)(.*)$/ { fullopt=$0; canonopt=deesc("-fgo-optimize-"); optarg=gensub(/(-fgo-optimize-)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fgo-embedcfg=)(.*)$/ { fullopt=$0; canonopt=deesc("-fgo-embedcfg"); optarg=gensub(/(-fgo-embedcfg=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fgo-dump-)(.*)$/ { fullopt=$0; canonopt=deesc("-fgo-dump-"); optarg=gensub(/(-fgo-dump-)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fgo-debug-optimization$/ { fullopt=$0; canonopt=deesc("-fgo-debug-optimization"); inc=1; do_output(fullopt); next; }
/^(-fgo-debug-escape-hash=)(.*)$/ { fullopt=$0; canonopt=deesc("-fgo-debug-escape-hash"); optarg=gensub(/(-fgo-debug-escape-hash=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fgo-debug-escape$/ { fullopt=$0; canonopt=deesc("-fgo-debug-escape"); inc=1; do_output(fullopt); next; }
/^-fgo-compiling-runtime$/ { fullopt=$0; canonopt=deesc("-fgo-compiling-runtime"); inc=1; do_output(fullopt); next; }
/^-fgo-check-divide-zero$/ { fullopt=$0; canonopt=deesc("-fgo-check-divide-zero"); inc=1; do_output(fullopt); next; }
/^-fgo-check-divide-overflow$/ { fullopt=$0; canonopt=deesc("-fgo-check-divide-overflow"); inc=1; do_output(fullopt); next; }
/^(-fgo-c-header=)(.*)$/ { fullopt=$0; canonopt=deesc("-fgo-c-header"); optarg=gensub(/(-fgo-c-header=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fgnu89-inline$/ { fullopt=$0; canonopt=deesc("-fgnu89-inline"); inc=1; do_output(fullopt); next; }
/^-fgnu-unique$/ { fullopt=$0; canonopt=deesc("-fgnu-unique"); inc=1; do_output(fullopt); next; }
/^-fgnu-tm$/ { fullopt=$0; canonopt=deesc("-fgnu-tm"); inc=1; do_output(fullopt); next; }
/^-fgnu-runtime$/ { fullopt=$0; canonopt=deesc("-fgnu-runtime"); inc=1; do_output(fullopt); next; }
/^-fgnu-keywords$/ { fullopt=$0; canonopt=deesc("-fgnu-keywords"); inc=1; do_output(fullopt); next; }
/^(-fgnat-encodings=)(.*)$/ { fullopt=$0; canonopt=deesc("-fgnat-encodings"); optarg=gensub(/(-fgnat-encodings=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fgimple$/ { fullopt=$0; canonopt=deesc("-fgimple"); inc=1; do_output(fullopt); next; }
/^-fgcse-sm$/ { fullopt=$0; canonopt=deesc("-fgcse-sm"); inc=1; do_output(fullopt); next; }
/^-fgcse-lm$/ { fullopt=$0; canonopt=deesc("-fgcse-lm"); inc=1; do_output(fullopt); next; }
/^-fgcse-las$/ { fullopt=$0; canonopt=deesc("-fgcse-las"); inc=1; do_output(fullopt); next; }
/^-fgcse-after-reload$/ { fullopt=$0; canonopt=deesc("-fgcse-after-reload"); inc=1; do_output(fullopt); next; }
/^-fgcse$/ { fullopt=$0; canonopt=deesc("-fgcse"); inc=1; do_output(fullopt); next; }
/^-ffunction-sections$/ { fullopt=$0; canonopt=deesc("-ffunction-sections"); inc=1; do_output(fullopt); next; }
/^-ffunction-cse$/ { fullopt=$0; canonopt=deesc("-ffunction-cse"); inc=1; do_output(fullopt); next; }
/^-ffrontend-optimize$/ { fullopt=$0; canonopt=deesc("-ffrontend-optimize"); inc=1; do_output(fullopt); next; }
/^-ffrontend-loop-interchange$/ { fullopt=$0; canonopt=deesc("-ffrontend-loop-interchange"); inc=1; do_output(fullopt); next; }
/^-ffriend-injection$/ { fullopt=$0; canonopt=deesc("-ffriend-injection"); inc=1; do_output(fullopt); next; }
/^-ffreestanding$/ { fullopt=$0; canonopt=deesc("-ffreestanding"); inc=1; do_output(fullopt); next; }
/^-ffree-line-length-none$/ { fullopt=$0; canonopt=deesc("-ffree-line-length-none"); inc=1; do_output(fullopt); next; }
/^(-ffree-line-length-)(.*)$/ { fullopt=$0; canonopt=deesc("-ffree-line-length-"); optarg=gensub(/(-ffree-line-length-)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-ffree-form$/ { fullopt=$0; canonopt=deesc("-ffree-form"); inc=1; do_output(fullopt); next; }
/^(-ffpe-trap=)(.*)$/ { fullopt=$0; canonopt=deesc("-ffpe-trap"); optarg=gensub(/(-ffpe-trap=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-ffpe-summary=)(.*)$/ { fullopt=$0; canonopt=deesc("-ffpe-summary"); optarg=gensub(/(-ffpe-summary=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-ffp-int-builtin-inexact$/ { fullopt=$0; canonopt=deesc("-ffp-int-builtin-inexact"); inc=1; do_output(fullopt); next; }
/^(-ffp-contract=)(.*)$/ { fullopt=$0; canonopt=deesc("-ffp-contract"); optarg=gensub(/(-ffp-contract=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fforward-propagate$/ { fullopt=$0; canonopt=deesc("-fforward-propagate"); inc=1; do_output(fullopt); next; }
/^-fforce-addr$/ { fullopt=$0; canonopt=deesc("-fforce-addr"); inc=1; do_output(fullopt); next; }
/^-ffor-scope$/ { fullopt=$0; canonopt=deesc("-ffor-scope"); inc=1; do_output(fullopt); next; }
/^-ffloatvalue$/ { fullopt=$0; canonopt=deesc("-ffloatvalue"); inc=1; do_output(fullopt); next; }
/^-ffloat-store$/ { fullopt=$0; canonopt=deesc("-ffloat-store"); inc=1; do_output(fullopt); next; }
/^-ffixed-line-length-none$/ { fullopt=$0; canonopt=deesc("-ffixed-line-length-none"); inc=1; do_output(fullopt); next; }
/^(-ffixed-line-length-)(.*)$/ { fullopt=$0; canonopt=deesc("-ffixed-line-length-"); optarg=gensub(/(-ffixed-line-length-)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-ffixed-form$/ { fullopt=$0; canonopt=deesc("-ffixed-form"); inc=1; do_output(fullopt); next; }
/^(-ffixed-)(.*)$/ { fullopt=$0; canonopt=deesc("-ffixed-"); optarg=gensub(/(-ffixed-)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-ffinite-math-only$/ { fullopt=$0; canonopt=deesc("-ffinite-math-only"); inc=1; do_output(fullopt); next; }
/^-ffinite-loops$/ { fullopt=$0; canonopt=deesc("-ffinite-loops"); inc=1; do_output(fullopt); next; }
/^(-ffile-prefix-map=)(.*)$/ { fullopt=$0; canonopt=deesc("-ffile-prefix-map"); optarg=gensub(/(-ffile-prefix-map=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-ffat-lto-objects$/ { fullopt=$0; canonopt=deesc("-ffat-lto-objects"); inc=1; do_output(fullopt); next; }
/^-ffast-math$/ { fullopt=$0; canonopt=deesc("-ffast-math"); inc=1; do_output(fullopt); next; }
/^-ff2c$/ { fullopt=$0; canonopt=deesc("-ff2c"); inc=1; do_output(fullopt); next; }
/^-fexternal-templates$/ { fullopt=$0; canonopt=deesc("-fexternal-templates"); inc=1; do_output(fullopt); next; }
/^-fexternal-blas$/ { fullopt=$0; canonopt=deesc("-fexternal-blas"); inc=1; do_output(fullopt); next; }
/^-fextern-tls-init$/ { fullopt=$0; canonopt=deesc("-fextern-tls-init"); inc=1; do_output(fullopt); next; }
/^-fextended-opaque$/ { fullopt=$0; canonopt=deesc("-fextended-opaque"); inc=1; do_output(fullopt); next; }
/^-fextended-identifiers$/ { fullopt=$0; canonopt=deesc("-fextended-identifiers"); inc=1; do_output(fullopt); next; }
/^-fext-numeric-literals$/ { fullopt=$0; canonopt=deesc("-fext-numeric-literals"); inc=1; do_output(fullopt); next; }
/^-fexpensive-optimizations$/ { fullopt=$0; canonopt=deesc("-fexpensive-optimizations"); inc=1; do_output(fullopt); next; }
/^(-fexec-charset=)(.*)$/ { fullopt=$0; canonopt=deesc("-fexec-charset"); optarg=gensub(/(-fexec-charset=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fexcess-precision=)(.*)$/ { fullopt=$0; canonopt=deesc("-fexcess-precision"); optarg=gensub(/(-fexcess-precision=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fexceptions$/ { fullopt=$0; canonopt=deesc("-fexceptions"); inc=1; do_output(fullopt); next; }
/^-fenum-int-equiv$/ { fullopt=$0; canonopt=deesc("-fenum-int-equiv"); inc=1; do_output(fullopt); next; }
/^-fenforce-eh-specs$/ { fullopt=$0; canonopt=deesc("-fenforce-eh-specs"); inc=1; do_output(fullopt); next; }
/^(-fenable-)(.*)$/ { fullopt=$0; canonopt=deesc("-fenable-"); optarg=gensub(/(-fenable-)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-femit-struct-debug-reduced$/ { fullopt=$0; canonopt=deesc("-femit-struct-debug-reduced"); inc=1; do_output(fullopt); next; }
/^(-femit-struct-debug-detailed=)(.*)$/ { fullopt=$0; canonopt=deesc("-femit-struct-debug-detailed"); optarg=gensub(/(-femit-struct-debug-detailed=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-femit-struct-debug-baseonly$/ { fullopt=$0; canonopt=deesc("-femit-struct-debug-baseonly"); inc=1; do_output(fullopt); next; }
/^-femit-class-debug-always$/ { fullopt=$0; canonopt=deesc("-femit-class-debug-always"); inc=1; do_output(fullopt); next; }
/^-feliminate-unused-debug-types$/ { fullopt=$0; canonopt=deesc("-feliminate-unused-debug-types"); inc=1; do_output(fullopt); next; }
/^-feliminate-unused-debug-symbols$/ { fullopt=$0; canonopt=deesc("-feliminate-unused-debug-symbols"); inc=1; do_output(fullopt); next; }
/^-feliminate-dwarf2-dups$/ { fullopt=$0; canonopt=deesc("-feliminate-dwarf2-dups"); inc=1; do_output(fullopt); next; }
/^-felide-type$/ { fullopt=$0; canonopt=deesc("-felide-type"); inc=1; do_output(fullopt); next; }
/^-felide-constructors$/ { fullopt=$0; canonopt=deesc("-felide-constructors"); inc=1; do_output(fullopt); next; }
/^-fearly-inlining$/ { fullopt=$0; canonopt=deesc("-fearly-inlining"); inc=1; do_output(fullopt); next; }
/^-fdwarf2-cfi-asm$/ { fullopt=$0; canonopt=deesc("-fdwarf2-cfi-asm"); inc=1; do_output(fullopt); next; }
/^-fdump-unnumbered-links$/ { fullopt=$0; canonopt=deesc("-fdump-unnumbered-links"); inc=1; do_output(fullopt); next; }
/^-fdump-unnumbered$/ { fullopt=$0; canonopt=deesc("-fdump-unnumbered"); inc=1; do_output(fullopt); next; }
/^-fdump-system-exports$/ { fullopt=$0; canonopt=deesc("-fdump-system-exports"); inc=1; do_output(fullopt); next; }
/^-fdump-passes$/ { fullopt=$0; canonopt=deesc("-fdump-passes"); inc=1; do_output(fullopt); next; }
/^-fdump-parse-tree$/ { fullopt=$0; canonopt=deesc("-fdump-parse-tree"); inc=1; do_output(fullopt); next; }
/^-fdump-noaddr$/ { fullopt=$0; canonopt=deesc("-fdump-noaddr"); inc=1; do_output(fullopt); next; }
/^-fdump-internal-locations$/ { fullopt=$0; canonopt=deesc("-fdump-internal-locations"); inc=1; do_output(fullopt); next; }
/^(-fdump-go-spec=)(.*)$/ { fullopt=$0; canonopt=deesc("-fdump-go-spec"); optarg=gensub(/(-fdump-go-spec=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fdump-fortran-original$/ { fullopt=$0; canonopt=deesc("-fdump-fortran-original"); inc=1; do_output(fullopt); next; }
/^-fdump-fortran-optimized$/ { fullopt=$0; canonopt=deesc("-fdump-fortran-optimized"); inc=1; do_output(fullopt); next; }
/^-fdump-fortran-global$/ { fullopt=$0; canonopt=deesc("-fdump-fortran-global"); inc=1; do_output(fullopt); next; }
/^(-fdump-final-insns=)(.*)$/ { fullopt=$0; canonopt=deesc("-fdump-final-insns"); optarg=gensub(/(-fdump-final-insns=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fdump-d-original$/ { fullopt=$0; canonopt=deesc("-fdump-d-original"); inc=1; do_output(fullopt); next; }
/^-fdump-core$/ { fullopt=$0; canonopt=deesc("-fdump-core"); inc=1; do_output(fullopt); next; }
/^-fdump-analyzer-supergraph$/ { fullopt=$0; canonopt=deesc("-fdump-analyzer-supergraph"); inc=1; do_output(fullopt); next; }
/^-fdump-analyzer-stderr$/ { fullopt=$0; canonopt=deesc("-fdump-analyzer-stderr"); inc=1; do_output(fullopt); next; }
/^-fdump-analyzer-state-purge$/ { fullopt=$0; canonopt=deesc("-fdump-analyzer-state-purge"); inc=1; do_output(fullopt); next; }
/^-fdump-analyzer-json$/ { fullopt=$0; canonopt=deesc("-fdump-analyzer-json"); inc=1; do_output(fullopt); next; }
/^-fdump-analyzer-feasibility$/ { fullopt=$0; canonopt=deesc("-fdump-analyzer-feasibility"); inc=1; do_output(fullopt); next; }
/^-fdump-analyzer-exploded-nodes-3$/ { fullopt=$0; canonopt=deesc("-fdump-analyzer-exploded-nodes-3"); inc=1; do_output(fullopt); next; }
/^-fdump-analyzer-exploded-nodes-2$/ { fullopt=$0; canonopt=deesc("-fdump-analyzer-exploded-nodes-2"); inc=1; do_output(fullopt); next; }
/^-fdump-analyzer-exploded-nodes$/ { fullopt=$0; canonopt=deesc("-fdump-analyzer-exploded-nodes"); inc=1; do_output(fullopt); next; }
/^-fdump-analyzer-exploded-graph$/ { fullopt=$0; canonopt=deesc("-fdump-analyzer-exploded-graph"); inc=1; do_output(fullopt); next; }
/^-fdump-analyzer-callgraph$/ { fullopt=$0; canonopt=deesc("-fdump-analyzer-callgraph"); inc=1; do_output(fullopt); next; }
/^-fdump-analyzer$/ { fullopt=$0; canonopt=deesc("-fdump-analyzer"); inc=1; do_output(fullopt); next; }
/^-fdump-ada-spec-slim$/ { fullopt=$0; canonopt=deesc("-fdump-ada-spec-slim"); inc=1; do_output(fullopt); next; }
/^-fdump-ada-spec$/ { fullopt=$0; canonopt=deesc("-fdump-ada-spec"); inc=1; do_output(fullopt); next; }
/^(-fdump-)(.*)$/ { fullopt=$0; canonopt=deesc("-fdump-"); optarg=gensub(/(-fdump-)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fdse$/ { fullopt=$0; canonopt=deesc("-fdse"); inc=1; do_output(fullopt); next; }
/^-fdruntime$/ { fullopt=$0; canonopt=deesc("-fdruntime"); inc=1; do_output(fullopt); next; }
/^-fdollars-in-identifiers$/ { fullopt=$0; canonopt=deesc("-fdollars-in-identifiers"); inc=1; do_output(fullopt); next; }
/^-fdollar-ok$/ { fullopt=$0; canonopt=deesc("-fdollar-ok"); inc=1; do_output(fullopt); next; }
/^(-fdoc-inc=)(.*)$/ { fullopt=$0; canonopt=deesc("-fdoc-inc"); optarg=gensub(/(-fdoc-inc=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fdoc-file=)(.*)$/ { fullopt=$0; canonopt=deesc("-fdoc-file"); optarg=gensub(/(-fdoc-file=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fdoc-dir=)(.*)$/ { fullopt=$0; canonopt=deesc("-fdoc-dir"); optarg=gensub(/(-fdoc-dir=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fdoc$/ { fullopt=$0; canonopt=deesc("-fdoc"); inc=1; do_output(fullopt); next; }
/^(-fdisable-)(.*)$/ { fullopt=$0; canonopt=deesc("-fdisable-"); optarg=gensub(/(-fdisable-)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fdirectives-only$/ { fullopt=$0; canonopt=deesc("-fdirectives-only"); inc=1; do_output(fullopt); next; }
/^(-fdiagnostics-urls=)(.*)$/ { fullopt=$0; canonopt=deesc("-fdiagnostics-urls"); optarg=gensub(/(-fdiagnostics-urls=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fdiagnostics-show-template-tree$/ { fullopt=$0; canonopt=deesc("-fdiagnostics-show-template-tree"); inc=1; do_output(fullopt); next; }
/^-fdiagnostics-show-path-depths$/ { fullopt=$0; canonopt=deesc("-fdiagnostics-show-path-depths"); inc=1; do_output(fullopt); next; }
/^-fdiagnostics-show-option$/ { fullopt=$0; canonopt=deesc("-fdiagnostics-show-option"); inc=1; do_output(fullopt); next; }
/^(-fdiagnostics-show-location=)(.*)$/ { fullopt=$0; canonopt=deesc("-fdiagnostics-show-location"); optarg=gensub(/(-fdiagnostics-show-location=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fdiagnostics-show-line-numbers$/ { fullopt=$0; canonopt=deesc("-fdiagnostics-show-line-numbers"); inc=1; do_output(fullopt); next; }
/^-fdiagnostics-show-labels$/ { fullopt=$0; canonopt=deesc("-fdiagnostics-show-labels"); inc=1; do_output(fullopt); next; }
/^-fdiagnostics-show-cwe$/ { fullopt=$0; canonopt=deesc("-fdiagnostics-show-cwe"); inc=1; do_output(fullopt); next; }
/^-fdiagnostics-show-caret$/ { fullopt=$0; canonopt=deesc("-fdiagnostics-show-caret"); inc=1; do_output(fullopt); next; }
/^-fdiagnostics-plain-output$/ { fullopt=$0; canonopt=deesc("-fdiagnostics-plain-output"); inc=1; do_output(fullopt); next; }
/^(-fdiagnostics-path-format=)(.*)$/ { fullopt=$0; canonopt=deesc("-fdiagnostics-path-format"); optarg=gensub(/(-fdiagnostics-path-format=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fdiagnostics-parseable-fixits$/ { fullopt=$0; canonopt=deesc("-fdiagnostics-parseable-fixits"); inc=1; do_output(fullopt); next; }
/^(-fdiagnostics-minimum-margin-width=)(.*)$/ { fullopt=$0; canonopt=deesc("-fdiagnostics-minimum-margin-width"); optarg=gensub(/(-fdiagnostics-minimum-margin-width=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fdiagnostics-generate-patch$/ { fullopt=$0; canonopt=deesc("-fdiagnostics-generate-patch"); inc=1; do_output(fullopt); next; }
/^(-fdiagnostics-format=)(.*)$/ { fullopt=$0; canonopt=deesc("-fdiagnostics-format"); optarg=gensub(/(-fdiagnostics-format=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fdiagnostics-column-unit=)(.*)$/ { fullopt=$0; canonopt=deesc("-fdiagnostics-column-unit"); optarg=gensub(/(-fdiagnostics-column-unit=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fdiagnostics-column-origin=)(.*)$/ { fullopt=$0; canonopt=deesc("-fdiagnostics-column-origin"); optarg=gensub(/(-fdiagnostics-column-origin=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fdiagnostics-color=)(.*)$/ { fullopt=$0; canonopt=deesc("-fdiagnostics-color"); optarg=gensub(/(-fdiagnostics-color=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fdiagnostics-color$/ { fullopt=$0; canonopt=deesc("-fdiagnostics-color"); inc=1; do_output(fullopt); next; }
/^-fdevirtualize-speculatively$/ { fullopt=$0; canonopt=deesc("-fdevirtualize-speculatively"); inc=1; do_output(fullopt); next; }
/^-fdevirtualize-at-ltrans$/ { fullopt=$0; canonopt=deesc("-fdevirtualize-at-ltrans"); inc=1; do_output(fullopt); next; }
/^-fdevirtualize$/ { fullopt=$0; canonopt=deesc("-fdevirtualize"); inc=1; do_output(fullopt); next; }
/^-fdelete-null-pointer-checks$/ { fullopt=$0; canonopt=deesc("-fdelete-null-pointer-checks"); inc=1; do_output(fullopt); next; }
/^-fdelete-dead-exceptions$/ { fullopt=$0; canonopt=deesc("-fdelete-dead-exceptions"); inc=1; do_output(fullopt); next; }
/^-fdelayed-branch$/ { fullopt=$0; canonopt=deesc("-fdelayed-branch"); inc=1; do_output(fullopt); next; }
/^-fdefer-pop$/ { fullopt=$0; canonopt=deesc("-fdefer-pop"); inc=1; do_output(fullopt); next; }
/^-fdefault-real-8$/ { fullopt=$0; canonopt=deesc("-fdefault-real-8"); inc=1; do_output(fullopt); next; }
/^-fdefault-real-16$/ { fullopt=$0; canonopt=deesc("-fdefault-real-16"); inc=1; do_output(fullopt); next; }
/^-fdefault-real-10$/ { fullopt=$0; canonopt=deesc("-fdefault-real-10"); inc=1; do_output(fullopt); next; }
/^-fdefault-integer-8$/ { fullopt=$0; canonopt=deesc("-fdefault-integer-8"); inc=1; do_output(fullopt); next; }
/^-fdefault-inline$/ { fullopt=$0; canonopt=deesc("-fdefault-inline"); inc=1; do_output(fullopt); next; }
/^-fdefault-double-8$/ { fullopt=$0; canonopt=deesc("-fdefault-double-8"); inc=1; do_output(fullopt); next; }
/^(-fdef=)(.*)$/ { fullopt=$0; canonopt=deesc("-fdef"); optarg=gensub(/(-fdef=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fdeduce-init-list$/ { fullopt=$0; canonopt=deesc("-fdeduce-init-list"); inc=1; do_output(fullopt); next; }
/^-fdeclone-ctor-dtor$/ { fullopt=$0; canonopt=deesc("-fdeclone-ctor-dtor"); inc=1; do_output(fullopt); next; }
/^-fdec-structure$/ { fullopt=$0; canonopt=deesc("-fdec-structure"); inc=1; do_output(fullopt); next; }
/^-fdec-static$/ { fullopt=$0; canonopt=deesc("-fdec-static"); inc=1; do_output(fullopt); next; }
/^-fdec-math$/ { fullopt=$0; canonopt=deesc("-fdec-math"); inc=1; do_output(fullopt); next; }
/^-fdec-intrinsic-ints$/ { fullopt=$0; canonopt=deesc("-fdec-intrinsic-ints"); inc=1; do_output(fullopt); next; }
/^-fdec-include$/ { fullopt=$0; canonopt=deesc("-fdec-include"); inc=1; do_output(fullopt); next; }
/^-fdec-format-defaults$/ { fullopt=$0; canonopt=deesc("-fdec-format-defaults"); inc=1; do_output(fullopt); next; }
/^-fdec-char-conversions$/ { fullopt=$0; canonopt=deesc("-fdec-char-conversions"); inc=1; do_output(fullopt); next; }
/^-fdec-blank-format-item$/ { fullopt=$0; canonopt=deesc("-fdec-blank-format-item"); inc=1; do_output(fullopt); next; }
/^-fdec$/ { fullopt=$0; canonopt=deesc("-fdec"); inc=1; do_output(fullopt); next; }
/^(-fdebug=)(.*)$/ { fullopt=$0; canonopt=deesc("-fdebug"); optarg=gensub(/(-fdebug=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fdebug-types-section$/ { fullopt=$0; canonopt=deesc("-fdebug-types-section"); inc=1; do_output(fullopt); next; }
/^-fdebug-trace-quad$/ { fullopt=$0; canonopt=deesc("-fdebug-trace-quad"); inc=1; do_output(fullopt); next; }
/^-fdebug-trace-api$/ { fullopt=$0; canonopt=deesc("-fdebug-trace-api"); inc=1; do_output(fullopt); next; }
/^(-fdebug-prefix-map=)(.*)$/ { fullopt=$0; canonopt=deesc("-fdebug-prefix-map"); optarg=gensub(/(-fdebug-prefix-map=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fdebug-function-line-numbers$/ { fullopt=$0; canonopt=deesc("-fdebug-function-line-numbers"); inc=1; do_output(fullopt); next; }
/^-fdebug-cpp$/ { fullopt=$0; canonopt=deesc("-fdebug-cpp"); inc=1; do_output(fullopt); next; }
/^-fdebug-builtins$/ { fullopt=$0; canonopt=deesc("-fdebug-builtins"); inc=1; do_output(fullopt); next; }
/^-fdebug-aux-vars$/ { fullopt=$0; canonopt=deesc("-fdebug-aux-vars"); inc=1; do_output(fullopt); next; }
/^-fdebug$/ { fullopt=$0; canonopt=deesc("-fdebug"); inc=1; do_output(fullopt); next; }
/^-fdce$/ { fullopt=$0; canonopt=deesc("-fdce"); inc=1; do_output(fullopt); next; }
/^(-fdbg-cnt=)(.*)$/ { fullopt=$0; canonopt=deesc("-fdbg-cnt"); optarg=gensub(/(-fdbg-cnt=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fdbg-cnt-list$/ { fullopt=$0; canonopt=deesc("-fdbg-cnt-list"); inc=1; do_output(fullopt); next; }
/^-fdata-sections$/ { fullopt=$0; canonopt=deesc("-fdata-sections"); inc=1; do_output(fullopt); next; }
/^-fd-lines-as-comments$/ { fullopt=$0; canonopt=deesc("-fd-lines-as-comments"); inc=1; do_output(fullopt); next; }
/^-fd-lines-as-code$/ { fullopt=$0; canonopt=deesc("-fd-lines-as-code"); inc=1; do_output(fullopt); next; }
/^-fd$/ { fullopt=$0; canonopt=deesc("-fd"); inc=1; do_output(fullopt); next; }
/^-fcx-limited-range$/ { fullopt=$0; canonopt=deesc("-fcx-limited-range"); inc=1; do_output(fullopt); next; }
/^-fcx-fortran-rules$/ { fullopt=$0; canonopt=deesc("-fcx-fortran-rules"); inc=1; do_output(fullopt); next; }
/^-fcse-skip-blocks$/ { fullopt=$0; canonopt=deesc("-fcse-skip-blocks"); inc=1; do_output(fullopt); next; }
/^-fcse-follow-jumps$/ { fullopt=$0; canonopt=deesc("-fcse-follow-jumps"); inc=1; do_output(fullopt); next; }
/^-fcrossjumping$/ { fullopt=$0; canonopt=deesc("-fcrossjumping"); inc=1; do_output(fullopt); next; }
/^-fcray-pointer$/ { fullopt=$0; canonopt=deesc("-fcray-pointer"); inc=1; do_output(fullopt); next; }
/^-fcprop-registers$/ { fullopt=$0; canonopt=deesc("-fcprop-registers"); inc=1; do_output(fullopt); next; }
/^(-fcppprog=)(.*)$/ { fullopt=$0; canonopt=deesc("-fcppprog"); optarg=gensub(/(-fcppprog=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fcppend$/ { fullopt=$0; canonopt=deesc("-fcppend"); inc=1; do_output(fullopt); next; }
/^-fcppbegin$/ { fullopt=$0; canonopt=deesc("-fcppbegin"); inc=1; do_output(fullopt); next; }
/^-fcpp$/ { fullopt=$0; canonopt=deesc("-fcpp"); inc=1; do_output(fullopt); next; }
/^-fcoroutines$/ { fullopt=$0; canonopt=deesc("-fcoroutines"); inc=1; do_output(fullopt); next; }
/^(-fconvert=)(.*)$/ { fullopt=$0; canonopt=deesc("-fconvert"); optarg=gensub(/(-fconvert=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fconstexpr-ops-limit=)(.*)$/ { fullopt=$0; canonopt=deesc("-fconstexpr-ops-limit"); optarg=gensub(/(-fconstexpr-ops-limit=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fconstexpr-loop-limit=)(.*)$/ { fullopt=$0; canonopt=deesc("-fconstexpr-loop-limit"); optarg=gensub(/(-fconstexpr-loop-limit=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fconstexpr-depth=)(.*)$/ { fullopt=$0; canonopt=deesc("-fconstexpr-depth"); optarg=gensub(/(-fconstexpr-depth=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fconstexpr-cache-depth=)(.*)$/ { fullopt=$0; canonopt=deesc("-fconstexpr-cache-depth"); optarg=gensub(/(-fconstexpr-cache-depth=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fconst-string-class=)(.*)$/ { fullopt=$0; canonopt=deesc("-fconst-string-class"); optarg=gensub(/(-fconst-string-class=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fconserve-stack$/ { fullopt=$0; canonopt=deesc("-fconserve-stack"); inc=1; do_output(fullopt); next; }
/^-fconserve-space$/ { fullopt=$0; canonopt=deesc("-fconserve-space"); inc=1; do_output(fullopt); next; }
/^-fcond-mismatch$/ { fullopt=$0; canonopt=deesc("-fcond-mismatch"); inc=1; do_output(fullopt); next; }
/^-fconcepts-ts$/ { fullopt=$0; canonopt=deesc("-fconcepts-ts"); inc=1; do_output(fullopt); next; }
/^(-fconcepts-diagnostics-depth=)(.*)$/ { fullopt=$0; canonopt=deesc("-fconcepts-diagnostics-depth"); optarg=gensub(/(-fconcepts-diagnostics-depth=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fconcepts$/ { fullopt=$0; canonopt=deesc("-fconcepts"); inc=1; do_output(fullopt); next; }
/^-fcompare-elim$/ { fullopt=$0; canonopt=deesc("-fcompare-elim"); inc=1; do_output(fullopt); next; }
/^(-fcompare-debug=)(.*)$/ { fullopt=$0; canonopt=deesc("-fcompare-debug"); optarg=gensub(/(-fcompare-debug=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fcompare-debug-second$/ { fullopt=$0; canonopt=deesc("-fcompare-debug-second"); inc=1; do_output(fullopt); next; }
/^-fcompare-debug$/ { fullopt=$0; canonopt=deesc("-fcompare-debug"); inc=1; do_output(fullopt); next; }
/^-fcommon$/ { fullopt=$0; canonopt=deesc("-fcommon"); inc=1; do_output(fullopt); next; }
/^-fcombine-stack-adjustments$/ { fullopt=$0; canonopt=deesc("-fcombine-stack-adjustments"); inc=1; do_output(fullopt); next; }
/^-fcode-hoisting$/ { fullopt=$0; canonopt=deesc("-fcode-hoisting"); inc=1; do_output(fullopt); next; }
/^(-fcoarray=)(.*)$/ { fullopt=$0; canonopt=deesc("-fcoarray"); optarg=gensub(/(-fcoarray=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fcilkplus$/ { fullopt=$0; canonopt=deesc("-fcilkplus"); inc=1; do_output(fullopt); next; }
/^-fchkp-zero-input-bounds-for-main$/ { fullopt=$0; canonopt=deesc("-fchkp-zero-input-bounds-for-main"); inc=1; do_output(fullopt); next; }
/^-fchkp-use-wrappers$/ { fullopt=$0; canonopt=deesc("-fchkp-use-wrappers"); inc=1; do_output(fullopt); next; }
/^-fchkp-use-static-const-bounds$/ { fullopt=$0; canonopt=deesc("-fchkp-use-static-const-bounds"); inc=1; do_output(fullopt); next; }
/^-fchkp-use-static-bounds$/ { fullopt=$0; canonopt=deesc("-fchkp-use-static-bounds"); inc=1; do_output(fullopt); next; }
/^-fchkp-use-nochk-string-functions$/ { fullopt=$0; canonopt=deesc("-fchkp-use-nochk-string-functions"); inc=1; do_output(fullopt); next; }
/^-fchkp-use-fast-string-functions$/ { fullopt=$0; canonopt=deesc("-fchkp-use-fast-string-functions"); inc=1; do_output(fullopt); next; }
/^-fchkp-treat-zero-dynamic-size-as-infinite$/ { fullopt=$0; canonopt=deesc("-fchkp-treat-zero-dynamic-size-as-infinite"); inc=1; do_output(fullopt); next; }
/^-fchkp-store-bounds$/ { fullopt=$0; canonopt=deesc("-fchkp-store-bounds"); inc=1; do_output(fullopt); next; }
/^-fchkp-optimize$/ { fullopt=$0; canonopt=deesc("-fchkp-optimize"); inc=1; do_output(fullopt); next; }
/^-fchkp-narrow-to-innermost-array$/ { fullopt=$0; canonopt=deesc("-fchkp-narrow-to-innermost-array"); inc=1; do_output(fullopt); next; }
/^-fchkp-narrow-bounds$/ { fullopt=$0; canonopt=deesc("-fchkp-narrow-bounds"); inc=1; do_output(fullopt); next; }
/^-fchkp-instrument-marked-only$/ { fullopt=$0; canonopt=deesc("-fchkp-instrument-marked-only"); inc=1; do_output(fullopt); next; }
/^-fchkp-instrument-calls$/ { fullopt=$0; canonopt=deesc("-fchkp-instrument-calls"); inc=1; do_output(fullopt); next; }
/^-fchkp-flexible-struct-trailing-arrays$/ { fullopt=$0; canonopt=deesc("-fchkp-flexible-struct-trailing-arrays"); inc=1; do_output(fullopt); next; }
/^-fchkp-first-field-has-own-bounds$/ { fullopt=$0; canonopt=deesc("-fchkp-first-field-has-own-bounds"); inc=1; do_output(fullopt); next; }
/^-fchkp-check-write$/ { fullopt=$0; canonopt=deesc("-fchkp-check-write"); inc=1; do_output(fullopt); next; }
/^-fchkp-check-read$/ { fullopt=$0; canonopt=deesc("-fchkp-check-read"); inc=1; do_output(fullopt); next; }
/^-fchkp-check-incomplete-type$/ { fullopt=$0; canonopt=deesc("-fchkp-check-incomplete-type"); inc=1; do_output(fullopt); next; }
/^(-fchecking=)(.*)$/ { fullopt=$0; canonopt=deesc("-fchecking"); optarg=gensub(/(-fchecking=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fchecking$/ { fullopt=$0; canonopt=deesc("-fchecking"); inc=1; do_output(fullopt); next; }
/^(-fcheck=)(.*)$/ { fullopt=$0; canonopt=deesc("-fcheck"); optarg=gensub(/(-fcheck=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fcheck-pointer-bounds$/ { fullopt=$0; canonopt=deesc("-fcheck-pointer-bounds"); inc=1; do_output(fullopt); next; }
/^-fcheck-new$/ { fullopt=$0; canonopt=deesc("-fcheck-new"); inc=1; do_output(fullopt); next; }
/^-fcheck-data-deps$/ { fullopt=$0; canonopt=deesc("-fcheck-data-deps"); inc=1; do_output(fullopt); next; }
/^-fcheck-array-temporaries$/ { fullopt=$0; canonopt=deesc("-fcheck-array-temporaries"); inc=1; do_output(fullopt); next; }
/^-fchar8_t$/ { fullopt=$0; canonopt=deesc("-fchar8_t"); inc=1; do_output(fullopt); next; }
/^(-fcf-protection=)(.*)$/ { fullopt=$0; canonopt=deesc("-fcf-protection"); optarg=gensub(/(-fcf-protection=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fcf-protection$/ { fullopt=$0; canonopt=deesc("-fcf-protection"); inc=1; do_output(fullopt); next; }
/^-fcase$/ { fullopt=$0; canonopt=deesc("-fcase"); inc=1; do_output(fullopt); next; }
/^-fcanonical-system-headers$/ { fullopt=$0; canonopt=deesc("-fcanonical-system-headers"); inc=1; do_output(fullopt); next; }
/^(-fcallgraph-info=)(.*)$/ { fullopt=$0; canonopt=deesc("-fcallgraph-info"); optarg=gensub(/(-fcallgraph-info=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fcallgraph-info$/ { fullopt=$0; canonopt=deesc("-fcallgraph-info"); inc=1; do_output(fullopt); next; }
/^-fcaller-saves$/ { fullopt=$0; canonopt=deesc("-fcaller-saves"); inc=1; do_output(fullopt); next; }
/^(-fcall-used-)(.*)$/ { fullopt=$0; canonopt=deesc("-fcall-used-"); optarg=gensub(/(-fcall-used-)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fcall-saved-)(.*)$/ { fullopt=$0; canonopt=deesc("-fcall-saved-"); optarg=gensub(/(-fcall-saved-)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fc-prototypes-external$/ { fullopt=$0; canonopt=deesc("-fc-prototypes-external"); inc=1; do_output(fullopt); next; }
/^-fc-prototypes$/ { fullopt=$0; canonopt=deesc("-fc-prototypes"); inc=1; do_output(fullopt); next; }
/^-fbuiltin-$/ { fullopt=$0; canonopt=deesc("-fbuiltin-"); inc=1; do_output(fullopt); next; }
/^-fbuiltin$/ { fullopt=$0; canonopt=deesc("-fbuiltin"); inc=1; do_output(fullopt); next; }
/^-fbuilding-libphobos-tests$/ { fullopt=$0; canonopt=deesc("-fbuilding-libphobos-tests"); inc=1; do_output(fullopt); next; }
/^-fbuilding-libgcc$/ { fullopt=$0; canonopt=deesc("-fbuilding-libgcc"); inc=1; do_output(fullopt); next; }
/^-fbtr-bb-exclusive$/ { fullopt=$0; canonopt=deesc("-fbtr-bb-exclusive"); inc=1; do_output(fullopt); next; }
/^-fbranch-target-load-optimize2$/ { fullopt=$0; canonopt=deesc("-fbranch-target-load-optimize2"); inc=1; do_output(fullopt); next; }
/^-fbranch-target-load-optimize$/ { fullopt=$0; canonopt=deesc("-fbranch-target-load-optimize"); inc=1; do_output(fullopt); next; }
/^-fbranch-probabilities$/ { fullopt=$0; canonopt=deesc("-fbranch-probabilities"); inc=1; do_output(fullopt); next; }
/^-fbranch-count-reg$/ { fullopt=$0; canonopt=deesc("-fbranch-count-reg"); inc=1; do_output(fullopt); next; }
/^(-fbounds-check=)(.*)$/ { fullopt=$0; canonopt=deesc("-fbounds-check"); optarg=gensub(/(-fbounds-check=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fbounds-check$/ { fullopt=$0; canonopt=deesc("-fbounds-check"); inc=1; do_output(fullopt); next; }
/^-fbounds$/ { fullopt=$0; canonopt=deesc("-fbounds"); inc=1; do_output(fullopt); next; }
/^(-fblas-matmul-limit=)(.*)$/ { fullopt=$0; canonopt=deesc("-fblas-matmul-limit"); optarg=gensub(/(-fblas-matmul-limit=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fbit-tests$/ { fullopt=$0; canonopt=deesc("-fbit-tests"); inc=1; do_output(fullopt); next; }
/^-fbacktrace$/ { fullopt=$0; canonopt=deesc("-fbacktrace"); inc=1; do_output(fullopt); next; }
/^-fbackslash$/ { fullopt=$0; canonopt=deesc("-fbackslash"); inc=1; do_output(fullopt); next; }
/^-fautomatic$/ { fullopt=$0; canonopt=deesc("-fautomatic"); inc=1; do_output(fullopt); next; }
/^(-fauto-profile=)(.*)$/ { fullopt=$0; canonopt=deesc("-fauto-profile"); optarg=gensub(/(-fauto-profile=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fauto-profile$/ { fullopt=$0; canonopt=deesc("-fauto-profile"); inc=1; do_output(fullopt); next; }
/^-fauto-init$/ { fullopt=$0; canonopt=deesc("-fauto-init"); inc=1; do_output(fullopt); next; }
/^-fauto-inc-dec$/ { fullopt=$0; canonopt=deesc("-fauto-inc-dec"); inc=1; do_output(fullopt); next; }
/^-fasynchronous-unwind-tables$/ { fullopt=$0; canonopt=deesc("-fasynchronous-unwind-tables"); inc=1; do_output(fullopt); next; }
/^-fassociative-math$/ { fullopt=$0; canonopt=deesc("-fassociative-math"); inc=1; do_output(fullopt); next; }
/^-fassert$/ { fullopt=$0; canonopt=deesc("-fassert"); inc=1; do_output(fullopt); next; }
/^-fasm$/ { fullopt=$0; canonopt=deesc("-fasm"); inc=1; do_output(fullopt); next; }
/^(-fasan-shadow-offset=)(.*)$/ { fullopt=$0; canonopt=deesc("-fasan-shadow-offset"); optarg=gensub(/(-fasan-shadow-offset=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fargument-noalias-global$/ { fullopt=$0; canonopt=deesc("-fargument-noalias-global"); inc=1; do_output(fullopt); next; }
/^-fargument-noalias-anything$/ { fullopt=$0; canonopt=deesc("-fargument-noalias-anything"); inc=1; do_output(fullopt); next; }
/^-fargument-noalias$/ { fullopt=$0; canonopt=deesc("-fargument-noalias"); inc=1; do_output(fullopt); next; }
/^-fargument-alias$/ { fullopt=$0; canonopt=deesc("-fargument-alias"); inc=1; do_output(fullopt); next; }
/^(-fanalyzer-verbosity=)(.*)$/ { fullopt=$0; canonopt=deesc("-fanalyzer-verbosity"); optarg=gensub(/(-fanalyzer-verbosity=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fanalyzer-verbose-state-changes$/ { fullopt=$0; canonopt=deesc("-fanalyzer-verbose-state-changes"); inc=1; do_output(fullopt); next; }
/^-fanalyzer-verbose-edges$/ { fullopt=$0; canonopt=deesc("-fanalyzer-verbose-edges"); inc=1; do_output(fullopt); next; }
/^-fanalyzer-transitivity$/ { fullopt=$0; canonopt=deesc("-fanalyzer-transitivity"); inc=1; do_output(fullopt); next; }
/^-fanalyzer-state-purge$/ { fullopt=$0; canonopt=deesc("-fanalyzer-state-purge"); inc=1; do_output(fullopt); next; }
/^-fanalyzer-state-merge$/ { fullopt=$0; canonopt=deesc("-fanalyzer-state-merge"); inc=1; do_output(fullopt); next; }
/^-fanalyzer-show-duplicate-count$/ { fullopt=$0; canonopt=deesc("-fanalyzer-show-duplicate-count"); inc=1; do_output(fullopt); next; }
/^-fanalyzer-fine-grained$/ { fullopt=$0; canonopt=deesc("-fanalyzer-fine-grained"); inc=1; do_output(fullopt); next; }
/^-fanalyzer-feasibility$/ { fullopt=$0; canonopt=deesc("-fanalyzer-feasibility"); inc=1; do_output(fullopt); next; }
/^(-fanalyzer-checker=)(.*)$/ { fullopt=$0; canonopt=deesc("-fanalyzer-checker"); optarg=gensub(/(-fanalyzer-checker=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fanalyzer-call-summaries$/ { fullopt=$0; canonopt=deesc("-fanalyzer-call-summaries"); inc=1; do_output(fullopt); next; }
/^-fanalyzer$/ { fullopt=$0; canonopt=deesc("-fanalyzer"); inc=1; do_output(fullopt); next; }
/^-falt-external-templates$/ { fullopt=$0; canonopt=deesc("-falt-external-templates"); inc=1; do_output(fullopt); next; }
/^-fallow-store-data-races$/ { fullopt=$0; canonopt=deesc("-fallow-store-data-races"); inc=1; do_output(fullopt); next; }
/^-fallow-parameterless-variadic-functions$/ { fullopt=$0; canonopt=deesc("-fallow-parameterless-variadic-functions"); inc=1; do_output(fullopt); next; }
/^-fallow-leading-underscore$/ { fullopt=$0; canonopt=deesc("-fallow-leading-underscore"); inc=1; do_output(fullopt); next; }
/^-fallow-invalid-boz$/ { fullopt=$0; canonopt=deesc("-fallow-invalid-boz"); inc=1; do_output(fullopt); next; }
/^-fallow-argument-mismatch$/ { fullopt=$0; canonopt=deesc("-fallow-argument-mismatch"); inc=1; do_output(fullopt); next; }
/^-fallocation-dce$/ { fullopt=$0; canonopt=deesc("-fallocation-dce"); inc=1; do_output(fullopt); next; }
/^-fall-virtual$/ { fullopt=$0; canonopt=deesc("-fall-virtual"); inc=1; do_output(fullopt); next; }
/^-fall-intrinsics$/ { fullopt=$0; canonopt=deesc("-fall-intrinsics"); inc=1; do_output(fullopt); next; }
/^-fall-instantiations$/ { fullopt=$0; canonopt=deesc("-fall-instantiations"); inc=1; do_output(fullopt); next; }
/^(-faligned-new=)(.*)$/ { fullopt=$0; canonopt=deesc("-faligned-new"); optarg=gensub(/(-faligned-new=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-faligned-new$/ { fullopt=$0; canonopt=deesc("-faligned-new"); inc=1; do_output(fullopt); next; }
/^(-falign-loops=)(.*)$/ { fullopt=$0; canonopt=deesc("-falign-loops"); optarg=gensub(/(-falign-loops=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-falign-loops$/ { fullopt=$0; canonopt=deesc("-falign-loops"); inc=1; do_output(fullopt); next; }
/^(-falign-labels=)(.*)$/ { fullopt=$0; canonopt=deesc("-falign-labels"); optarg=gensub(/(-falign-labels=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-falign-labels$/ { fullopt=$0; canonopt=deesc("-falign-labels"); inc=1; do_output(fullopt); next; }
/^(-falign-jumps=)(.*)$/ { fullopt=$0; canonopt=deesc("-falign-jumps"); optarg=gensub(/(-falign-jumps=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-falign-jumps$/ { fullopt=$0; canonopt=deesc("-falign-jumps"); inc=1; do_output(fullopt); next; }
/^(-falign-functions=)(.*)$/ { fullopt=$0; canonopt=deesc("-falign-functions"); optarg=gensub(/(-falign-functions=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-falign-functions$/ { fullopt=$0; canonopt=deesc("-falign-functions"); inc=1; do_output(fullopt); next; }
/^-falign-commons$/ { fullopt=$0; canonopt=deesc("-falign-commons"); inc=1; do_output(fullopt); next; }
/^-faggressive-loop-optimizations$/ { fullopt=$0; canonopt=deesc("-faggressive-loop-optimizations"); inc=1; do_output(fullopt); next; }
/^-faggressive-function-elimination$/ { fullopt=$0; canonopt=deesc("-faggressive-function-elimination"); inc=1; do_output(fullopt); next; }
/^(-fada-spec-parent=)(.*)$/ { fullopt=$0; canonopt=deesc("-fada-spec-parent"); optarg=gensub(/(-fada-spec-parent=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-faccess-control$/ { fullopt=$0; canonopt=deesc("-faccess-control"); inc=1; do_output(fullopt); next; }
/^(-fabi-version=)(.*)$/ { fullopt=$0; canonopt=deesc("-fabi-version"); optarg=gensub(/(-fabi-version=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fabi-compat-version=)(.*)$/ { fullopt=$0; canonopt=deesc("-fabi-compat-version"); optarg=gensub(/(-fabi-compat-version=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fRTS=)(.*)$/ { fullopt=$0; canonopt=deesc("-fRTS"); optarg=gensub(/(-fRTS=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fPIE$/ { fullopt=$0; canonopt=deesc("-fPIE"); inc=1; do_output(fullopt); next; }
/^-fPIC$/ { fullopt=$0; canonopt=deesc("-fPIC"); inc=1; do_output(fullopt); next; }
/^(-dumpdir)$/     { fullopt=$0; canonopt=deesc("-dumpdir"); snarfing_optarg=1; inc=2; next; }
/^(-dumpbase)$/     { fullopt=$0; canonopt=deesc("-dumpbase"); snarfing_optarg=1; inc=2; next; }
/^(-dumpbase-ext)$/     { fullopt=$0; canonopt=deesc("-dumpbase-ext"); snarfing_optarg=1; inc=2; next; }
/^(-dump-level=)(.*)$/ { fullopt=$0; canonopt=deesc("-dump-level"); optarg=gensub(/(-dump-level=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-dump-body=)(.*)$/ { fullopt=$0; canonopt=deesc("-dump-body"); optarg=gensub(/(-dump-body=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-demangle$/ { fullopt=$0; canonopt=deesc("-demangle"); inc=1; do_output(fullopt); next; }
/^-defined-only$/ { fullopt=$0; canonopt=deesc("-defined-only"); inc=1; do_output(fullopt); next; }
/^(-d)$/     { fullopt=$0; canonopt=deesc("-d"); snarfing_optarg=1; inc=2; next; }
/^(-d)(.*)$/ { fullopt=$0; canonopt=deesc("-d"); optarg=gensub(/(-d)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-cpp=)(.*)$/ { fullopt=$0; canonopt=deesc("-cpp"); optarg=gensub(/(-cpp=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-cpp$/ { fullopt=$0; canonopt=deesc("-cpp"); inc=1; do_output(fullopt); next; }
/^-callgraph$/ { fullopt=$0; canonopt=deesc("-callgraph"); inc=1; do_output(fullopt); next; }
/^(-aux-info)$/     { fullopt=$0; canonopt=deesc("-aux-info"); snarfing_optarg=1; inc=2; next; }
/^(-aux-info=)(.*)$/ { fullopt=$0; canonopt=deesc("-aux-info"); optarg=gensub(/(-aux-info=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-ansi$/ { fullopt=$0; canonopt=deesc("-ansi"); inc=1; do_output(fullopt); next; }
/^(-Xf)$/     { fullopt=$0; canonopt=deesc("-Xf"); snarfing_optarg=1; inc=2; next; }
/^-X$/ { fullopt=$0; canonopt=deesc("-X"); inc=1; do_output(fullopt); next; }
/^-Wzerotrip$/ { fullopt=$0; canonopt=deesc("-Wzerotrip"); inc=1; do_output(fullopt); next; }
/^-Wzero-length-bounds$/ { fullopt=$0; canonopt=deesc("-Wzero-length-bounds"); inc=1; do_output(fullopt); next; }
/^-Wzero-as-null-pointer-constant$/ { fullopt=$0; canonopt=deesc("-Wzero-as-null-pointer-constant"); inc=1; do_output(fullopt); next; }
/^-Wwrite-strings$/ { fullopt=$0; canonopt=deesc("-Wwrite-strings"); inc=1; do_output(fullopt); next; }
/^-Wvolatile-register-var$/ { fullopt=$0; canonopt=deesc("-Wvolatile-register-var"); inc=1; do_output(fullopt); next; }
/^-Wvolatile$/ { fullopt=$0; canonopt=deesc("-Wvolatile"); inc=1; do_output(fullopt); next; }
/^-Wvla-parameter$/ { fullopt=$0; canonopt=deesc("-Wvla-parameter"); inc=1; do_output(fullopt); next; }
/^(-Wvla-larger-than=)(.*)$/ { fullopt=$0; canonopt=deesc("-Wvla-larger-than"); optarg=gensub(/(-Wvla-larger-than=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Wvla$/ { fullopt=$0; canonopt=deesc("-Wvla"); inc=1; do_output(fullopt); next; }
/^-Wvirtual-move-assign$/ { fullopt=$0; canonopt=deesc("-Wvirtual-move-assign"); inc=1; do_output(fullopt); next; }
/^-Wvirtual-inheritance$/ { fullopt=$0; canonopt=deesc("-Wvirtual-inheritance"); inc=1; do_output(fullopt); next; }
/^-Wvexing-parse$/ { fullopt=$0; canonopt=deesc("-Wvexing-parse"); inc=1; do_output(fullopt); next; }
/^-Wverbose-unbounded$/ { fullopt=$0; canonopt=deesc("-Wverbose-unbounded"); inc=1; do_output(fullopt); next; }
/^-Wvector-operation-performance$/ { fullopt=$0; canonopt=deesc("-Wvector-operation-performance"); inc=1; do_output(fullopt); next; }
/^-Wvariadic-macros$/ { fullopt=$0; canonopt=deesc("-Wvariadic-macros"); inc=1; do_output(fullopt); next; }
/^-Wvarargs$/ { fullopt=$0; canonopt=deesc("-Wvarargs"); inc=1; do_output(fullopt); next; }
/^-Wuseless-cast$/ { fullopt=$0; canonopt=deesc("-Wuseless-cast"); inc=1; do_output(fullopt); next; }
/^-Wuse-without-only$/ { fullopt=$0; canonopt=deesc("-Wuse-without-only"); inc=1; do_output(fullopt); next; }
/^-Wunused-variable$/ { fullopt=$0; canonopt=deesc("-Wunused-variable"); inc=1; do_output(fullopt); next; }
/^-Wunused-value$/ { fullopt=$0; canonopt=deesc("-Wunused-value"); inc=1; do_output(fullopt); next; }
/^-Wunused-result$/ { fullopt=$0; canonopt=deesc("-Wunused-result"); inc=1; do_output(fullopt); next; }
/^-Wunused-parameter$/ { fullopt=$0; canonopt=deesc("-Wunused-parameter"); inc=1; do_output(fullopt); next; }
/^-Wunused-macros$/ { fullopt=$0; canonopt=deesc("-Wunused-macros"); inc=1; do_output(fullopt); next; }
/^-Wunused-local-typedefs$/ { fullopt=$0; canonopt=deesc("-Wunused-local-typedefs"); inc=1; do_output(fullopt); next; }
/^-Wunused-label$/ { fullopt=$0; canonopt=deesc("-Wunused-label"); inc=1; do_output(fullopt); next; }
/^-Wunused-function$/ { fullopt=$0; canonopt=deesc("-Wunused-function"); inc=1; do_output(fullopt); next; }
/^-Wunused-dummy-argument$/ { fullopt=$0; canonopt=deesc("-Wunused-dummy-argument"); inc=1; do_output(fullopt); next; }
/^(-Wunused-const-variable=)(.*)$/ { fullopt=$0; canonopt=deesc("-Wunused-const-variable"); optarg=gensub(/(-Wunused-const-variable=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Wunused-const-variable$/ { fullopt=$0; canonopt=deesc("-Wunused-const-variable"); inc=1; do_output(fullopt); next; }
/^-Wunused-but-set-variable$/ { fullopt=$0; canonopt=deesc("-Wunused-but-set-variable"); inc=1; do_output(fullopt); next; }
/^-Wunused-but-set-parameter$/ { fullopt=$0; canonopt=deesc("-Wunused-but-set-parameter"); inc=1; do_output(fullopt); next; }
/^-Wunused$/ { fullopt=$0; canonopt=deesc("-Wunused"); inc=1; do_output(fullopt); next; }
/^-Wunsuffixed-float-constants$/ { fullopt=$0; canonopt=deesc("-Wunsuffixed-float-constants"); inc=1; do_output(fullopt); next; }
/^-Wunsafe-loop-optimizations$/ { fullopt=$0; canonopt=deesc("-Wunsafe-loop-optimizations"); inc=1; do_output(fullopt); next; }
/^-Wunreachable-code$/ { fullopt=$0; canonopt=deesc("-Wunreachable-code"); inc=1; do_output(fullopt); next; }
/^-Wunknown-pragmas$/ { fullopt=$0; canonopt=deesc("-Wunknown-pragmas"); inc=1; do_output(fullopt); next; }
/^-Wuninitialized$/ { fullopt=$0; canonopt=deesc("-Wuninitialized"); inc=1; do_output(fullopt); next; }
/^-Wunderflow$/ { fullopt=$0; canonopt=deesc("-Wunderflow"); inc=1; do_output(fullopt); next; }
/^-Wundefined-do-loop$/ { fullopt=$0; canonopt=deesc("-Wundefined-do-loop"); inc=1; do_output(fullopt); next; }
/^-Wundef$/ { fullopt=$0; canonopt=deesc("-Wundef"); inc=1; do_output(fullopt); next; }
/^-Wundeclared-selector$/ { fullopt=$0; canonopt=deesc("-Wundeclared-selector"); inc=1; do_output(fullopt); next; }
/^-Wtype-limits$/ { fullopt=$0; canonopt=deesc("-Wtype-limits"); inc=1; do_output(fullopt); next; }
/^-Wtsan$/ { fullopt=$0; canonopt=deesc("-Wtsan"); inc=1; do_output(fullopt); next; }
/^-Wtrigraphs$/ { fullopt=$0; canonopt=deesc("-Wtrigraphs"); inc=1; do_output(fullopt); next; }
/^-Wtrampolines$/ { fullopt=$0; canonopt=deesc("-Wtrampolines"); inc=1; do_output(fullopt); next; }
/^-Wtraditional-conversion$/ { fullopt=$0; canonopt=deesc("-Wtraditional-conversion"); inc=1; do_output(fullopt); next; }
/^-Wtraditional$/ { fullopt=$0; canonopt=deesc("-Wtraditional"); inc=1; do_output(fullopt); next; }
/^-Wterminate$/ { fullopt=$0; canonopt=deesc("-Wterminate"); inc=1; do_output(fullopt); next; }
/^-Wtemplates$/ { fullopt=$0; canonopt=deesc("-Wtemplates"); inc=1; do_output(fullopt); next; }
/^-Wtautological-compare$/ { fullopt=$0; canonopt=deesc("-Wtautological-compare"); inc=1; do_output(fullopt); next; }
/^-Wtarget-lifetime$/ { fullopt=$0; canonopt=deesc("-Wtarget-lifetime"); inc=1; do_output(fullopt); next; }
/^-Wtabs$/ { fullopt=$0; canonopt=deesc("-Wtabs"); inc=1; do_output(fullopt); next; }
/^-Wsystem-headers$/ { fullopt=$0; canonopt=deesc("-Wsystem-headers"); inc=1; do_output(fullopt); next; }
/^-Wsynth$/ { fullopt=$0; canonopt=deesc("-Wsynth"); inc=1; do_output(fullopt); next; }
/^-Wsync-nand$/ { fullopt=$0; canonopt=deesc("-Wsync-nand"); inc=1; do_output(fullopt); next; }
/^-Wswitch-unreachable$/ { fullopt=$0; canonopt=deesc("-Wswitch-unreachable"); inc=1; do_output(fullopt); next; }
/^-Wswitch-outside-range$/ { fullopt=$0; canonopt=deesc("-Wswitch-outside-range"); inc=1; do_output(fullopt); next; }
/^-Wswitch-enum$/ { fullopt=$0; canonopt=deesc("-Wswitch-enum"); inc=1; do_output(fullopt); next; }
/^-Wswitch-default$/ { fullopt=$0; canonopt=deesc("-Wswitch-default"); inc=1; do_output(fullopt); next; }
/^-Wswitch-bool$/ { fullopt=$0; canonopt=deesc("-Wswitch-bool"); inc=1; do_output(fullopt); next; }
/^-Wswitch$/ { fullopt=$0; canonopt=deesc("-Wswitch"); inc=1; do_output(fullopt); next; }
/^-Wsurprising$/ { fullopt=$0; canonopt=deesc("-Wsurprising"); inc=1; do_output(fullopt); next; }
/^-Wsuggest-override$/ { fullopt=$0; canonopt=deesc("-Wsuggest-override"); inc=1; do_output(fullopt); next; }
/^-Wsuggest-final-types$/ { fullopt=$0; canonopt=deesc("-Wsuggest-final-types"); inc=1; do_output(fullopt); next; }
/^-Wsuggest-final-methods$/ { fullopt=$0; canonopt=deesc("-Wsuggest-final-methods"); inc=1; do_output(fullopt); next; }
/^(-Wsuggest-attribute=)(.*)$/ { fullopt=$0; canonopt=deesc("-Wsuggest-attribute"); optarg=gensub(/(-Wsuggest-attribute=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Wsubobject-linkage$/ { fullopt=$0; canonopt=deesc("-Wsubobject-linkage"); inc=1; do_output(fullopt); next; }
/^-Wstudents$/ { fullopt=$0; canonopt=deesc("-Wstudents"); inc=1; do_output(fullopt); next; }
/^-Wstringop-truncation$/ { fullopt=$0; canonopt=deesc("-Wstringop-truncation"); inc=1; do_output(fullopt); next; }
/^-Wstringop-overread$/ { fullopt=$0; canonopt=deesc("-Wstringop-overread"); inc=1; do_output(fullopt); next; }
/^(-Wstringop-overflow=)(.*)$/ { fullopt=$0; canonopt=deesc("-Wstringop-overflow"); optarg=gensub(/(-Wstringop-overflow=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Wstringop-overflow$/ { fullopt=$0; canonopt=deesc("-Wstringop-overflow"); inc=1; do_output(fullopt); next; }
/^-Wstring-compare$/ { fullopt=$0; canonopt=deesc("-Wstring-compare"); inc=1; do_output(fullopt); next; }
/^-Wstrict-selector-match$/ { fullopt=$0; canonopt=deesc("-Wstrict-selector-match"); inc=1; do_output(fullopt); next; }
/^-Wstrict-prototypes$/ { fullopt=$0; canonopt=deesc("-Wstrict-prototypes"); inc=1; do_output(fullopt); next; }
/^(-Wstrict-overflow=)(.*)$/ { fullopt=$0; canonopt=deesc("-Wstrict-overflow"); optarg=gensub(/(-Wstrict-overflow=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Wstrict-overflow$/ { fullopt=$0; canonopt=deesc("-Wstrict-overflow"); inc=1; do_output(fullopt); next; }
/^-Wstrict-null-sentinel$/ { fullopt=$0; canonopt=deesc("-Wstrict-null-sentinel"); inc=1; do_output(fullopt); next; }
/^(-Wstrict-aliasing=)(.*)$/ { fullopt=$0; canonopt=deesc("-Wstrict-aliasing"); optarg=gensub(/(-Wstrict-aliasing=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Wstrict-aliasing$/ { fullopt=$0; canonopt=deesc("-Wstrict-aliasing"); inc=1; do_output(fullopt); next; }
/^(-Wstack-usage=)(.*)$/ { fullopt=$0; canonopt=deesc("-Wstack-usage"); optarg=gensub(/(-Wstack-usage=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Wstack-protector$/ { fullopt=$0; canonopt=deesc("-Wstack-protector"); inc=1; do_output(fullopt); next; }
/^-Wspeculative$/ { fullopt=$0; canonopt=deesc("-Wspeculative"); inc=1; do_output(fullopt); next; }
/^-Wsizeof-pointer-memaccess$/ { fullopt=$0; canonopt=deesc("-Wsizeof-pointer-memaccess"); inc=1; do_output(fullopt); next; }
/^-Wsizeof-pointer-div$/ { fullopt=$0; canonopt=deesc("-Wsizeof-pointer-div"); inc=1; do_output(fullopt); next; }
/^-Wsizeof-array-div$/ { fullopt=$0; canonopt=deesc("-Wsizeof-array-div"); inc=1; do_output(fullopt); next; }
/^-Wsizeof-array-argument$/ { fullopt=$0; canonopt=deesc("-Wsizeof-array-argument"); inc=1; do_output(fullopt); next; }
/^-Wsized-deallocation$/ { fullopt=$0; canonopt=deesc("-Wsized-deallocation"); inc=1; do_output(fullopt); next; }
/^-Wsign-promo$/ { fullopt=$0; canonopt=deesc("-Wsign-promo"); inc=1; do_output(fullopt); next; }
/^-Wsign-conversion$/ { fullopt=$0; canonopt=deesc("-Wsign-conversion"); inc=1; do_output(fullopt); next; }
/^-Wsign-compare$/ { fullopt=$0; canonopt=deesc("-Wsign-compare"); inc=1; do_output(fullopt); next; }
/^(-Wshift-overflow=)(.*)$/ { fullopt=$0; canonopt=deesc("-Wshift-overflow"); optarg=gensub(/(-Wshift-overflow=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Wshift-overflow$/ { fullopt=$0; canonopt=deesc("-Wshift-overflow"); inc=1; do_output(fullopt); next; }
/^-Wshift-negative-value$/ { fullopt=$0; canonopt=deesc("-Wshift-negative-value"); inc=1; do_output(fullopt); next; }
/^-Wshift-count-overflow$/ { fullopt=$0; canonopt=deesc("-Wshift-count-overflow"); inc=1; do_output(fullopt); next; }
/^-Wshift-count-negative$/ { fullopt=$0; canonopt=deesc("-Wshift-count-negative"); inc=1; do_output(fullopt); next; }
/^(-Wshadow=)(.*)$/ { fullopt=$0; canonopt=deesc("-Wshadow"); optarg=gensub(/(-Wshadow=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Wshadow-local$/ { fullopt=$0; canonopt=deesc("-Wshadow-local"); inc=1; do_output(fullopt); next; }
/^-Wshadow-ivar$/ { fullopt=$0; canonopt=deesc("-Wshadow-ivar"); inc=1; do_output(fullopt); next; }
/^-Wshadow-compatible-local$/ { fullopt=$0; canonopt=deesc("-Wshadow-compatible-local"); inc=1; do_output(fullopt); next; }
/^-Wshadow$/ { fullopt=$0; canonopt=deesc("-Wshadow"); inc=1; do_output(fullopt); next; }
/^-Wsequence-point$/ { fullopt=$0; canonopt=deesc("-Wsequence-point"); inc=1; do_output(fullopt); next; }
/^-Wselector$/ { fullopt=$0; canonopt=deesc("-Wselector"); inc=1; do_output(fullopt); next; }
/^-Wscalar-storage-order$/ { fullopt=$0; canonopt=deesc("-Wscalar-storage-order"); inc=1; do_output(fullopt); next; }
/^-Wreturn-type$/ { fullopt=$0; canonopt=deesc("-Wreturn-type"); inc=1; do_output(fullopt); next; }
/^-Wreturn-local-addr$/ { fullopt=$0; canonopt=deesc("-Wreturn-local-addr"); inc=1; do_output(fullopt); next; }
/^-Wrestrict$/ { fullopt=$0; canonopt=deesc("-Wrestrict"); inc=1; do_output(fullopt); next; }
/^-Wreorder$/ { fullopt=$0; canonopt=deesc("-Wreorder"); inc=1; do_output(fullopt); next; }
/^-Wregister$/ { fullopt=$0; canonopt=deesc("-Wregister"); inc=1; do_output(fullopt); next; }
/^-Wredundant-tags$/ { fullopt=$0; canonopt=deesc("-Wredundant-tags"); inc=1; do_output(fullopt); next; }
/^-Wredundant-move$/ { fullopt=$0; canonopt=deesc("-Wredundant-move"); inc=1; do_output(fullopt); next; }
/^-Wredundant-decls$/ { fullopt=$0; canonopt=deesc("-Wredundant-decls"); inc=1; do_output(fullopt); next; }
/^-Wrealloc-lhs-all$/ { fullopt=$0; canonopt=deesc("-Wrealloc-lhs-all"); inc=1; do_output(fullopt); next; }
/^-Wrealloc-lhs$/ { fullopt=$0; canonopt=deesc("-Wrealloc-lhs"); inc=1; do_output(fullopt); next; }
/^-Wreal-q-constant$/ { fullopt=$0; canonopt=deesc("-Wreal-q-constant"); inc=1; do_output(fullopt); next; }
/^-Wrange-loop-construct$/ { fullopt=$0; canonopt=deesc("-Wrange-loop-construct"); inc=1; do_output(fullopt); next; }
/^-Wpsabi$/ { fullopt=$0; canonopt=deesc("-Wpsabi"); inc=1; do_output(fullopt); next; }
/^-Wprotocol$/ { fullopt=$0; canonopt=deesc("-Wprotocol"); inc=1; do_output(fullopt); next; }
/^-Wproperty-assign-default$/ { fullopt=$0; canonopt=deesc("-Wproperty-assign-default"); inc=1; do_output(fullopt); next; }
/^-Wprio-ctor-dtor$/ { fullopt=$0; canonopt=deesc("-Wprio-ctor-dtor"); inc=1; do_output(fullopt); next; }
/^-Wpragmas$/ { fullopt=$0; canonopt=deesc("-Wpragmas"); inc=1; do_output(fullopt); next; }
/^-Wpointer-to-int-cast$/ { fullopt=$0; canonopt=deesc("-Wpointer-to-int-cast"); inc=1; do_output(fullopt); next; }
/^-Wpointer-sign$/ { fullopt=$0; canonopt=deesc("-Wpointer-sign"); inc=1; do_output(fullopt); next; }
/^-Wpointer-compare$/ { fullopt=$0; canonopt=deesc("-Wpointer-compare"); inc=1; do_output(fullopt); next; }
/^-Wpointer-arith$/ { fullopt=$0; canonopt=deesc("-Wpointer-arith"); inc=1; do_output(fullopt); next; }
/^-Wpmf-conversions$/ { fullopt=$0; canonopt=deesc("-Wpmf-conversions"); inc=1; do_output(fullopt); next; }
/^(-Wplacement-new=)(.*)$/ { fullopt=$0; canonopt=deesc("-Wplacement-new"); optarg=gensub(/(-Wplacement-new=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Wplacement-new$/ { fullopt=$0; canonopt=deesc("-Wplacement-new"); inc=1; do_output(fullopt); next; }
/^-Wpessimizing-move$/ { fullopt=$0; canonopt=deesc("-Wpessimizing-move"); inc=1; do_output(fullopt); next; }
/^-Wpedantic-param-names$/ { fullopt=$0; canonopt=deesc("-Wpedantic-param-names"); inc=1; do_output(fullopt); next; }
/^-Wpedantic-cast$/ { fullopt=$0; canonopt=deesc("-Wpedantic-cast"); inc=1; do_output(fullopt); next; }
/^-Wpedantic$/ { fullopt=$0; canonopt=deesc("-Wpedantic"); inc=1; do_output(fullopt); next; }
/^-Wparentheses$/ { fullopt=$0; canonopt=deesc("-Wparentheses"); inc=1; do_output(fullopt); next; }
/^-Wpadded$/ { fullopt=$0; canonopt=deesc("-Wpadded"); inc=1; do_output(fullopt); next; }
/^-Wpacked-not-aligned$/ { fullopt=$0; canonopt=deesc("-Wpacked-not-aligned"); inc=1; do_output(fullopt); next; }
/^-Wpacked-bitfield-compat$/ { fullopt=$0; canonopt=deesc("-Wpacked-bitfield-compat"); inc=1; do_output(fullopt); next; }
/^-Wpacked$/ { fullopt=$0; canonopt=deesc("-Wpacked"); inc=1; do_output(fullopt); next; }
/^-Woverwrite-recursive$/ { fullopt=$0; canonopt=deesc("-Woverwrite-recursive"); inc=1; do_output(fullopt); next; }
/^-Woverride-init-side-effects$/ { fullopt=$0; canonopt=deesc("-Woverride-init-side-effects"); inc=1; do_output(fullopt); next; }
/^-Woverride-init$/ { fullopt=$0; canonopt=deesc("-Woverride-init"); inc=1; do_output(fullopt); next; }
/^-Woverloaded-virtual$/ { fullopt=$0; canonopt=deesc("-Woverloaded-virtual"); inc=1; do_output(fullopt); next; }
/^-Woverlength-strings$/ { fullopt=$0; canonopt=deesc("-Woverlength-strings"); inc=1; do_output(fullopt); next; }
/^-Woverflow$/ { fullopt=$0; canonopt=deesc("-Woverflow"); inc=1; do_output(fullopt); next; }
/^-Wopenmp-simd$/ { fullopt=$0; canonopt=deesc("-Wopenmp-simd"); inc=1; do_output(fullopt); next; }
/^-Wold-style-definition$/ { fullopt=$0; canonopt=deesc("-Wold-style-definition"); inc=1; do_output(fullopt); next; }
/^-Wold-style-declaration$/ { fullopt=$0; canonopt=deesc("-Wold-style-declaration"); inc=1; do_output(fullopt); next; }
/^-Wold-style-cast$/ { fullopt=$0; canonopt=deesc("-Wold-style-cast"); inc=1; do_output(fullopt); next; }
/^-Wodr$/ { fullopt=$0; canonopt=deesc("-Wodr"); inc=1; do_output(fullopt); next; }
/^-Wobjc-root-class$/ { fullopt=$0; canonopt=deesc("-Wobjc-root-class"); inc=1; do_output(fullopt); next; }
/^-Wnull-dereference$/ { fullopt=$0; canonopt=deesc("-Wnull-dereference"); inc=1; do_output(fullopt); next; }
/^(-Wnormalized=)(.*)$/ { fullopt=$0; canonopt=deesc("-Wnormalized"); optarg=gensub(/(-Wnormalized=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Wnormalized$/ { fullopt=$0; canonopt=deesc("-Wnormalized"); inc=1; do_output(fullopt); next; }
/^-Wnonnull-compare$/ { fullopt=$0; canonopt=deesc("-Wnonnull-compare"); inc=1; do_output(fullopt); next; }
/^-Wnonnull$/ { fullopt=$0; canonopt=deesc("-Wnonnull"); inc=1; do_output(fullopt); next; }
/^-Wnon-virtual-dtor$/ { fullopt=$0; canonopt=deesc("-Wnon-virtual-dtor"); inc=1; do_output(fullopt); next; }
/^-Wnon-template-friend$/ { fullopt=$0; canonopt=deesc("-Wnon-template-friend"); inc=1; do_output(fullopt); next; }
/^-Wnoexcept-type$/ { fullopt=$0; canonopt=deesc("-Wnoexcept-type"); inc=1; do_output(fullopt); next; }
/^-Wnoexcept$/ { fullopt=$0; canonopt=deesc("-Wnoexcept"); inc=1; do_output(fullopt); next; }
/^-Wno-zerotrip$/ { fullopt=$0; canonopt=deesc("-Wno-zerotrip"); inc=1; do_output(fullopt); next; }
/^-Wno-zero-length-bounds$/ { fullopt=$0; canonopt=deesc("-Wno-zero-length-bounds"); inc=1; do_output(fullopt); next; }
/^-Wno-zero-as-null-pointer-constant$/ { fullopt=$0; canonopt=deesc("-Wno-zero-as-null-pointer-constant"); inc=1; do_output(fullopt); next; }
/^-Wno-write-strings$/ { fullopt=$0; canonopt=deesc("-Wno-write-strings"); inc=1; do_output(fullopt); next; }
/^-Wno-volatile-register-var$/ { fullopt=$0; canonopt=deesc("-Wno-volatile-register-var"); inc=1; do_output(fullopt); next; }
/^-Wno-volatile$/ { fullopt=$0; canonopt=deesc("-Wno-volatile"); inc=1; do_output(fullopt); next; }
/^-Wno-vla-parameter$/ { fullopt=$0; canonopt=deesc("-Wno-vla-parameter"); inc=1; do_output(fullopt); next; }
/^-Wno-vla-larger-than$/ { fullopt=$0; canonopt=deesc("-Wno-vla-larger-than"); inc=1; do_output(fullopt); next; }
/^-Wno-vla$/ { fullopt=$0; canonopt=deesc("-Wno-vla"); inc=1; do_output(fullopt); next; }
/^-Wno-virtual-move-assign$/ { fullopt=$0; canonopt=deesc("-Wno-virtual-move-assign"); inc=1; do_output(fullopt); next; }
/^-Wno-virtual-inheritance$/ { fullopt=$0; canonopt=deesc("-Wno-virtual-inheritance"); inc=1; do_output(fullopt); next; }
/^-Wno-vexing-parse$/ { fullopt=$0; canonopt=deesc("-Wno-vexing-parse"); inc=1; do_output(fullopt); next; }
/^-Wno-verbose-unbounded$/ { fullopt=$0; canonopt=deesc("-Wno-verbose-unbounded"); inc=1; do_output(fullopt); next; }
/^-Wno-vector-operation-performance$/ { fullopt=$0; canonopt=deesc("-Wno-vector-operation-performance"); inc=1; do_output(fullopt); next; }
/^-Wno-variadic-macros$/ { fullopt=$0; canonopt=deesc("-Wno-variadic-macros"); inc=1; do_output(fullopt); next; }
/^-Wno-varargs$/ { fullopt=$0; canonopt=deesc("-Wno-varargs"); inc=1; do_output(fullopt); next; }
/^-Wno-useless-cast$/ { fullopt=$0; canonopt=deesc("-Wno-useless-cast"); inc=1; do_output(fullopt); next; }
/^-Wno-use-without-only$/ { fullopt=$0; canonopt=deesc("-Wno-use-without-only"); inc=1; do_output(fullopt); next; }
/^-Wno-unused-variable$/ { fullopt=$0; canonopt=deesc("-Wno-unused-variable"); inc=1; do_output(fullopt); next; }
/^-Wno-unused-value$/ { fullopt=$0; canonopt=deesc("-Wno-unused-value"); inc=1; do_output(fullopt); next; }
/^-Wno-unused-result$/ { fullopt=$0; canonopt=deesc("-Wno-unused-result"); inc=1; do_output(fullopt); next; }
/^-Wno-unused-parameter$/ { fullopt=$0; canonopt=deesc("-Wno-unused-parameter"); inc=1; do_output(fullopt); next; }
/^-Wno-unused-macros$/ { fullopt=$0; canonopt=deesc("-Wno-unused-macros"); inc=1; do_output(fullopt); next; }
/^-Wno-unused-local-typedefs$/ { fullopt=$0; canonopt=deesc("-Wno-unused-local-typedefs"); inc=1; do_output(fullopt); next; }
/^-Wno-unused-label$/ { fullopt=$0; canonopt=deesc("-Wno-unused-label"); inc=1; do_output(fullopt); next; }
/^-Wno-unused-function$/ { fullopt=$0; canonopt=deesc("-Wno-unused-function"); inc=1; do_output(fullopt); next; }
/^-Wno-unused-dummy-argument$/ { fullopt=$0; canonopt=deesc("-Wno-unused-dummy-argument"); inc=1; do_output(fullopt); next; }
/^-Wno-unused-const-variable$/ { fullopt=$0; canonopt=deesc("-Wno-unused-const-variable"); inc=1; do_output(fullopt); next; }
/^-Wno-unused-but-set-variable$/ { fullopt=$0; canonopt=deesc("-Wno-unused-but-set-variable"); inc=1; do_output(fullopt); next; }
/^-Wno-unused-but-set-parameter$/ { fullopt=$0; canonopt=deesc("-Wno-unused-but-set-parameter"); inc=1; do_output(fullopt); next; }
/^-Wno-unused$/ { fullopt=$0; canonopt=deesc("-Wno-unused"); inc=1; do_output(fullopt); next; }
/^-Wno-unsuffixed-float-constants$/ { fullopt=$0; canonopt=deesc("-Wno-unsuffixed-float-constants"); inc=1; do_output(fullopt); next; }
/^-Wno-unsafe-loop-optimizations$/ { fullopt=$0; canonopt=deesc("-Wno-unsafe-loop-optimizations"); inc=1; do_output(fullopt); next; }
/^-Wno-unreachable-code$/ { fullopt=$0; canonopt=deesc("-Wno-unreachable-code"); inc=1; do_output(fullopt); next; }
/^-Wno-unknown-pragmas$/ { fullopt=$0; canonopt=deesc("-Wno-unknown-pragmas"); inc=1; do_output(fullopt); next; }
/^-Wno-uninitialized$/ { fullopt=$0; canonopt=deesc("-Wno-uninitialized"); inc=1; do_output(fullopt); next; }
/^-Wno-underflow$/ { fullopt=$0; canonopt=deesc("-Wno-underflow"); inc=1; do_output(fullopt); next; }
/^-Wno-undefined-do-loop$/ { fullopt=$0; canonopt=deesc("-Wno-undefined-do-loop"); inc=1; do_output(fullopt); next; }
/^-Wno-undef$/ { fullopt=$0; canonopt=deesc("-Wno-undef"); inc=1; do_output(fullopt); next; }
/^-Wno-undeclared-selector$/ { fullopt=$0; canonopt=deesc("-Wno-undeclared-selector"); inc=1; do_output(fullopt); next; }
/^-Wno-type-limits$/ { fullopt=$0; canonopt=deesc("-Wno-type-limits"); inc=1; do_output(fullopt); next; }
/^-Wno-tsan$/ { fullopt=$0; canonopt=deesc("-Wno-tsan"); inc=1; do_output(fullopt); next; }
/^-Wno-trigraphs$/ { fullopt=$0; canonopt=deesc("-Wno-trigraphs"); inc=1; do_output(fullopt); next; }
/^-Wno-trampolines$/ { fullopt=$0; canonopt=deesc("-Wno-trampolines"); inc=1; do_output(fullopt); next; }
/^-Wno-traditional-conversion$/ { fullopt=$0; canonopt=deesc("-Wno-traditional-conversion"); inc=1; do_output(fullopt); next; }
/^-Wno-traditional$/ { fullopt=$0; canonopt=deesc("-Wno-traditional"); inc=1; do_output(fullopt); next; }
/^-Wno-terminate$/ { fullopt=$0; canonopt=deesc("-Wno-terminate"); inc=1; do_output(fullopt); next; }
/^-Wno-templates$/ { fullopt=$0; canonopt=deesc("-Wno-templates"); inc=1; do_output(fullopt); next; }
/^-Wno-tautological-compare$/ { fullopt=$0; canonopt=deesc("-Wno-tautological-compare"); inc=1; do_output(fullopt); next; }
/^-Wno-target-lifetime$/ { fullopt=$0; canonopt=deesc("-Wno-target-lifetime"); inc=1; do_output(fullopt); next; }
/^-Wno-tabs$/ { fullopt=$0; canonopt=deesc("-Wno-tabs"); inc=1; do_output(fullopt); next; }
/^-Wno-system-headers$/ { fullopt=$0; canonopt=deesc("-Wno-system-headers"); inc=1; do_output(fullopt); next; }
/^-Wno-synth$/ { fullopt=$0; canonopt=deesc("-Wno-synth"); inc=1; do_output(fullopt); next; }
/^-Wno-sync-nand$/ { fullopt=$0; canonopt=deesc("-Wno-sync-nand"); inc=1; do_output(fullopt); next; }
/^-Wno-switch-unreachable$/ { fullopt=$0; canonopt=deesc("-Wno-switch-unreachable"); inc=1; do_output(fullopt); next; }
/^-Wno-switch-outside-range$/ { fullopt=$0; canonopt=deesc("-Wno-switch-outside-range"); inc=1; do_output(fullopt); next; }
/^-Wno-switch-enum$/ { fullopt=$0; canonopt=deesc("-Wno-switch-enum"); inc=1; do_output(fullopt); next; }
/^-Wno-switch-default$/ { fullopt=$0; canonopt=deesc("-Wno-switch-default"); inc=1; do_output(fullopt); next; }
/^-Wno-switch-bool$/ { fullopt=$0; canonopt=deesc("-Wno-switch-bool"); inc=1; do_output(fullopt); next; }
/^-Wno-switch$/ { fullopt=$0; canonopt=deesc("-Wno-switch"); inc=1; do_output(fullopt); next; }
/^-Wno-surprising$/ { fullopt=$0; canonopt=deesc("-Wno-surprising"); inc=1; do_output(fullopt); next; }
/^-Wno-suggest-override$/ { fullopt=$0; canonopt=deesc("-Wno-suggest-override"); inc=1; do_output(fullopt); next; }
/^-Wno-suggest-final-types$/ { fullopt=$0; canonopt=deesc("-Wno-suggest-final-types"); inc=1; do_output(fullopt); next; }
/^-Wno-suggest-final-methods$/ { fullopt=$0; canonopt=deesc("-Wno-suggest-final-methods"); inc=1; do_output(fullopt); next; }
/^-Wno-subobject-linkage$/ { fullopt=$0; canonopt=deesc("-Wno-subobject-linkage"); inc=1; do_output(fullopt); next; }
/^-Wno-students$/ { fullopt=$0; canonopt=deesc("-Wno-students"); inc=1; do_output(fullopt); next; }
/^-Wno-stringop-truncation$/ { fullopt=$0; canonopt=deesc("-Wno-stringop-truncation"); inc=1; do_output(fullopt); next; }
/^-Wno-stringop-overread$/ { fullopt=$0; canonopt=deesc("-Wno-stringop-overread"); inc=1; do_output(fullopt); next; }
/^-Wno-stringop-overflow$/ { fullopt=$0; canonopt=deesc("-Wno-stringop-overflow"); inc=1; do_output(fullopt); next; }
/^-Wno-string-compare$/ { fullopt=$0; canonopt=deesc("-Wno-string-compare"); inc=1; do_output(fullopt); next; }
/^-Wno-strict-selector-match$/ { fullopt=$0; canonopt=deesc("-Wno-strict-selector-match"); inc=1; do_output(fullopt); next; }
/^-Wno-strict-prototypes$/ { fullopt=$0; canonopt=deesc("-Wno-strict-prototypes"); inc=1; do_output(fullopt); next; }
/^-Wno-strict-overflow$/ { fullopt=$0; canonopt=deesc("-Wno-strict-overflow"); inc=1; do_output(fullopt); next; }
/^-Wno-strict-null-sentinel$/ { fullopt=$0; canonopt=deesc("-Wno-strict-null-sentinel"); inc=1; do_output(fullopt); next; }
/^-Wno-strict-aliasing$/ { fullopt=$0; canonopt=deesc("-Wno-strict-aliasing"); inc=1; do_output(fullopt); next; }
/^-Wno-stack-usage$/ { fullopt=$0; canonopt=deesc("-Wno-stack-usage"); inc=1; do_output(fullopt); next; }
/^-Wno-stack-protector$/ { fullopt=$0; canonopt=deesc("-Wno-stack-protector"); inc=1; do_output(fullopt); next; }
/^-Wno-speculative$/ { fullopt=$0; canonopt=deesc("-Wno-speculative"); inc=1; do_output(fullopt); next; }
/^-Wno-sizeof-pointer-memaccess$/ { fullopt=$0; canonopt=deesc("-Wno-sizeof-pointer-memaccess"); inc=1; do_output(fullopt); next; }
/^-Wno-sizeof-pointer-div$/ { fullopt=$0; canonopt=deesc("-Wno-sizeof-pointer-div"); inc=1; do_output(fullopt); next; }
/^-Wno-sizeof-array-div$/ { fullopt=$0; canonopt=deesc("-Wno-sizeof-array-div"); inc=1; do_output(fullopt); next; }
/^-Wno-sizeof-array-argument$/ { fullopt=$0; canonopt=deesc("-Wno-sizeof-array-argument"); inc=1; do_output(fullopt); next; }
/^-Wno-sized-deallocation$/ { fullopt=$0; canonopt=deesc("-Wno-sized-deallocation"); inc=1; do_output(fullopt); next; }
/^-Wno-sign-promo$/ { fullopt=$0; canonopt=deesc("-Wno-sign-promo"); inc=1; do_output(fullopt); next; }
/^-Wno-sign-conversion$/ { fullopt=$0; canonopt=deesc("-Wno-sign-conversion"); inc=1; do_output(fullopt); next; }
/^-Wno-sign-compare$/ { fullopt=$0; canonopt=deesc("-Wno-sign-compare"); inc=1; do_output(fullopt); next; }
/^-Wno-shift-overflow$/ { fullopt=$0; canonopt=deesc("-Wno-shift-overflow"); inc=1; do_output(fullopt); next; }
/^-Wno-shift-negative-value$/ { fullopt=$0; canonopt=deesc("-Wno-shift-negative-value"); inc=1; do_output(fullopt); next; }
/^-Wno-shift-count-overflow$/ { fullopt=$0; canonopt=deesc("-Wno-shift-count-overflow"); inc=1; do_output(fullopt); next; }
/^-Wno-shift-count-negative$/ { fullopt=$0; canonopt=deesc("-Wno-shift-count-negative"); inc=1; do_output(fullopt); next; }
/^-Wno-shadow-local$/ { fullopt=$0; canonopt=deesc("-Wno-shadow-local"); inc=1; do_output(fullopt); next; }
/^-Wno-shadow-ivar$/ { fullopt=$0; canonopt=deesc("-Wno-shadow-ivar"); inc=1; do_output(fullopt); next; }
/^-Wno-shadow-compatible-local$/ { fullopt=$0; canonopt=deesc("-Wno-shadow-compatible-local"); inc=1; do_output(fullopt); next; }
/^-Wno-shadow$/ { fullopt=$0; canonopt=deesc("-Wno-shadow"); inc=1; do_output(fullopt); next; }
/^-Wno-sequence-point$/ { fullopt=$0; canonopt=deesc("-Wno-sequence-point"); inc=1; do_output(fullopt); next; }
/^-Wno-selector$/ { fullopt=$0; canonopt=deesc("-Wno-selector"); inc=1; do_output(fullopt); next; }
/^-Wno-scalar-storage-order$/ { fullopt=$0; canonopt=deesc("-Wno-scalar-storage-order"); inc=1; do_output(fullopt); next; }
/^-Wno-return-type$/ { fullopt=$0; canonopt=deesc("-Wno-return-type"); inc=1; do_output(fullopt); next; }
/^-Wno-return-local-addr$/ { fullopt=$0; canonopt=deesc("-Wno-return-local-addr"); inc=1; do_output(fullopt); next; }
/^-Wno-restrict$/ { fullopt=$0; canonopt=deesc("-Wno-restrict"); inc=1; do_output(fullopt); next; }
/^-Wno-reorder$/ { fullopt=$0; canonopt=deesc("-Wno-reorder"); inc=1; do_output(fullopt); next; }
/^-Wno-register$/ { fullopt=$0; canonopt=deesc("-Wno-register"); inc=1; do_output(fullopt); next; }
/^-Wno-redundant-tags$/ { fullopt=$0; canonopt=deesc("-Wno-redundant-tags"); inc=1; do_output(fullopt); next; }
/^-Wno-redundant-move$/ { fullopt=$0; canonopt=deesc("-Wno-redundant-move"); inc=1; do_output(fullopt); next; }
/^-Wno-redundant-decls$/ { fullopt=$0; canonopt=deesc("-Wno-redundant-decls"); inc=1; do_output(fullopt); next; }
/^-Wno-realloc-lhs-all$/ { fullopt=$0; canonopt=deesc("-Wno-realloc-lhs-all"); inc=1; do_output(fullopt); next; }
/^-Wno-realloc-lhs$/ { fullopt=$0; canonopt=deesc("-Wno-realloc-lhs"); inc=1; do_output(fullopt); next; }
/^-Wno-real-q-constant$/ { fullopt=$0; canonopt=deesc("-Wno-real-q-constant"); inc=1; do_output(fullopt); next; }
/^-Wno-range-loop-construct$/ { fullopt=$0; canonopt=deesc("-Wno-range-loop-construct"); inc=1; do_output(fullopt); next; }
/^-Wno-psabi$/ { fullopt=$0; canonopt=deesc("-Wno-psabi"); inc=1; do_output(fullopt); next; }
/^-Wno-protocol$/ { fullopt=$0; canonopt=deesc("-Wno-protocol"); inc=1; do_output(fullopt); next; }
/^-Wno-property-assign-default$/ { fullopt=$0; canonopt=deesc("-Wno-property-assign-default"); inc=1; do_output(fullopt); next; }
/^-Wno-prio-ctor-dtor$/ { fullopt=$0; canonopt=deesc("-Wno-prio-ctor-dtor"); inc=1; do_output(fullopt); next; }
/^-Wno-pragmas$/ { fullopt=$0; canonopt=deesc("-Wno-pragmas"); inc=1; do_output(fullopt); next; }
/^-Wno-pointer-to-int-cast$/ { fullopt=$0; canonopt=deesc("-Wno-pointer-to-int-cast"); inc=1; do_output(fullopt); next; }
/^-Wno-pointer-sign$/ { fullopt=$0; canonopt=deesc("-Wno-pointer-sign"); inc=1; do_output(fullopt); next; }
/^-Wno-pointer-compare$/ { fullopt=$0; canonopt=deesc("-Wno-pointer-compare"); inc=1; do_output(fullopt); next; }
/^-Wno-pointer-arith$/ { fullopt=$0; canonopt=deesc("-Wno-pointer-arith"); inc=1; do_output(fullopt); next; }
/^-Wno-pmf-conversions$/ { fullopt=$0; canonopt=deesc("-Wno-pmf-conversions"); inc=1; do_output(fullopt); next; }
/^-Wno-placement-new$/ { fullopt=$0; canonopt=deesc("-Wno-placement-new"); inc=1; do_output(fullopt); next; }
/^-Wno-pessimizing-move$/ { fullopt=$0; canonopt=deesc("-Wno-pessimizing-move"); inc=1; do_output(fullopt); next; }
/^-Wno-pedantic-param-names$/ { fullopt=$0; canonopt=deesc("-Wno-pedantic-param-names"); inc=1; do_output(fullopt); next; }
/^-Wno-pedantic-cast$/ { fullopt=$0; canonopt=deesc("-Wno-pedantic-cast"); inc=1; do_output(fullopt); next; }
/^-Wno-pedantic$/ { fullopt=$0; canonopt=deesc("-Wno-pedantic"); inc=1; do_output(fullopt); next; }
/^-Wno-parentheses$/ { fullopt=$0; canonopt=deesc("-Wno-parentheses"); inc=1; do_output(fullopt); next; }
/^-Wno-padded$/ { fullopt=$0; canonopt=deesc("-Wno-padded"); inc=1; do_output(fullopt); next; }
/^-Wno-packed-not-aligned$/ { fullopt=$0; canonopt=deesc("-Wno-packed-not-aligned"); inc=1; do_output(fullopt); next; }
/^-Wno-packed-bitfield-compat$/ { fullopt=$0; canonopt=deesc("-Wno-packed-bitfield-compat"); inc=1; do_output(fullopt); next; }
/^-Wno-packed$/ { fullopt=$0; canonopt=deesc("-Wno-packed"); inc=1; do_output(fullopt); next; }
/^-Wno-overwrite-recursive$/ { fullopt=$0; canonopt=deesc("-Wno-overwrite-recursive"); inc=1; do_output(fullopt); next; }
/^-Wno-override-init-side-effects$/ { fullopt=$0; canonopt=deesc("-Wno-override-init-side-effects"); inc=1; do_output(fullopt); next; }
/^-Wno-override-init$/ { fullopt=$0; canonopt=deesc("-Wno-override-init"); inc=1; do_output(fullopt); next; }
/^-Wno-overloaded-virtual$/ { fullopt=$0; canonopt=deesc("-Wno-overloaded-virtual"); inc=1; do_output(fullopt); next; }
/^-Wno-overlength-strings$/ { fullopt=$0; canonopt=deesc("-Wno-overlength-strings"); inc=1; do_output(fullopt); next; }
/^-Wno-overflow$/ { fullopt=$0; canonopt=deesc("-Wno-overflow"); inc=1; do_output(fullopt); next; }
/^-Wno-openmp-simd$/ { fullopt=$0; canonopt=deesc("-Wno-openmp-simd"); inc=1; do_output(fullopt); next; }
/^-Wno-old-style-definition$/ { fullopt=$0; canonopt=deesc("-Wno-old-style-definition"); inc=1; do_output(fullopt); next; }
/^-Wno-old-style-declaration$/ { fullopt=$0; canonopt=deesc("-Wno-old-style-declaration"); inc=1; do_output(fullopt); next; }
/^-Wno-old-style-cast$/ { fullopt=$0; canonopt=deesc("-Wno-old-style-cast"); inc=1; do_output(fullopt); next; }
/^-Wno-odr$/ { fullopt=$0; canonopt=deesc("-Wno-odr"); inc=1; do_output(fullopt); next; }
/^-Wno-objc-root-class$/ { fullopt=$0; canonopt=deesc("-Wno-objc-root-class"); inc=1; do_output(fullopt); next; }
/^-Wno-null-dereference$/ { fullopt=$0; canonopt=deesc("-Wno-null-dereference"); inc=1; do_output(fullopt); next; }
/^-Wno-normalized$/ { fullopt=$0; canonopt=deesc("-Wno-normalized"); inc=1; do_output(fullopt); next; }
/^-Wno-nonnull-compare$/ { fullopt=$0; canonopt=deesc("-Wno-nonnull-compare"); inc=1; do_output(fullopt); next; }
/^-Wno-nonnull$/ { fullopt=$0; canonopt=deesc("-Wno-nonnull"); inc=1; do_output(fullopt); next; }
/^-Wno-non-virtual-dtor$/ { fullopt=$0; canonopt=deesc("-Wno-non-virtual-dtor"); inc=1; do_output(fullopt); next; }
/^-Wno-non-template-friend$/ { fullopt=$0; canonopt=deesc("-Wno-non-template-friend"); inc=1; do_output(fullopt); next; }
/^-Wno-noexcept-type$/ { fullopt=$0; canonopt=deesc("-Wno-noexcept-type"); inc=1; do_output(fullopt); next; }
/^-Wno-noexcept$/ { fullopt=$0; canonopt=deesc("-Wno-noexcept"); inc=1; do_output(fullopt); next; }
/^-Wno-nested-externs$/ { fullopt=$0; canonopt=deesc("-Wno-nested-externs"); inc=1; do_output(fullopt); next; }
/^-Wno-narrowing$/ { fullopt=$0; canonopt=deesc("-Wno-narrowing"); inc=1; do_output(fullopt); next; }
/^-Wno-namespaces$/ { fullopt=$0; canonopt=deesc("-Wno-namespaces"); inc=1; do_output(fullopt); next; }
/^-Wno-multistatement-macros$/ { fullopt=$0; canonopt=deesc("-Wno-multistatement-macros"); inc=1; do_output(fullopt); next; }
/^-Wno-multiple-inheritance$/ { fullopt=$0; canonopt=deesc("-Wno-multiple-inheritance"); inc=1; do_output(fullopt); next; }
/^-Wno-multichar$/ { fullopt=$0; canonopt=deesc("-Wno-multichar"); inc=1; do_output(fullopt); next; }
/^-Wno-mudflap$/ { fullopt=$0; canonopt=deesc("-Wno-mudflap"); inc=1; do_output(fullopt); next; }
/^-Wno-missing-prototypes$/ { fullopt=$0; canonopt=deesc("-Wno-missing-prototypes"); inc=1; do_output(fullopt); next; }
/^-Wno-missing-profile$/ { fullopt=$0; canonopt=deesc("-Wno-missing-profile"); inc=1; do_output(fullopt); next; }
/^-Wno-missing-parameter-type$/ { fullopt=$0; canonopt=deesc("-Wno-missing-parameter-type"); inc=1; do_output(fullopt); next; }
/^-Wno-missing-noreturn$/ { fullopt=$0; canonopt=deesc("-Wno-missing-noreturn"); inc=1; do_output(fullopt); next; }
/^-Wno-missing-include-dirs$/ { fullopt=$0; canonopt=deesc("-Wno-missing-include-dirs"); inc=1; do_output(fullopt); next; }
/^-Wno-missing-format-attribute$/ { fullopt=$0; canonopt=deesc("-Wno-missing-format-attribute"); inc=1; do_output(fullopt); next; }
/^-Wno-missing-field-initializers$/ { fullopt=$0; canonopt=deesc("-Wno-missing-field-initializers"); inc=1; do_output(fullopt); next; }
/^-Wno-missing-declarations$/ { fullopt=$0; canonopt=deesc("-Wno-missing-declarations"); inc=1; do_output(fullopt); next; }
/^-Wno-missing-braces$/ { fullopt=$0; canonopt=deesc("-Wno-missing-braces"); inc=1; do_output(fullopt); next; }
/^-Wno-missing-attributes$/ { fullopt=$0; canonopt=deesc("-Wno-missing-attributes"); inc=1; do_output(fullopt); next; }
/^-Wno-mismatched-tags$/ { fullopt=$0; canonopt=deesc("-Wno-mismatched-tags"); inc=1; do_output(fullopt); next; }
/^-Wno-mismatched-new-delete$/ { fullopt=$0; canonopt=deesc("-Wno-mismatched-new-delete"); inc=1; do_output(fullopt); next; }
/^-Wno-mismatched-dealloc$/ { fullopt=$0; canonopt=deesc("-Wno-mismatched-dealloc"); inc=1; do_output(fullopt); next; }
/^-Wno-misleading-indentation$/ { fullopt=$0; canonopt=deesc("-Wno-misleading-indentation"); inc=1; do_output(fullopt); next; }
/^-Wno-memset-transposed-args$/ { fullopt=$0; canonopt=deesc("-Wno-memset-transposed-args"); inc=1; do_output(fullopt); next; }
/^-Wno-memset-elt-size$/ { fullopt=$0; canonopt=deesc("-Wno-memset-elt-size"); inc=1; do_output(fullopt); next; }
/^-Wno-maybe-uninitialized$/ { fullopt=$0; canonopt=deesc("-Wno-maybe-uninitialized"); inc=1; do_output(fullopt); next; }
/^-Wno-main$/ { fullopt=$0; canonopt=deesc("-Wno-main"); inc=1; do_output(fullopt); next; }
/^-Wno-lto-type-mismatch$/ { fullopt=$0; canonopt=deesc("-Wno-lto-type-mismatch"); inc=1; do_output(fullopt); next; }
/^-Wno-long-long$/ { fullopt=$0; canonopt=deesc("-Wno-long-long"); inc=1; do_output(fullopt); next; }
/^-Wno-logical-op$/ { fullopt=$0; canonopt=deesc("-Wno-logical-op"); inc=1; do_output(fullopt); next; }
/^-Wno-logical-not-parentheses$/ { fullopt=$0; canonopt=deesc("-Wno-logical-not-parentheses"); inc=1; do_output(fullopt); next; }
/^-Wno-literal-suffix$/ { fullopt=$0; canonopt=deesc("-Wno-literal-suffix"); inc=1; do_output(fullopt); next; }
/^-Wno-line-truncation$/ { fullopt=$0; canonopt=deesc("-Wno-line-truncation"); inc=1; do_output(fullopt); next; }
/^-Wno-larger-than-$/ { fullopt=$0; canonopt=deesc("-Wno-larger-than-"); inc=1; do_output(fullopt); next; }
/^-Wno-larger-than$/ { fullopt=$0; canonopt=deesc("-Wno-larger-than"); inc=1; do_output(fullopt); next; }
/^-Wno-jump-misses-init$/ { fullopt=$0; canonopt=deesc("-Wno-jump-misses-init"); inc=1; do_output(fullopt); next; }
/^-Wno-invalid-pch$/ { fullopt=$0; canonopt=deesc("-Wno-invalid-pch"); inc=1; do_output(fullopt); next; }
/^-Wno-invalid-offsetof$/ { fullopt=$0; canonopt=deesc("-Wno-invalid-offsetof"); inc=1; do_output(fullopt); next; }
/^-Wno-invalid-memory-model$/ { fullopt=$0; canonopt=deesc("-Wno-invalid-memory-model"); inc=1; do_output(fullopt); next; }
/^-Wno-invalid-imported-macros$/ { fullopt=$0; canonopt=deesc("-Wno-invalid-imported-macros"); inc=1; do_output(fullopt); next; }
/^-Wno-intrinsics-std$/ { fullopt=$0; canonopt=deesc("-Wno-intrinsics-std"); inc=1; do_output(fullopt); next; }
/^-Wno-intrinsic-shadow$/ { fullopt=$0; canonopt=deesc("-Wno-intrinsic-shadow"); inc=1; do_output(fullopt); next; }
/^-Wno-integer-division$/ { fullopt=$0; canonopt=deesc("-Wno-integer-division"); inc=1; do_output(fullopt); next; }
/^-Wno-int-to-pointer-cast$/ { fullopt=$0; canonopt=deesc("-Wno-int-to-pointer-cast"); inc=1; do_output(fullopt); next; }
/^-Wno-int-in-bool-context$/ { fullopt=$0; canonopt=deesc("-Wno-int-in-bool-context"); inc=1; do_output(fullopt); next; }
/^-Wno-int-conversion$/ { fullopt=$0; canonopt=deesc("-Wno-int-conversion"); inc=1; do_output(fullopt); next; }
/^-Wno-inline$/ { fullopt=$0; canonopt=deesc("-Wno-inline"); inc=1; do_output(fullopt); next; }
/^-Wno-init-self$/ { fullopt=$0; canonopt=deesc("-Wno-init-self"); inc=1; do_output(fullopt); next; }
/^-Wno-init-list-lifetime$/ { fullopt=$0; canonopt=deesc("-Wno-init-list-lifetime"); inc=1; do_output(fullopt); next; }
/^-Wno-inherited-variadic-ctor$/ { fullopt=$0; canonopt=deesc("-Wno-inherited-variadic-ctor"); inc=1; do_output(fullopt); next; }
/^-Wno-incompatible-pointer-types$/ { fullopt=$0; canonopt=deesc("-Wno-incompatible-pointer-types"); inc=1; do_output(fullopt); next; }
/^-Wno-inaccessible-base$/ { fullopt=$0; canonopt=deesc("-Wno-inaccessible-base"); inc=1; do_output(fullopt); next; }
/^-Wno-import$/ { fullopt=$0; canonopt=deesc("-Wno-import"); inc=1; do_output(fullopt); next; }
/^-Wno-implicit-procedure$/ { fullopt=$0; canonopt=deesc("-Wno-implicit-procedure"); inc=1; do_output(fullopt); next; }
/^-Wno-implicit-interface$/ { fullopt=$0; canonopt=deesc("-Wno-implicit-interface"); inc=1; do_output(fullopt); next; }
/^-Wno-implicit-int$/ { fullopt=$0; canonopt=deesc("-Wno-implicit-int"); inc=1; do_output(fullopt); next; }
/^-Wno-implicit-function-declaration$/ { fullopt=$0; canonopt=deesc("-Wno-implicit-function-declaration"); inc=1; do_output(fullopt); next; }
/^-Wno-implicit-fallthrough$/ { fullopt=$0; canonopt=deesc("-Wno-implicit-fallthrough"); inc=1; do_output(fullopt); next; }
/^-Wno-implicit$/ { fullopt=$0; canonopt=deesc("-Wno-implicit"); inc=1; do_output(fullopt); next; }
/^-Wno-ignored-qualifiers$/ { fullopt=$0; canonopt=deesc("-Wno-ignored-qualifiers"); inc=1; do_output(fullopt); next; }
/^-Wno-ignored-attributes$/ { fullopt=$0; canonopt=deesc("-Wno-ignored-attributes"); inc=1; do_output(fullopt); next; }
/^-Wno-if-not-aligned$/ { fullopt=$0; canonopt=deesc("-Wno-if-not-aligned"); inc=1; do_output(fullopt); next; }
/^-Wno-hsa$/ { fullopt=$0; canonopt=deesc("-Wno-hsa"); inc=1; do_output(fullopt); next; }
/^-Wno-function-elimination$/ { fullopt=$0; canonopt=deesc("-Wno-function-elimination"); inc=1; do_output(fullopt); next; }
/^-Wno-frontend-loop-interchange$/ { fullopt=$0; canonopt=deesc("-Wno-frontend-loop-interchange"); inc=1; do_output(fullopt); next; }
/^-Wno-free-nonheap-object$/ { fullopt=$0; canonopt=deesc("-Wno-free-nonheap-object"); inc=1; do_output(fullopt); next; }
/^-Wno-frame-larger-than$/ { fullopt=$0; canonopt=deesc("-Wno-frame-larger-than"); inc=1; do_output(fullopt); next; }
/^-Wno-frame-address$/ { fullopt=$0; canonopt=deesc("-Wno-frame-address"); inc=1; do_output(fullopt); next; }
/^-Wno-format-zero-length$/ { fullopt=$0; canonopt=deesc("-Wno-format-zero-length"); inc=1; do_output(fullopt); next; }
/^-Wno-format-y2k$/ { fullopt=$0; canonopt=deesc("-Wno-format-y2k"); inc=1; do_output(fullopt); next; }
/^-Wno-format-truncation$/ { fullopt=$0; canonopt=deesc("-Wno-format-truncation"); inc=1; do_output(fullopt); next; }
/^-Wno-format-signedness$/ { fullopt=$0; canonopt=deesc("-Wno-format-signedness"); inc=1; do_output(fullopt); next; }
/^-Wno-format-security$/ { fullopt=$0; canonopt=deesc("-Wno-format-security"); inc=1; do_output(fullopt); next; }
/^-Wno-format-nonliteral$/ { fullopt=$0; canonopt=deesc("-Wno-format-nonliteral"); inc=1; do_output(fullopt); next; }
/^-Wno-format-extra-args$/ { fullopt=$0; canonopt=deesc("-Wno-format-extra-args"); inc=1; do_output(fullopt); next; }
/^-Wno-format-diag$/ { fullopt=$0; canonopt=deesc("-Wno-format-diag"); inc=1; do_output(fullopt); next; }
/^-Wno-format-contains-nul$/ { fullopt=$0; canonopt=deesc("-Wno-format-contains-nul"); inc=1; do_output(fullopt); next; }
/^-Wno-format$/ { fullopt=$0; canonopt=deesc("-Wno-format"); inc=1; do_output(fullopt); next; }
/^-Wno-float-equal$/ { fullopt=$0; canonopt=deesc("-Wno-float-equal"); inc=1; do_output(fullopt); next; }
/^-Wno-float-conversion$/ { fullopt=$0; canonopt=deesc("-Wno-float-conversion"); inc=1; do_output(fullopt); next; }
/^-Wno-fatal-errors$/ { fullopt=$0; canonopt=deesc("-Wno-fatal-errors"); inc=1; do_output(fullopt); next; }
/^-Wno-extra-semi$/ { fullopt=$0; canonopt=deesc("-Wno-extra-semi"); inc=1; do_output(fullopt); next; }
/^-Wno-extra$/ { fullopt=$0; canonopt=deesc("-Wno-extra"); inc=1; do_output(fullopt); next; }
/^-Wno-expansion-to-defined$/ { fullopt=$0; canonopt=deesc("-Wno-expansion-to-defined"); inc=1; do_output(fullopt); next; }
/^-Wno-exceptions$/ { fullopt=$0; canonopt=deesc("-Wno-exceptions"); inc=1; do_output(fullopt); next; }
/^-Wno-error-implicit-function-declaration$/ { fullopt=$0; canonopt=deesc("-Wno-error-implicit-function-declaration"); inc=1; do_output(fullopt); next; }
/^-Wno-error$/ { fullopt=$0; canonopt=deesc("-Wno-error"); inc=1; do_output(fullopt); next; }
/^-Wno-enum-conversion$/ { fullopt=$0; canonopt=deesc("-Wno-enum-conversion"); inc=1; do_output(fullopt); next; }
/^-Wno-enum-compare$/ { fullopt=$0; canonopt=deesc("-Wno-enum-compare"); inc=1; do_output(fullopt); next; }
/^-Wno-endif-labels$/ { fullopt=$0; canonopt=deesc("-Wno-endif-labels"); inc=1; do_output(fullopt); next; }
/^-Wno-empty-body$/ { fullopt=$0; canonopt=deesc("-Wno-empty-body"); inc=1; do_output(fullopt); next; }
/^-Wno-effc\+\+$/ { fullopt=$0; canonopt=deesc("-Wno-effc\+\+"); inc=1; do_output(fullopt); next; }
/^-Wno-duplicated-cond$/ { fullopt=$0; canonopt=deesc("-Wno-duplicated-cond"); inc=1; do_output(fullopt); next; }
/^-Wno-duplicated-branches$/ { fullopt=$0; canonopt=deesc("-Wno-duplicated-branches"); inc=1; do_output(fullopt); next; }
/^-Wno-duplicate-decl-specifier$/ { fullopt=$0; canonopt=deesc("-Wno-duplicate-decl-specifier"); inc=1; do_output(fullopt); next; }
/^-Wno-double-promotion$/ { fullopt=$0; canonopt=deesc("-Wno-double-promotion"); inc=1; do_output(fullopt); next; }
/^-Wno-do-subscript$/ { fullopt=$0; canonopt=deesc("-Wno-do-subscript"); inc=1; do_output(fullopt); next; }
/^-Wno-div-by-zero$/ { fullopt=$0; canonopt=deesc("-Wno-div-by-zero"); inc=1; do_output(fullopt); next; }
/^-Wno-discarded-qualifiers$/ { fullopt=$0; canonopt=deesc("-Wno-discarded-qualifiers"); inc=1; do_output(fullopt); next; }
/^-Wno-discarded-array-qualifiers$/ { fullopt=$0; canonopt=deesc("-Wno-discarded-array-qualifiers"); inc=1; do_output(fullopt); next; }
/^-Wno-disabled-optimization$/ { fullopt=$0; canonopt=deesc("-Wno-disabled-optimization"); inc=1; do_output(fullopt); next; }
/^-Wno-designated-init$/ { fullopt=$0; canonopt=deesc("-Wno-designated-init"); inc=1; do_output(fullopt); next; }
/^-Wno-deprecated-enum-float-conversion$/ { fullopt=$0; canonopt=deesc("-Wno-deprecated-enum-float-conversion"); inc=1; do_output(fullopt); next; }
/^-Wno-deprecated-enum-enum-conversion$/ { fullopt=$0; canonopt=deesc("-Wno-deprecated-enum-enum-conversion"); inc=1; do_output(fullopt); next; }
/^-Wno-deprecated-declarations$/ { fullopt=$0; canonopt=deesc("-Wno-deprecated-declarations"); inc=1; do_output(fullopt); next; }
/^-Wno-deprecated-copy-dtor$/ { fullopt=$0; canonopt=deesc("-Wno-deprecated-copy-dtor"); inc=1; do_output(fullopt); next; }
/^-Wno-deprecated-copy$/ { fullopt=$0; canonopt=deesc("-Wno-deprecated-copy"); inc=1; do_output(fullopt); next; }
/^-Wno-deprecated$/ { fullopt=$0; canonopt=deesc("-Wno-deprecated"); inc=1; do_output(fullopt); next; }
/^-Wno-delete-non-virtual-dtor$/ { fullopt=$0; canonopt=deesc("-Wno-delete-non-virtual-dtor"); inc=1; do_output(fullopt); next; }
/^-Wno-delete-incomplete$/ { fullopt=$0; canonopt=deesc("-Wno-delete-incomplete"); inc=1; do_output(fullopt); next; }
/^-Wno-declaration-after-statement$/ { fullopt=$0; canonopt=deesc("-Wno-declaration-after-statement"); inc=1; do_output(fullopt); next; }
/^-Wno-date-time$/ { fullopt=$0; canonopt=deesc("-Wno-date-time"); inc=1; do_output(fullopt); next; }
/^-Wno-dangling-else$/ { fullopt=$0; canonopt=deesc("-Wno-dangling-else"); inc=1; do_output(fullopt); next; }
/^-Wno-ctor-dtor-privacy$/ { fullopt=$0; canonopt=deesc("-Wno-ctor-dtor-privacy"); inc=1; do_output(fullopt); next; }
/^-Wno-ctad-maybe-unsupported$/ { fullopt=$0; canonopt=deesc("-Wno-ctad-maybe-unsupported"); inc=1; do_output(fullopt); next; }
/^-Wno-cpp$/ { fullopt=$0; canonopt=deesc("-Wno-cpp"); inc=1; do_output(fullopt); next; }
/^-Wno-coverage-mismatch$/ { fullopt=$0; canonopt=deesc("-Wno-coverage-mismatch"); inc=1; do_output(fullopt); next; }
/^-Wno-conversion-null$/ { fullopt=$0; canonopt=deesc("-Wno-conversion-null"); inc=1; do_output(fullopt); next; }
/^-Wno-conversion-extra$/ { fullopt=$0; canonopt=deesc("-Wno-conversion-extra"); inc=1; do_output(fullopt); next; }
/^-Wno-conversion$/ { fullopt=$0; canonopt=deesc("-Wno-conversion"); inc=1; do_output(fullopt); next; }
/^-Wno-conditionally-supported$/ { fullopt=$0; canonopt=deesc("-Wno-conditionally-supported"); inc=1; do_output(fullopt); next; }
/^-Wno-compare-reals$/ { fullopt=$0; canonopt=deesc("-Wno-compare-reals"); inc=1; do_output(fullopt); next; }
/^-Wno-comments$/ { fullopt=$0; canonopt=deesc("-Wno-comments"); inc=1; do_output(fullopt); next; }
/^-Wno-comment$/ { fullopt=$0; canonopt=deesc("-Wno-comment"); inc=1; do_output(fullopt); next; }
/^-Wno-comma-subscript$/ { fullopt=$0; canonopt=deesc("-Wno-comma-subscript"); inc=1; do_output(fullopt); next; }
/^-Wno-clobbered$/ { fullopt=$0; canonopt=deesc("-Wno-clobbered"); inc=1; do_output(fullopt); next; }
/^-Wno-class-memaccess$/ { fullopt=$0; canonopt=deesc("-Wno-class-memaccess"); inc=1; do_output(fullopt); next; }
/^-Wno-class-conversion$/ { fullopt=$0; canonopt=deesc("-Wno-class-conversion"); inc=1; do_output(fullopt); next; }
/^-Wno-chkp$/ { fullopt=$0; canonopt=deesc("-Wno-chkp"); inc=1; do_output(fullopt); next; }
/^-Wno-character-truncation$/ { fullopt=$0; canonopt=deesc("-Wno-character-truncation"); inc=1; do_output(fullopt); next; }
/^-Wno-char-subscripts$/ { fullopt=$0; canonopt=deesc("-Wno-char-subscripts"); inc=1; do_output(fullopt); next; }
/^-Wno-catch-value$/ { fullopt=$0; canonopt=deesc("-Wno-catch-value"); inc=1; do_output(fullopt); next; }
/^-Wno-cast-result$/ { fullopt=$0; canonopt=deesc("-Wno-cast-result"); inc=1; do_output(fullopt); next; }
/^-Wno-cast-qual$/ { fullopt=$0; canonopt=deesc("-Wno-cast-qual"); inc=1; do_output(fullopt); next; }
/^-Wno-cast-function-type$/ { fullopt=$0; canonopt=deesc("-Wno-cast-function-type"); inc=1; do_output(fullopt); next; }
/^-Wno-cast-align$/ { fullopt=$0; canonopt=deesc("-Wno-cast-align"); inc=1; do_output(fullopt); next; }
/^-Wno-cannot-profile$/ { fullopt=$0; canonopt=deesc("-Wno-cannot-profile"); inc=1; do_output(fullopt); next; }
/^-Wno-c99-c11-compat$/ { fullopt=$0; canonopt=deesc("-Wno-c99-c11-compat"); inc=1; do_output(fullopt); next; }
/^-Wno-c90-c99-compat$/ { fullopt=$0; canonopt=deesc("-Wno-c90-c99-compat"); inc=1; do_output(fullopt); next; }
/^-Wno-c11-c2x-compat$/ { fullopt=$0; canonopt=deesc("-Wno-c11-c2x-compat"); inc=1; do_output(fullopt); next; }
/^-Wno-c-binding-type$/ { fullopt=$0; canonopt=deesc("-Wno-c-binding-type"); inc=1; do_output(fullopt); next; }
/^-Wno-c\+\+2a-compat$/ { fullopt=$0; canonopt=deesc("-Wno-c\+\+2a-compat"); inc=1; do_output(fullopt); next; }
/^-Wno-c\+\+20-compat$/ { fullopt=$0; canonopt=deesc("-Wno-c\+\+20-compat"); inc=1; do_output(fullopt); next; }
/^-Wno-c\+\+1z-compat$/ { fullopt=$0; canonopt=deesc("-Wno-c\+\+1z-compat"); inc=1; do_output(fullopt); next; }
/^-Wno-c\+\+17-compat$/ { fullopt=$0; canonopt=deesc("-Wno-c\+\+17-compat"); inc=1; do_output(fullopt); next; }
/^-Wno-c\+\+14-compat$/ { fullopt=$0; canonopt=deesc("-Wno-c\+\+14-compat"); inc=1; do_output(fullopt); next; }
/^-Wno-c\+\+11-compat$/ { fullopt=$0; canonopt=deesc("-Wno-c\+\+11-compat"); inc=1; do_output(fullopt); next; }
/^-Wno-c\+\+0x-compat$/ { fullopt=$0; canonopt=deesc("-Wno-c\+\+0x-compat"); inc=1; do_output(fullopt); next; }
/^-Wno-c\+\+-compat$/ { fullopt=$0; canonopt=deesc("-Wno-c\+\+-compat"); inc=1; do_output(fullopt); next; }
/^-Wno-builtin-macro-redefined$/ { fullopt=$0; canonopt=deesc("-Wno-builtin-macro-redefined"); inc=1; do_output(fullopt); next; }
/^-Wno-builtin-declaration-mismatch$/ { fullopt=$0; canonopt=deesc("-Wno-builtin-declaration-mismatch"); inc=1; do_output(fullopt); next; }
/^-Wno-bool-operation$/ { fullopt=$0; canonopt=deesc("-Wno-bool-operation"); inc=1; do_output(fullopt); next; }
/^-Wno-bool-compare$/ { fullopt=$0; canonopt=deesc("-Wno-bool-compare"); inc=1; do_output(fullopt); next; }
/^-Wno-bad-function-cast$/ { fullopt=$0; canonopt=deesc("-Wno-bad-function-cast"); inc=1; do_output(fullopt); next; }
/^-Wno-attributes$/ { fullopt=$0; canonopt=deesc("-Wno-attributes"); inc=1; do_output(fullopt); next; }
/^-Wno-attribute-warning$/ { fullopt=$0; canonopt=deesc("-Wno-attribute-warning"); inc=1; do_output(fullopt); next; }
/^-Wno-attribute-alias$/ { fullopt=$0; canonopt=deesc("-Wno-attribute-alias"); inc=1; do_output(fullopt); next; }
/^-Wno-assign-intercept$/ { fullopt=$0; canonopt=deesc("-Wno-assign-intercept"); inc=1; do_output(fullopt); next; }
/^-Wno-array-temporaries$/ { fullopt=$0; canonopt=deesc("-Wno-array-temporaries"); inc=1; do_output(fullopt); next; }
/^-Wno-array-parameter$/ { fullopt=$0; canonopt=deesc("-Wno-array-parameter"); inc=1; do_output(fullopt); next; }
/^-Wno-array-bounds$/ { fullopt=$0; canonopt=deesc("-Wno-array-bounds"); inc=1; do_output(fullopt); next; }
/^-Wno-arith-conversion$/ { fullopt=$0; canonopt=deesc("-Wno-arith-conversion"); inc=1; do_output(fullopt); next; }
/^-Wno-argument-mismatch$/ { fullopt=$0; canonopt=deesc("-Wno-argument-mismatch"); inc=1; do_output(fullopt); next; }
/^-Wno-analyzer-write-to-string-literal$/ { fullopt=$0; canonopt=deesc("-Wno-analyzer-write-to-string-literal"); inc=1; do_output(fullopt); next; }
/^-Wno-analyzer-write-to-const$/ { fullopt=$0; canonopt=deesc("-Wno-analyzer-write-to-const"); inc=1; do_output(fullopt); next; }
/^-Wno-analyzer-use-of-pointer-in-stale-stack-frame$/ { fullopt=$0; canonopt=deesc("-Wno-analyzer-use-of-pointer-in-stale-stack-frame"); inc=1; do_output(fullopt); next; }
/^-Wno-analyzer-use-after-free$/ { fullopt=$0; canonopt=deesc("-Wno-analyzer-use-after-free"); inc=1; do_output(fullopt); next; }
/^-Wno-analyzer-unsafe-call-within-signal-handler$/ { fullopt=$0; canonopt=deesc("-Wno-analyzer-unsafe-call-within-signal-handler"); inc=1; do_output(fullopt); next; }
/^-Wno-analyzer-too-complex$/ { fullopt=$0; canonopt=deesc("-Wno-analyzer-too-complex"); inc=1; do_output(fullopt); next; }
/^-Wno-analyzer-tainted-array-index$/ { fullopt=$0; canonopt=deesc("-Wno-analyzer-tainted-array-index"); inc=1; do_output(fullopt); next; }
/^-Wno-analyzer-stale-setjmp-buffer$/ { fullopt=$0; canonopt=deesc("-Wno-analyzer-stale-setjmp-buffer"); inc=1; do_output(fullopt); next; }
/^-Wno-analyzer-shift-count-overflow$/ { fullopt=$0; canonopt=deesc("-Wno-analyzer-shift-count-overflow"); inc=1; do_output(fullopt); next; }
/^-Wno-analyzer-shift-count-negative$/ { fullopt=$0; canonopt=deesc("-Wno-analyzer-shift-count-negative"); inc=1; do_output(fullopt); next; }
/^-Wno-analyzer-possible-null-dereference$/ { fullopt=$0; canonopt=deesc("-Wno-analyzer-possible-null-dereference"); inc=1; do_output(fullopt); next; }
/^-Wno-analyzer-possible-null-argument$/ { fullopt=$0; canonopt=deesc("-Wno-analyzer-possible-null-argument"); inc=1; do_output(fullopt); next; }
/^-Wno-analyzer-null-dereference$/ { fullopt=$0; canonopt=deesc("-Wno-analyzer-null-dereference"); inc=1; do_output(fullopt); next; }
/^-Wno-analyzer-null-argument$/ { fullopt=$0; canonopt=deesc("-Wno-analyzer-null-argument"); inc=1; do_output(fullopt); next; }
/^-Wno-analyzer-mismatching-deallocation$/ { fullopt=$0; canonopt=deesc("-Wno-analyzer-mismatching-deallocation"); inc=1; do_output(fullopt); next; }
/^-Wno-analyzer-malloc-leak$/ { fullopt=$0; canonopt=deesc("-Wno-analyzer-malloc-leak"); inc=1; do_output(fullopt); next; }
/^-Wno-analyzer-free-of-non-heap$/ { fullopt=$0; canonopt=deesc("-Wno-analyzer-free-of-non-heap"); inc=1; do_output(fullopt); next; }
/^-Wno-analyzer-file-leak$/ { fullopt=$0; canonopt=deesc("-Wno-analyzer-file-leak"); inc=1; do_output(fullopt); next; }
/^-Wno-analyzer-exposure-through-output-file$/ { fullopt=$0; canonopt=deesc("-Wno-analyzer-exposure-through-output-file"); inc=1; do_output(fullopt); next; }
/^-Wno-analyzer-double-free$/ { fullopt=$0; canonopt=deesc("-Wno-analyzer-double-free"); inc=1; do_output(fullopt); next; }
/^-Wno-analyzer-double-fclose$/ { fullopt=$0; canonopt=deesc("-Wno-analyzer-double-fclose"); inc=1; do_output(fullopt); next; }
/^-Wno-ampersand$/ { fullopt=$0; canonopt=deesc("-Wno-ampersand"); inc=1; do_output(fullopt); next; }
/^-Wno-alloca-larger-than$/ { fullopt=$0; canonopt=deesc("-Wno-alloca-larger-than"); inc=1; do_output(fullopt); next; }
/^-Wno-alloca$/ { fullopt=$0; canonopt=deesc("-Wno-alloca"); inc=1; do_output(fullopt); next; }
/^-Wno-alloc-zero$/ { fullopt=$0; canonopt=deesc("-Wno-alloc-zero"); inc=1; do_output(fullopt); next; }
/^-Wno-alloc-size-larger-than$/ { fullopt=$0; canonopt=deesc("-Wno-alloc-size-larger-than"); inc=1; do_output(fullopt); next; }
/^-Wno-all$/ { fullopt=$0; canonopt=deesc("-Wno-all"); inc=1; do_output(fullopt); next; }
/^-Wno-aligned-new$/ { fullopt=$0; canonopt=deesc("-Wno-aligned-new"); inc=1; do_output(fullopt); next; }
/^-Wno-align-commons$/ { fullopt=$0; canonopt=deesc("-Wno-align-commons"); inc=1; do_output(fullopt); next; }
/^-Wno-aliasing$/ { fullopt=$0; canonopt=deesc("-Wno-aliasing"); inc=1; do_output(fullopt); next; }
/^-Wno-aggressive-loop-optimizations$/ { fullopt=$0; canonopt=deesc("-Wno-aggressive-loop-optimizations"); inc=1; do_output(fullopt); next; }
/^-Wno-aggregate-return$/ { fullopt=$0; canonopt=deesc("-Wno-aggregate-return"); inc=1; do_output(fullopt); next; }
/^-Wno-address-of-packed-member$/ { fullopt=$0; canonopt=deesc("-Wno-address-of-packed-member"); inc=1; do_output(fullopt); next; }
/^-Wno-address$/ { fullopt=$0; canonopt=deesc("-Wno-address"); inc=1; do_output(fullopt); next; }
/^-Wno-absolute-value$/ { fullopt=$0; canonopt=deesc("-Wno-absolute-value"); inc=1; do_output(fullopt); next; }
/^-Wno-abi-tag$/ { fullopt=$0; canonopt=deesc("-Wno-abi-tag"); inc=1; do_output(fullopt); next; }
/^-Wno-abi$/ { fullopt=$0; canonopt=deesc("-Wno-abi"); inc=1; do_output(fullopt); next; }
/^-Wno-NSObject-attribute$/ { fullopt=$0; canonopt=deesc("-Wno-NSObject-attribute"); inc=1; do_output(fullopt); next; }
/^-Wno-$/ { fullopt=$0; canonopt=deesc("-Wno-"); inc=1; do_output(fullopt); next; }
/^-Wnested-externs$/ { fullopt=$0; canonopt=deesc("-Wnested-externs"); inc=1; do_output(fullopt); next; }
/^-Wnarrowing$/ { fullopt=$0; canonopt=deesc("-Wnarrowing"); inc=1; do_output(fullopt); next; }
/^-Wnamespaces$/ { fullopt=$0; canonopt=deesc("-Wnamespaces"); inc=1; do_output(fullopt); next; }
/^-Wmultistatement-macros$/ { fullopt=$0; canonopt=deesc("-Wmultistatement-macros"); inc=1; do_output(fullopt); next; }
/^-Wmultiple-inheritance$/ { fullopt=$0; canonopt=deesc("-Wmultiple-inheritance"); inc=1; do_output(fullopt); next; }
/^-Wmultichar$/ { fullopt=$0; canonopt=deesc("-Wmultichar"); inc=1; do_output(fullopt); next; }
/^-Wmudflap$/ { fullopt=$0; canonopt=deesc("-Wmudflap"); inc=1; do_output(fullopt); next; }
/^-Wmissing-prototypes$/ { fullopt=$0; canonopt=deesc("-Wmissing-prototypes"); inc=1; do_output(fullopt); next; }
/^-Wmissing-profile$/ { fullopt=$0; canonopt=deesc("-Wmissing-profile"); inc=1; do_output(fullopt); next; }
/^-Wmissing-parameter-type$/ { fullopt=$0; canonopt=deesc("-Wmissing-parameter-type"); inc=1; do_output(fullopt); next; }
/^-Wmissing-noreturn$/ { fullopt=$0; canonopt=deesc("-Wmissing-noreturn"); inc=1; do_output(fullopt); next; }
/^-Wmissing-include-dirs$/ { fullopt=$0; canonopt=deesc("-Wmissing-include-dirs"); inc=1; do_output(fullopt); next; }
/^-Wmissing-format-attribute$/ { fullopt=$0; canonopt=deesc("-Wmissing-format-attribute"); inc=1; do_output(fullopt); next; }
/^-Wmissing-field-initializers$/ { fullopt=$0; canonopt=deesc("-Wmissing-field-initializers"); inc=1; do_output(fullopt); next; }
/^-Wmissing-declarations$/ { fullopt=$0; canonopt=deesc("-Wmissing-declarations"); inc=1; do_output(fullopt); next; }
/^-Wmissing-braces$/ { fullopt=$0; canonopt=deesc("-Wmissing-braces"); inc=1; do_output(fullopt); next; }
/^-Wmissing-attributes$/ { fullopt=$0; canonopt=deesc("-Wmissing-attributes"); inc=1; do_output(fullopt); next; }
/^-Wmismatched-tags$/ { fullopt=$0; canonopt=deesc("-Wmismatched-tags"); inc=1; do_output(fullopt); next; }
/^-Wmismatched-new-delete$/ { fullopt=$0; canonopt=deesc("-Wmismatched-new-delete"); inc=1; do_output(fullopt); next; }
/^-Wmismatched-dealloc$/ { fullopt=$0; canonopt=deesc("-Wmismatched-dealloc"); inc=1; do_output(fullopt); next; }
/^-Wmisleading-indentation$/ { fullopt=$0; canonopt=deesc("-Wmisleading-indentation"); inc=1; do_output(fullopt); next; }
/^-Wmemset-transposed-args$/ { fullopt=$0; canonopt=deesc("-Wmemset-transposed-args"); inc=1; do_output(fullopt); next; }
/^-Wmemset-elt-size$/ { fullopt=$0; canonopt=deesc("-Wmemset-elt-size"); inc=1; do_output(fullopt); next; }
/^-Wmaybe-uninitialized$/ { fullopt=$0; canonopt=deesc("-Wmaybe-uninitialized"); inc=1; do_output(fullopt); next; }
/^-Wmain$/ { fullopt=$0; canonopt=deesc("-Wmain"); inc=1; do_output(fullopt); next; }
/^-Wlto-type-mismatch$/ { fullopt=$0; canonopt=deesc("-Wlto-type-mismatch"); inc=1; do_output(fullopt); next; }
/^-Wlong-long$/ { fullopt=$0; canonopt=deesc("-Wlong-long"); inc=1; do_output(fullopt); next; }
/^-Wlogical-op$/ { fullopt=$0; canonopt=deesc("-Wlogical-op"); inc=1; do_output(fullopt); next; }
/^-Wlogical-not-parentheses$/ { fullopt=$0; canonopt=deesc("-Wlogical-not-parentheses"); inc=1; do_output(fullopt); next; }
/^-Wliteral-suffix$/ { fullopt=$0; canonopt=deesc("-Wliteral-suffix"); inc=1; do_output(fullopt); next; }
/^-Wline-truncation$/ { fullopt=$0; canonopt=deesc("-Wline-truncation"); inc=1; do_output(fullopt); next; }
/^(-Wlarger-than=)(.*)$/ { fullopt=$0; canonopt=deesc("-Wlarger-than"); optarg=gensub(/(-Wlarger-than=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Wlarger-than-$/ { fullopt=$0; canonopt=deesc("-Wlarger-than-"); inc=1; do_output(fullopt); next; }
/^-Wjump-misses-init$/ { fullopt=$0; canonopt=deesc("-Wjump-misses-init"); inc=1; do_output(fullopt); next; }
/^-Winvalid-pch$/ { fullopt=$0; canonopt=deesc("-Winvalid-pch"); inc=1; do_output(fullopt); next; }
/^-Winvalid-offsetof$/ { fullopt=$0; canonopt=deesc("-Winvalid-offsetof"); inc=1; do_output(fullopt); next; }
/^-Winvalid-memory-model$/ { fullopt=$0; canonopt=deesc("-Winvalid-memory-model"); inc=1; do_output(fullopt); next; }
/^-Winvalid-imported-macros$/ { fullopt=$0; canonopt=deesc("-Winvalid-imported-macros"); inc=1; do_output(fullopt); next; }
/^-Wintrinsics-std$/ { fullopt=$0; canonopt=deesc("-Wintrinsics-std"); inc=1; do_output(fullopt); next; }
/^-Wintrinsic-shadow$/ { fullopt=$0; canonopt=deesc("-Wintrinsic-shadow"); inc=1; do_output(fullopt); next; }
/^-Winteger-division$/ { fullopt=$0; canonopt=deesc("-Winteger-division"); inc=1; do_output(fullopt); next; }
/^-Wint-to-pointer-cast$/ { fullopt=$0; canonopt=deesc("-Wint-to-pointer-cast"); inc=1; do_output(fullopt); next; }
/^-Wint-in-bool-context$/ { fullopt=$0; canonopt=deesc("-Wint-in-bool-context"); inc=1; do_output(fullopt); next; }
/^-Wint-conversion$/ { fullopt=$0; canonopt=deesc("-Wint-conversion"); inc=1; do_output(fullopt); next; }
/^-Winline$/ { fullopt=$0; canonopt=deesc("-Winline"); inc=1; do_output(fullopt); next; }
/^-Winit-self$/ { fullopt=$0; canonopt=deesc("-Winit-self"); inc=1; do_output(fullopt); next; }
/^-Winit-list-lifetime$/ { fullopt=$0; canonopt=deesc("-Winit-list-lifetime"); inc=1; do_output(fullopt); next; }
/^-Winherited-variadic-ctor$/ { fullopt=$0; canonopt=deesc("-Winherited-variadic-ctor"); inc=1; do_output(fullopt); next; }
/^-Wincompatible-pointer-types$/ { fullopt=$0; canonopt=deesc("-Wincompatible-pointer-types"); inc=1; do_output(fullopt); next; }
/^-Winaccessible-base$/ { fullopt=$0; canonopt=deesc("-Winaccessible-base"); inc=1; do_output(fullopt); next; }
/^-Wimport$/ { fullopt=$0; canonopt=deesc("-Wimport"); inc=1; do_output(fullopt); next; }
/^-Wimplicit-procedure$/ { fullopt=$0; canonopt=deesc("-Wimplicit-procedure"); inc=1; do_output(fullopt); next; }
/^-Wimplicit-interface$/ { fullopt=$0; canonopt=deesc("-Wimplicit-interface"); inc=1; do_output(fullopt); next; }
/^-Wimplicit-int$/ { fullopt=$0; canonopt=deesc("-Wimplicit-int"); inc=1; do_output(fullopt); next; }
/^-Wimplicit-function-declaration$/ { fullopt=$0; canonopt=deesc("-Wimplicit-function-declaration"); inc=1; do_output(fullopt); next; }
/^(-Wimplicit-fallthrough=)(.*)$/ { fullopt=$0; canonopt=deesc("-Wimplicit-fallthrough"); optarg=gensub(/(-Wimplicit-fallthrough=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Wimplicit-fallthrough$/ { fullopt=$0; canonopt=deesc("-Wimplicit-fallthrough"); inc=1; do_output(fullopt); next; }
/^-Wimplicit$/ { fullopt=$0; canonopt=deesc("-Wimplicit"); inc=1; do_output(fullopt); next; }
/^-Wignored-qualifiers$/ { fullopt=$0; canonopt=deesc("-Wignored-qualifiers"); inc=1; do_output(fullopt); next; }
/^-Wignored-attributes$/ { fullopt=$0; canonopt=deesc("-Wignored-attributes"); inc=1; do_output(fullopt); next; }
/^-Wif-not-aligned$/ { fullopt=$0; canonopt=deesc("-Wif-not-aligned"); inc=1; do_output(fullopt); next; }
/^-Whsa$/ { fullopt=$0; canonopt=deesc("-Whsa"); inc=1; do_output(fullopt); next; }
/^-Wfunction-elimination$/ { fullopt=$0; canonopt=deesc("-Wfunction-elimination"); inc=1; do_output(fullopt); next; }
/^-Wfrontend-loop-interchange$/ { fullopt=$0; canonopt=deesc("-Wfrontend-loop-interchange"); inc=1; do_output(fullopt); next; }
/^-Wfree-nonheap-object$/ { fullopt=$0; canonopt=deesc("-Wfree-nonheap-object"); inc=1; do_output(fullopt); next; }
/^(-Wframe-larger-than=)(.*)$/ { fullopt=$0; canonopt=deesc("-Wframe-larger-than"); optarg=gensub(/(-Wframe-larger-than=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Wframe-address$/ { fullopt=$0; canonopt=deesc("-Wframe-address"); inc=1; do_output(fullopt); next; }
/^(-Wformat=)(.*)$/ { fullopt=$0; canonopt=deesc("-Wformat"); optarg=gensub(/(-Wformat=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Wformat-zero-length$/ { fullopt=$0; canonopt=deesc("-Wformat-zero-length"); inc=1; do_output(fullopt); next; }
/^-Wformat-y2k$/ { fullopt=$0; canonopt=deesc("-Wformat-y2k"); inc=1; do_output(fullopt); next; }
/^(-Wformat-truncation=)(.*)$/ { fullopt=$0; canonopt=deesc("-Wformat-truncation"); optarg=gensub(/(-Wformat-truncation=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Wformat-truncation$/ { fullopt=$0; canonopt=deesc("-Wformat-truncation"); inc=1; do_output(fullopt); next; }
/^-Wformat-signedness$/ { fullopt=$0; canonopt=deesc("-Wformat-signedness"); inc=1; do_output(fullopt); next; }
/^-Wformat-security$/ { fullopt=$0; canonopt=deesc("-Wformat-security"); inc=1; do_output(fullopt); next; }
/^(-Wformat-overflow)(.*)$/ { fullopt=$0; canonopt=deesc("-Wformat-overflow"); optarg=gensub(/(-Wformat-overflow)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-Wformat-overflow=)(.*)$/ { fullopt=$0; canonopt=deesc("-Wformat-overflow"); optarg=gensub(/(-Wformat-overflow=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Wformat-nonliteral$/ { fullopt=$0; canonopt=deesc("-Wformat-nonliteral"); inc=1; do_output(fullopt); next; }
/^-Wformat-extra-args$/ { fullopt=$0; canonopt=deesc("-Wformat-extra-args"); inc=1; do_output(fullopt); next; }
/^-Wformat-diag$/ { fullopt=$0; canonopt=deesc("-Wformat-diag"); inc=1; do_output(fullopt); next; }
/^-Wformat-contains-nul$/ { fullopt=$0; canonopt=deesc("-Wformat-contains-nul"); inc=1; do_output(fullopt); next; }
/^-Wformat$/ { fullopt=$0; canonopt=deesc("-Wformat"); inc=1; do_output(fullopt); next; }
/^-Wfloat-equal$/ { fullopt=$0; canonopt=deesc("-Wfloat-equal"); inc=1; do_output(fullopt); next; }
/^-Wfloat-conversion$/ { fullopt=$0; canonopt=deesc("-Wfloat-conversion"); inc=1; do_output(fullopt); next; }
/^-Wfatal-errors$/ { fullopt=$0; canonopt=deesc("-Wfatal-errors"); inc=1; do_output(fullopt); next; }
/^-Wextra-semi$/ { fullopt=$0; canonopt=deesc("-Wextra-semi"); inc=1; do_output(fullopt); next; }
/^-Wextra$/ { fullopt=$0; canonopt=deesc("-Wextra"); inc=1; do_output(fullopt); next; }
/^-Wexpansion-to-defined$/ { fullopt=$0; canonopt=deesc("-Wexpansion-to-defined"); inc=1; do_output(fullopt); next; }
/^-Wexceptions$/ { fullopt=$0; canonopt=deesc("-Wexceptions"); inc=1; do_output(fullopt); next; }
/^(-Werror=)(.*)$/ { fullopt=$0; canonopt=deesc("-Werror"); optarg=gensub(/(-Werror=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Werror-implicit-function-declaration$/ { fullopt=$0; canonopt=deesc("-Werror-implicit-function-declaration"); inc=1; do_output(fullopt); next; }
/^-Werror$/ { fullopt=$0; canonopt=deesc("-Werror"); inc=1; do_output(fullopt); next; }
/^-Wenum-conversion$/ { fullopt=$0; canonopt=deesc("-Wenum-conversion"); inc=1; do_output(fullopt); next; }
/^-Wenum-compare$/ { fullopt=$0; canonopt=deesc("-Wenum-compare"); inc=1; do_output(fullopt); next; }
/^-Wendif-labels$/ { fullopt=$0; canonopt=deesc("-Wendif-labels"); inc=1; do_output(fullopt); next; }
/^-Wempty-body$/ { fullopt=$0; canonopt=deesc("-Wempty-body"); inc=1; do_output(fullopt); next; }
/^-Weffc\+\+$/ { fullopt=$0; canonopt=deesc("-Weffc\+\+"); inc=1; do_output(fullopt); next; }
/^-Wduplicated-cond$/ { fullopt=$0; canonopt=deesc("-Wduplicated-cond"); inc=1; do_output(fullopt); next; }
/^-Wduplicated-branches$/ { fullopt=$0; canonopt=deesc("-Wduplicated-branches"); inc=1; do_output(fullopt); next; }
/^-Wduplicate-decl-specifier$/ { fullopt=$0; canonopt=deesc("-Wduplicate-decl-specifier"); inc=1; do_output(fullopt); next; }
/^-Wdouble-promotion$/ { fullopt=$0; canonopt=deesc("-Wdouble-promotion"); inc=1; do_output(fullopt); next; }
/^-Wdo-subscript$/ { fullopt=$0; canonopt=deesc("-Wdo-subscript"); inc=1; do_output(fullopt); next; }
/^-Wdiv-by-zero$/ { fullopt=$0; canonopt=deesc("-Wdiv-by-zero"); inc=1; do_output(fullopt); next; }
/^-Wdiscarded-qualifiers$/ { fullopt=$0; canonopt=deesc("-Wdiscarded-qualifiers"); inc=1; do_output(fullopt); next; }
/^-Wdiscarded-array-qualifiers$/ { fullopt=$0; canonopt=deesc("-Wdiscarded-array-qualifiers"); inc=1; do_output(fullopt); next; }
/^-Wdisabled-optimization$/ { fullopt=$0; canonopt=deesc("-Wdisabled-optimization"); inc=1; do_output(fullopt); next; }
/^-Wdesignated-init$/ { fullopt=$0; canonopt=deesc("-Wdesignated-init"); inc=1; do_output(fullopt); next; }
/^-Wdeprecated-enum-float-conversion$/ { fullopt=$0; canonopt=deesc("-Wdeprecated-enum-float-conversion"); inc=1; do_output(fullopt); next; }
/^-Wdeprecated-enum-enum-conversion$/ { fullopt=$0; canonopt=deesc("-Wdeprecated-enum-enum-conversion"); inc=1; do_output(fullopt); next; }
/^-Wdeprecated-declarations$/ { fullopt=$0; canonopt=deesc("-Wdeprecated-declarations"); inc=1; do_output(fullopt); next; }
/^-Wdeprecated-copy-dtor$/ { fullopt=$0; canonopt=deesc("-Wdeprecated-copy-dtor"); inc=1; do_output(fullopt); next; }
/^-Wdeprecated-copy$/ { fullopt=$0; canonopt=deesc("-Wdeprecated-copy"); inc=1; do_output(fullopt); next; }
/^-Wdeprecated$/ { fullopt=$0; canonopt=deesc("-Wdeprecated"); inc=1; do_output(fullopt); next; }
/^-Wdelete-non-virtual-dtor$/ { fullopt=$0; canonopt=deesc("-Wdelete-non-virtual-dtor"); inc=1; do_output(fullopt); next; }
/^-Wdelete-incomplete$/ { fullopt=$0; canonopt=deesc("-Wdelete-incomplete"); inc=1; do_output(fullopt); next; }
/^-Wdeclaration-after-statement$/ { fullopt=$0; canonopt=deesc("-Wdeclaration-after-statement"); inc=1; do_output(fullopt); next; }
/^-Wdate-time$/ { fullopt=$0; canonopt=deesc("-Wdate-time"); inc=1; do_output(fullopt); next; }
/^-Wdangling-else$/ { fullopt=$0; canonopt=deesc("-Wdangling-else"); inc=1; do_output(fullopt); next; }
/^-Wctor-dtor-privacy$/ { fullopt=$0; canonopt=deesc("-Wctor-dtor-privacy"); inc=1; do_output(fullopt); next; }
/^-Wctad-maybe-unsupported$/ { fullopt=$0; canonopt=deesc("-Wctad-maybe-unsupported"); inc=1; do_output(fullopt); next; }
/^-Wcpp$/ { fullopt=$0; canonopt=deesc("-Wcpp"); inc=1; do_output(fullopt); next; }
/^-Wcoverage-mismatch$/ { fullopt=$0; canonopt=deesc("-Wcoverage-mismatch"); inc=1; do_output(fullopt); next; }
/^-Wconversion-null$/ { fullopt=$0; canonopt=deesc("-Wconversion-null"); inc=1; do_output(fullopt); next; }
/^-Wconversion-extra$/ { fullopt=$0; canonopt=deesc("-Wconversion-extra"); inc=1; do_output(fullopt); next; }
/^-Wconversion$/ { fullopt=$0; canonopt=deesc("-Wconversion"); inc=1; do_output(fullopt); next; }
/^-Wconditionally-supported$/ { fullopt=$0; canonopt=deesc("-Wconditionally-supported"); inc=1; do_output(fullopt); next; }
/^-Wcompare-reals$/ { fullopt=$0; canonopt=deesc("-Wcompare-reals"); inc=1; do_output(fullopt); next; }
/^-Wcomments$/ { fullopt=$0; canonopt=deesc("-Wcomments"); inc=1; do_output(fullopt); next; }
/^-Wcomment$/ { fullopt=$0; canonopt=deesc("-Wcomment"); inc=1; do_output(fullopt); next; }
/^-Wcomma-subscript$/ { fullopt=$0; canonopt=deesc("-Wcomma-subscript"); inc=1; do_output(fullopt); next; }
/^-Wclobbered$/ { fullopt=$0; canonopt=deesc("-Wclobbered"); inc=1; do_output(fullopt); next; }
/^-Wclass-memaccess$/ { fullopt=$0; canonopt=deesc("-Wclass-memaccess"); inc=1; do_output(fullopt); next; }
/^-Wclass-conversion$/ { fullopt=$0; canonopt=deesc("-Wclass-conversion"); inc=1; do_output(fullopt); next; }
/^-Wchkp$/ { fullopt=$0; canonopt=deesc("-Wchkp"); inc=1; do_output(fullopt); next; }
/^-Wcharacter-truncation$/ { fullopt=$0; canonopt=deesc("-Wcharacter-truncation"); inc=1; do_output(fullopt); next; }
/^-Wchar-subscripts$/ { fullopt=$0; canonopt=deesc("-Wchar-subscripts"); inc=1; do_output(fullopt); next; }
/^(-Wcatch-value=)(.*)$/ { fullopt=$0; canonopt=deesc("-Wcatch-value"); optarg=gensub(/(-Wcatch-value=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Wcatch-value$/ { fullopt=$0; canonopt=deesc("-Wcatch-value"); inc=1; do_output(fullopt); next; }
/^-Wcast-result$/ { fullopt=$0; canonopt=deesc("-Wcast-result"); inc=1; do_output(fullopt); next; }
/^-Wcast-qual$/ { fullopt=$0; canonopt=deesc("-Wcast-qual"); inc=1; do_output(fullopt); next; }
/^-Wcast-function-type$/ { fullopt=$0; canonopt=deesc("-Wcast-function-type"); inc=1; do_output(fullopt); next; }
/^(-Wcast-align=)(.*)$/ { fullopt=$0; canonopt=deesc("-Wcast-align"); optarg=gensub(/(-Wcast-align=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Wcast-align$/ { fullopt=$0; canonopt=deesc("-Wcast-align"); inc=1; do_output(fullopt); next; }
/^-Wcannot-profile$/ { fullopt=$0; canonopt=deesc("-Wcannot-profile"); inc=1; do_output(fullopt); next; }
/^-Wc99-c11-compat$/ { fullopt=$0; canonopt=deesc("-Wc99-c11-compat"); inc=1; do_output(fullopt); next; }
/^-Wc90-c99-compat$/ { fullopt=$0; canonopt=deesc("-Wc90-c99-compat"); inc=1; do_output(fullopt); next; }
/^-Wc11-c2x-compat$/ { fullopt=$0; canonopt=deesc("-Wc11-c2x-compat"); inc=1; do_output(fullopt); next; }
/^-Wc-binding-type$/ { fullopt=$0; canonopt=deesc("-Wc-binding-type"); inc=1; do_output(fullopt); next; }
/^-Wc\+\+2a-compat$/ { fullopt=$0; canonopt=deesc("-Wc\+\+2a-compat"); inc=1; do_output(fullopt); next; }
/^-Wc\+\+20-compat$/ { fullopt=$0; canonopt=deesc("-Wc\+\+20-compat"); inc=1; do_output(fullopt); next; }
/^-Wc\+\+1z-compat$/ { fullopt=$0; canonopt=deesc("-Wc\+\+1z-compat"); inc=1; do_output(fullopt); next; }
/^-Wc\+\+17-compat$/ { fullopt=$0; canonopt=deesc("-Wc\+\+17-compat"); inc=1; do_output(fullopt); next; }
/^-Wc\+\+14-compat$/ { fullopt=$0; canonopt=deesc("-Wc\+\+14-compat"); inc=1; do_output(fullopt); next; }
/^-Wc\+\+11-compat$/ { fullopt=$0; canonopt=deesc("-Wc\+\+11-compat"); inc=1; do_output(fullopt); next; }
/^-Wc\+\+0x-compat$/ { fullopt=$0; canonopt=deesc("-Wc\+\+0x-compat"); inc=1; do_output(fullopt); next; }
/^-Wc\+\+-compat$/ { fullopt=$0; canonopt=deesc("-Wc\+\+-compat"); inc=1; do_output(fullopt); next; }
/^-Wbuiltin-macro-redefined$/ { fullopt=$0; canonopt=deesc("-Wbuiltin-macro-redefined"); inc=1; do_output(fullopt); next; }
/^-Wbuiltin-declaration-mismatch$/ { fullopt=$0; canonopt=deesc("-Wbuiltin-declaration-mismatch"); inc=1; do_output(fullopt); next; }
/^-Wbool-operation$/ { fullopt=$0; canonopt=deesc("-Wbool-operation"); inc=1; do_output(fullopt); next; }
/^-Wbool-compare$/ { fullopt=$0; canonopt=deesc("-Wbool-compare"); inc=1; do_output(fullopt); next; }
/^-Wbad-function-cast$/ { fullopt=$0; canonopt=deesc("-Wbad-function-cast"); inc=1; do_output(fullopt); next; }
/^-Wattributes$/ { fullopt=$0; canonopt=deesc("-Wattributes"); inc=1; do_output(fullopt); next; }
/^-Wattribute-warning$/ { fullopt=$0; canonopt=deesc("-Wattribute-warning"); inc=1; do_output(fullopt); next; }
/^(-Wattribute-alias=)(.*)$/ { fullopt=$0; canonopt=deesc("-Wattribute-alias"); optarg=gensub(/(-Wattribute-alias=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Wattribute-alias$/ { fullopt=$0; canonopt=deesc("-Wattribute-alias"); inc=1; do_output(fullopt); next; }
/^-Wassign-intercept$/ { fullopt=$0; canonopt=deesc("-Wassign-intercept"); inc=1; do_output(fullopt); next; }
/^-Warray-temporaries$/ { fullopt=$0; canonopt=deesc("-Warray-temporaries"); inc=1; do_output(fullopt); next; }
/^(-Warray-parameter=)(.*)$/ { fullopt=$0; canonopt=deesc("-Warray-parameter"); optarg=gensub(/(-Warray-parameter=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Warray-parameter$/ { fullopt=$0; canonopt=deesc("-Warray-parameter"); inc=1; do_output(fullopt); next; }
/^(-Warray-bounds=)(.*)$/ { fullopt=$0; canonopt=deesc("-Warray-bounds"); optarg=gensub(/(-Warray-bounds=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Warray-bounds$/ { fullopt=$0; canonopt=deesc("-Warray-bounds"); inc=1; do_output(fullopt); next; }
/^-Warith-conversion$/ { fullopt=$0; canonopt=deesc("-Warith-conversion"); inc=1; do_output(fullopt); next; }
/^-Wargument-mismatch$/ { fullopt=$0; canonopt=deesc("-Wargument-mismatch"); inc=1; do_output(fullopt); next; }
/^-Wanalyzer-write-to-string-literal$/ { fullopt=$0; canonopt=deesc("-Wanalyzer-write-to-string-literal"); inc=1; do_output(fullopt); next; }
/^-Wanalyzer-write-to-const$/ { fullopt=$0; canonopt=deesc("-Wanalyzer-write-to-const"); inc=1; do_output(fullopt); next; }
/^-Wanalyzer-use-of-pointer-in-stale-stack-frame$/ { fullopt=$0; canonopt=deesc("-Wanalyzer-use-of-pointer-in-stale-stack-frame"); inc=1; do_output(fullopt); next; }
/^-Wanalyzer-use-after-free$/ { fullopt=$0; canonopt=deesc("-Wanalyzer-use-after-free"); inc=1; do_output(fullopt); next; }
/^-Wanalyzer-unsafe-call-within-signal-handler$/ { fullopt=$0; canonopt=deesc("-Wanalyzer-unsafe-call-within-signal-handler"); inc=1; do_output(fullopt); next; }
/^-Wanalyzer-too-complex$/ { fullopt=$0; canonopt=deesc("-Wanalyzer-too-complex"); inc=1; do_output(fullopt); next; }
/^-Wanalyzer-tainted-array-index$/ { fullopt=$0; canonopt=deesc("-Wanalyzer-tainted-array-index"); inc=1; do_output(fullopt); next; }
/^-Wanalyzer-stale-setjmp-buffer$/ { fullopt=$0; canonopt=deesc("-Wanalyzer-stale-setjmp-buffer"); inc=1; do_output(fullopt); next; }
/^-Wanalyzer-shift-count-overflow$/ { fullopt=$0; canonopt=deesc("-Wanalyzer-shift-count-overflow"); inc=1; do_output(fullopt); next; }
/^-Wanalyzer-shift-count-negative$/ { fullopt=$0; canonopt=deesc("-Wanalyzer-shift-count-negative"); inc=1; do_output(fullopt); next; }
/^-Wanalyzer-possible-null-dereference$/ { fullopt=$0; canonopt=deesc("-Wanalyzer-possible-null-dereference"); inc=1; do_output(fullopt); next; }
/^-Wanalyzer-possible-null-argument$/ { fullopt=$0; canonopt=deesc("-Wanalyzer-possible-null-argument"); inc=1; do_output(fullopt); next; }
/^-Wanalyzer-null-dereference$/ { fullopt=$0; canonopt=deesc("-Wanalyzer-null-dereference"); inc=1; do_output(fullopt); next; }
/^-Wanalyzer-null-argument$/ { fullopt=$0; canonopt=deesc("-Wanalyzer-null-argument"); inc=1; do_output(fullopt); next; }
/^-Wanalyzer-mismatching-deallocation$/ { fullopt=$0; canonopt=deesc("-Wanalyzer-mismatching-deallocation"); inc=1; do_output(fullopt); next; }
/^-Wanalyzer-malloc-leak$/ { fullopt=$0; canonopt=deesc("-Wanalyzer-malloc-leak"); inc=1; do_output(fullopt); next; }
/^-Wanalyzer-free-of-non-heap$/ { fullopt=$0; canonopt=deesc("-Wanalyzer-free-of-non-heap"); inc=1; do_output(fullopt); next; }
/^-Wanalyzer-file-leak$/ { fullopt=$0; canonopt=deesc("-Wanalyzer-file-leak"); inc=1; do_output(fullopt); next; }
/^-Wanalyzer-exposure-through-output-file$/ { fullopt=$0; canonopt=deesc("-Wanalyzer-exposure-through-output-file"); inc=1; do_output(fullopt); next; }
/^-Wanalyzer-double-free$/ { fullopt=$0; canonopt=deesc("-Wanalyzer-double-free"); inc=1; do_output(fullopt); next; }
/^-Wanalyzer-double-fclose$/ { fullopt=$0; canonopt=deesc("-Wanalyzer-double-fclose"); inc=1; do_output(fullopt); next; }
/^-Wampersand$/ { fullopt=$0; canonopt=deesc("-Wampersand"); inc=1; do_output(fullopt); next; }
/^(-Walloca-larger-than=)(.*)$/ { fullopt=$0; canonopt=deesc("-Walloca-larger-than"); optarg=gensub(/(-Walloca-larger-than=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Walloca$/ { fullopt=$0; canonopt=deesc("-Walloca"); inc=1; do_output(fullopt); next; }
/^-Walloc-zero$/ { fullopt=$0; canonopt=deesc("-Walloc-zero"); inc=1; do_output(fullopt); next; }
/^(-Walloc-size-larger-than=)(.*)$/ { fullopt=$0; canonopt=deesc("-Walloc-size-larger-than"); optarg=gensub(/(-Walloc-size-larger-than=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Wall$/ { fullopt=$0; canonopt=deesc("-Wall"); inc=1; do_output(fullopt); next; }
/^(-Waligned-new=)(.*)$/ { fullopt=$0; canonopt=deesc("-Waligned-new"); optarg=gensub(/(-Waligned-new=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Waligned-new$/ { fullopt=$0; canonopt=deesc("-Waligned-new"); inc=1; do_output(fullopt); next; }
/^-Walign-commons$/ { fullopt=$0; canonopt=deesc("-Walign-commons"); inc=1; do_output(fullopt); next; }
/^-Waliasing$/ { fullopt=$0; canonopt=deesc("-Waliasing"); inc=1; do_output(fullopt); next; }
/^-Waggressive-loop-optimizations$/ { fullopt=$0; canonopt=deesc("-Waggressive-loop-optimizations"); inc=1; do_output(fullopt); next; }
/^-Waggregate-return$/ { fullopt=$0; canonopt=deesc("-Waggregate-return"); inc=1; do_output(fullopt); next; }
/^-Waddress-of-packed-member$/ { fullopt=$0; canonopt=deesc("-Waddress-of-packed-member"); inc=1; do_output(fullopt); next; }
/^-Waddress$/ { fullopt=$0; canonopt=deesc("-Waddress"); inc=1; do_output(fullopt); next; }
/^-Wabsolute-value$/ { fullopt=$0; canonopt=deesc("-Wabsolute-value"); inc=1; do_output(fullopt); next; }
/^(-Wabi=)(.*)$/ { fullopt=$0; canonopt=deesc("-Wabi"); optarg=gensub(/(-Wabi=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Wabi-tag$/ { fullopt=$0; canonopt=deesc("-Wabi-tag"); inc=1; do_output(fullopt); next; }
/^-Wabi$/ { fullopt=$0; canonopt=deesc("-Wabi"); inc=1; do_output(fullopt); next; }
/^-WNSObject-attribute$/ { fullopt=$0; canonopt=deesc("-WNSObject-attribute"); inc=1; do_output(fullopt); next; }
/^-W$/ { fullopt=$0; canonopt=deesc("-W"); inc=1; do_output(fullopt); next; }
/^(-U)$/     { fullopt=$0; canonopt=deesc("-U"); snarfing_optarg=1; inc=2; next; }
/^(-U)(.*)$/ { fullopt=$0; canonopt=deesc("-U"); optarg=gensub(/(-U)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-P$/ { fullopt=$0; canonopt=deesc("-P"); inc=1; do_output(fullopt); next; }
/^-Os$/ { fullopt=$0; canonopt=deesc("-Os"); inc=1; do_output(fullopt); next; }
/^-Og$/ { fullopt=$0; canonopt=deesc("-Og"); inc=1; do_output(fullopt); next; }
/^-Ofast$/ { fullopt=$0; canonopt=deesc("-Ofast"); inc=1; do_output(fullopt); next; }
/^(-O)(.*)$/ { fullopt=$0; canonopt=deesc("-O"); optarg=gensub(/(-O)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Mno-modules$/ { fullopt=$0; canonopt=deesc("-Mno-modules"); inc=1; do_output(fullopt); next; }
/^-Mmodules$/ { fullopt=$0; canonopt=deesc("-Mmodules"); inc=1; do_output(fullopt); next; }
/^(-MT)$/     { fullopt=$0; canonopt=deesc("-MT"); snarfing_optarg=1; inc=2; next; }
/^(-MQ)$/     { fullopt=$0; canonopt=deesc("-MQ"); snarfing_optarg=1; inc=2; next; }
/^-MP$/ { fullopt=$0; canonopt=deesc("-MP"); inc=1; do_output(fullopt); next; }
/^(-MMD)$/     { fullopt=$0; canonopt=deesc("-MMD"); snarfing_optarg=1; inc=2; next; }
/^-MM$/ { fullopt=$0; canonopt=deesc("-MM"); inc=1; do_output(fullopt); next; }
/^-MG$/ { fullopt=$0; canonopt=deesc("-MG"); inc=1; do_output(fullopt); next; }
/^(-MF)$/     { fullopt=$0; canonopt=deesc("-MF"); snarfing_optarg=1; inc=2; next; }
/^(-MD)$/     { fullopt=$0; canonopt=deesc("-MD"); snarfing_optarg=1; inc=2; next; }
/^-M$/ { fullopt=$0; canonopt=deesc("-M"); inc=1; do_output(fullopt); next; }
/^(-L)$/     { fullopt=$0; canonopt=deesc("-L"); snarfing_optarg=1; inc=2; next; }
/^(-J)$/     { fullopt=$0; canonopt=deesc("-J"); snarfing_optarg=1; inc=2; next; }
/^(-J)(.*)$/ { fullopt=$0; canonopt=deesc("-J"); optarg=gensub(/(-J)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-I)$/     { fullopt=$0; canonopt=deesc("-I"); snarfing_optarg=1; inc=2; next; }
/^(-Hf)$/     { fullopt=$0; canonopt=deesc("-Hf"); snarfing_optarg=1; inc=2; next; }
/^(-Hd)$/     { fullopt=$0; canonopt=deesc("-Hd"); snarfing_optarg=1; inc=2; next; }
/^-H$/ { fullopt=$0; canonopt=deesc("-H"); inc=1; do_output(fullopt); next; }
/^(-F)$/     { fullopt=$0; canonopt=deesc("-F"); snarfing_optarg=1; inc=2; next; }
/^(-D)$/     { fullopt=$0; canonopt=deesc("-D"); snarfing_optarg=1; inc=2; next; }
/^(-D)(.*)$/ { fullopt=$0; canonopt=deesc("-D"); optarg=gensub(/(-D)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-CC$/ { fullopt=$0; canonopt=deesc("-CC"); inc=1; do_output(fullopt); next; }
/^-C$/ { fullopt=$0; canonopt=deesc("-C"); inc=1; do_output(fullopt); next; }
/^(-A)$/     { fullopt=$0; canonopt=deesc("-A"); snarfing_optarg=1; inc=2; next; }
/^(-A)(.*)$/ { fullopt=$0; canonopt=deesc("-A"); optarg=gensub(/(-A)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(--write-user-dependencies)$/     { fullopt=$0; canonopt=deesc("--write-user-dependencies"); snarfing_optarg=1; inc=2; next; }
/^(--write-dependencies)$/     { fullopt=$0; canonopt=deesc("--write-dependencies"); snarfing_optarg=1; inc=2; next; }
/^--version$/ { fullopt=$0; canonopt=deesc("--version"); inc=1; do_output(fullopt); next; }
/^--verbose$/ { fullopt=$0; canonopt=deesc("--verbose"); inc=1; do_output(fullopt); next; }
/^--user-dependencies$/ { fullopt=$0; canonopt=deesc("--user-dependencies"); inc=1; do_output(fullopt); next; }
/^(--undefine-macro)$/     { fullopt=$0; canonopt=deesc("--undefine-macro"); snarfing_optarg=1; inc=2; next; }
/^(--undefine-macro=)(.*)$/ { fullopt=$0; canonopt=deesc("--undefine-macro"); optarg=gensub(/(--undefine-macro=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^--trigraphs$/ { fullopt=$0; canonopt=deesc("--trigraphs"); inc=1; do_output(fullopt); next; }
/^--traditional-cpp$/ { fullopt=$0; canonopt=deesc("--traditional-cpp"); inc=1; do_output(fullopt); next; }
/^--trace-includes$/ { fullopt=$0; canonopt=deesc("--trace-includes"); inc=1; do_output(fullopt); next; }
/^--target-help$/ { fullopt=$0; canonopt=deesc("--target-help"); inc=1; do_output(fullopt); next; }
/^--profile$/ { fullopt=$0; canonopt=deesc("--profile"); inc=1; do_output(fullopt); next; }
/^--print-missing-file-dependencies$/ { fullopt=$0; canonopt=deesc("--print-missing-file-dependencies"); inc=1; do_output(fullopt); next; }
/^--preprocess$/ { fullopt=$0; canonopt=deesc("--preprocess"); inc=1; do_output(fullopt); next; }
/^--pedantic-errors$/ { fullopt=$0; canonopt=deesc("--pedantic-errors"); inc=1; do_output(fullopt); next; }
/^--pedantic$/ { fullopt=$0; canonopt=deesc("--pedantic"); inc=1; do_output(fullopt); next; }
/^(--param=)(.*)$/ { fullopt=$0; canonopt=deesc("--param"); optarg=gensub(/(--param=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(--output)$/     { fullopt=$0; canonopt=deesc("--output"); snarfing_optarg=1; inc=2; next; }
/^(--output=)(.*)$/ { fullopt=$0; canonopt=deesc("--output"); optarg=gensub(/(--output=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(--output-pch)$/     { fullopt=$0; canonopt=deesc("--output-pch"); snarfing_optarg=1; inc=2; next; }
/^(--output-pch=)(.*)$/ { fullopt=$0; canonopt=deesc("--output-pch"); optarg=gensub(/(--output-pch=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^--optimize$/ { fullopt=$0; canonopt=deesc("--optimize"); inc=1; do_output(fullopt); next; }
/^--no-warnings$/ { fullopt=$0; canonopt=deesc("--no-warnings"); inc=1; do_output(fullopt); next; }
/^--no-standard-libraries$/ { fullopt=$0; canonopt=deesc("--no-standard-libraries"); inc=1; do_output(fullopt); next; }
/^--no-standard-includes$/ { fullopt=$0; canonopt=deesc("--no-standard-includes"); inc=1; do_output(fullopt); next; }
/^--no-line-commands$/ { fullopt=$0; canonopt=deesc("--no-line-commands"); inc=1; do_output(fullopt); next; }
/^(--include)$/     { fullopt=$0; canonopt=deesc("--include"); snarfing_optarg=1; inc=2; next; }
/^(--include=)(.*)$/ { fullopt=$0; canonopt=deesc("--include"); optarg=gensub(/(--include=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(--include-with-prefix)$/     { fullopt=$0; canonopt=deesc("--include-with-prefix"); snarfing_optarg=1; inc=2; next; }
/^(--include-with-prefix=)(.*)$/ { fullopt=$0; canonopt=deesc("--include-with-prefix"); optarg=gensub(/(--include-with-prefix=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(--include-with-prefix-before)$/     { fullopt=$0; canonopt=deesc("--include-with-prefix-before"); snarfing_optarg=1; inc=2; next; }
/^(--include-with-prefix-before=)(.*)$/ { fullopt=$0; canonopt=deesc("--include-with-prefix-before"); optarg=gensub(/(--include-with-prefix-before=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(--include-with-prefix-after)$/     { fullopt=$0; canonopt=deesc("--include-with-prefix-after"); snarfing_optarg=1; inc=2; next; }
/^(--include-with-prefix-after=)(.*)$/ { fullopt=$0; canonopt=deesc("--include-with-prefix-after"); optarg=gensub(/(--include-with-prefix-after=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(--include-prefix)$/     { fullopt=$0; canonopt=deesc("--include-prefix"); snarfing_optarg=1; inc=2; next; }
/^(--include-prefix=)(.*)$/ { fullopt=$0; canonopt=deesc("--include-prefix"); optarg=gensub(/(--include-prefix=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(--include-directory)$/     { fullopt=$0; canonopt=deesc("--include-directory"); snarfing_optarg=1; inc=2; next; }
/^(--include-directory=)(.*)$/ { fullopt=$0; canonopt=deesc("--include-directory"); optarg=gensub(/(--include-directory=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(--include-directory-after)$/     { fullopt=$0; canonopt=deesc("--include-directory-after"); snarfing_optarg=1; inc=2; next; }
/^(--include-directory-after=)(.*)$/ { fullopt=$0; canonopt=deesc("--include-directory-after"); optarg=gensub(/(--include-directory-after=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^--include-barrier$/ { fullopt=$0; canonopt=deesc("--include-barrier"); inc=1; do_output(fullopt); next; }
/^(--imacros)$/     { fullopt=$0; canonopt=deesc("--imacros"); snarfing_optarg=1; inc=2; next; }
/^(--imacros=)(.*)$/ { fullopt=$0; canonopt=deesc("--imacros"); optarg=gensub(/(--imacros=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(--help=)(.*)$/ { fullopt=$0; canonopt=deesc("--help"); optarg=gensub(/(--help=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^--help$/ { fullopt=$0; canonopt=deesc("--help"); inc=1; do_output(fullopt); next; }
/^--extra-warnings$/ { fullopt=$0; canonopt=deesc("--extra-warnings"); inc=1; do_output(fullopt); next; }
/^(--dumpdir)$/     { fullopt=$0; canonopt=deesc("--dumpdir"); snarfing_optarg=1; inc=2; next; }
/^(--dumpbase)$/     { fullopt=$0; canonopt=deesc("--dumpbase"); snarfing_optarg=1; inc=2; next; }
/^(--dumpbase-ext)$/     { fullopt=$0; canonopt=deesc("--dumpbase-ext"); snarfing_optarg=1; inc=2; next; }
/^(--dump)$/     { fullopt=$0; canonopt=deesc("--dump"); snarfing_optarg=1; inc=2; next; }
/^(--dump=)(.*)$/ { fullopt=$0; canonopt=deesc("--dump"); optarg=gensub(/(--dump=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^--dependencies$/ { fullopt=$0; canonopt=deesc("--dependencies"); inc=1; do_output(fullopt); next; }
/^(--define-macro)$/     { fullopt=$0; canonopt=deesc("--define-macro"); snarfing_optarg=1; inc=2; next; }
/^(--define-macro=)(.*)$/ { fullopt=$0; canonopt=deesc("--define-macro"); optarg=gensub(/(--define-macro=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^--debug$/ { fullopt=$0; canonopt=deesc("--debug"); inc=1; do_output(fullopt); next; }
/^(--completion=)(.*)$/ { fullopt=$0; canonopt=deesc("--completion"); optarg=gensub(/(--completion=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^--comments-in-macros$/ { fullopt=$0; canonopt=deesc("--comments-in-macros"); inc=1; do_output(fullopt); next; }
/^--comments$/ { fullopt=$0; canonopt=deesc("--comments"); inc=1; do_output(fullopt); next; }
/^(--assert)$/     { fullopt=$0; canonopt=deesc("--assert"); snarfing_optarg=1; inc=2; next; }
/^(--assert=)(.*)$/ { fullopt=$0; canonopt=deesc("--assert"); optarg=gensub(/(--assert=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^--ansi$/ { fullopt=$0; canonopt=deesc("--ansi"); inc=1; do_output(fullopt); next; }
/^--all-warnings$/ { fullopt=$0; canonopt=deesc("--all-warnings"); inc=1; do_output(fullopt); next; }
# END GENERATED gcc_cc1_optawk
# manually added cases
/^-E$/ { fullopt=$0; canonopt="-E"; inc=1; do_output(fullopt); next; }
/^(-g)([1-9])$/ { fullopt=$0; canonopt="-g"; optarg=gensub(/^(-g)([1-9])$/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(--auxbase-strip)$/     { fullopt=$0; canonopt=deesc("--auxbase-strip"); snarfing_optarg=1; inc=2; next; }
/^(-auxbase-strip)$/     { fullopt=$0; canonopt=deesc("-auxbase-strip"); snarfing_optarg=1; inc=2; next; }
/^(--auxbase)$/     { fullopt=$0; canonopt=deesc("--auxbase"); snarfing_optarg=1; inc=2; next; }
/^(-auxbase)$/     { fullopt=$0; canonopt=deesc("-auxbase"); snarfing_optarg=1; inc=2; next; }
'

clang_optawk='# BEGIN GENERATED clang_optawk
/^(-z)$/     { fullopt=$0; canonopt=deesc("-z"); snarfing_optarg=1; inc=2; next; }
/^(-x)$/     { fullopt=$0; canonopt=deesc("-x"); snarfing_optarg=1; inc=2; next; }
/^(-working-directory)$/     { fullopt=$0; canonopt=deesc("-working-directory"); snarfing_optarg=1; inc=2; next; }
/^-w$/ { fullopt=$0; canonopt=deesc("-w"); inc=1; do_output(fullopt); next; }
/^(-vtordisp-mode=)(.*)$/ { fullopt=$0; canonopt=deesc("-vtordisp-mode"); optarg=gensub(/(-vtordisp-mode=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-version$/ { fullopt=$0; canonopt=deesc("-version"); inc=1; do_output(fullopt); next; }
/^(-verify=)(.*)$/ { fullopt=$0; canonopt=deesc("-verify"); optarg=gensub(/(-verify=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-verify-pch$/ { fullopt=$0; canonopt=deesc("-verify-pch"); inc=1; do_output(fullopt); next; }
/^(-verify-ignore-unexpected=)(.*)$/ { fullopt=$0; canonopt=deesc("-verify-ignore-unexpected"); optarg=gensub(/(-verify-ignore-unexpected=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-verify-ignore-unexpected$/ { fullopt=$0; canonopt=deesc("-verify-ignore-unexpected"); inc=1; do_output(fullopt); next; }
/^-verify$/ { fullopt=$0; canonopt=deesc("-verify"); inc=1; do_output(fullopt); next; }
/^-vectorize-slp$/ { fullopt=$0; canonopt=deesc("-vectorize-slp"); inc=1; do_output(fullopt); next; }
/^-vectorize-loops$/ { fullopt=$0; canonopt=deesc("-vectorize-loops"); inc=1; do_output(fullopt); next; }
/^-v$/ { fullopt=$0; canonopt=deesc("-v"); inc=1; do_output(fullopt); next; }
/^(-unwindlib=)(.*)$/ { fullopt=$0; canonopt=deesc("-unwindlib"); optarg=gensub(/(-unwindlib=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-unoptimized-cfg$/ { fullopt=$0; canonopt=deesc("-unoptimized-cfg"); inc=1; do_output(fullopt); next; }
/^-undef$/ { fullopt=$0; canonopt=deesc("-undef"); inc=1; do_output(fullopt); next; }
/^(-tune-cpu)$/     { fullopt=$0; canonopt=deesc("-tune-cpu"); snarfing_optarg=1; inc=2; next; }
/^(-triple)$/     { fullopt=$0; canonopt=deesc("-triple"); snarfing_optarg=1; inc=2; next; }
/^-trim-egraph$/ { fullopt=$0; canonopt=deesc("-trim-egraph"); inc=1; do_output(fullopt); next; }
/^-trigraphs$/ { fullopt=$0; canonopt=deesc("-trigraphs"); inc=1; do_output(fullopt); next; }
/^-traditional-cpp$/ { fullopt=$0; canonopt=deesc("-traditional-cpp"); inc=1; do_output(fullopt); next; }
/^-time$/ { fullopt=$0; canonopt=deesc("-time"); inc=1; do_output(fullopt); next; }
/^-templight-dump$/ { fullopt=$0; canonopt=deesc("-templight-dump"); inc=1; do_output(fullopt); next; }
/^(-target-sdk-version=)(.*)$/ { fullopt=$0; canonopt=deesc("-target-sdk-version"); optarg=gensub(/(-target-sdk-version=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-target-linker-version)$/     { fullopt=$0; canonopt=deesc("-target-linker-version"); snarfing_optarg=1; inc=2; next; }
/^(-target-feature)$/     { fullopt=$0; canonopt=deesc("-target-feature"); snarfing_optarg=1; inc=2; next; }
/^(-target-cpu)$/     { fullopt=$0; canonopt=deesc("-target-cpu"); snarfing_optarg=1; inc=2; next; }
/^(-target-abi)$/     { fullopt=$0; canonopt=deesc("-target-abi"); snarfing_optarg=1; inc=2; next; }
/^-sys-header-deps$/ { fullopt=$0; canonopt=deesc("-sys-header-deps"); inc=1; do_output(fullopt); next; }
/^(-sycl-std=)(.*)$/ { fullopt=$0; canonopt=deesc("-sycl-std"); optarg=gensub(/(-sycl-std=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-stdlib=)(.*)$/ { fullopt=$0; canonopt=deesc("-stdlib"); optarg=gensub(/(-stdlib=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-stdlib\+\+-isystem)$/     { fullopt=$0; canonopt=deesc("-stdlib\+\+-isystem"); snarfing_optarg=1; inc=2; next; }
/^(-std=)(.*)$/ { fullopt=$0; canonopt=deesc("-std"); optarg=gensub(/(-std=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-stats-file=)(.*)$/ { fullopt=$0; canonopt=deesc("-stats-file"); optarg=gensub(/(-stats-file=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-static-openmp$/ { fullopt=$0; canonopt=deesc("-static-openmp"); inc=1; do_output(fullopt); next; }
/^-static-libsan$/ { fullopt=$0; canonopt=deesc("-static-libsan"); inc=1; do_output(fullopt); next; }
/^-static-define$/ { fullopt=$0; canonopt=deesc("-static-define"); inc=1; do_output(fullopt); next; }
/^(-stack-usage-file)$/     { fullopt=$0; canonopt=deesc("-stack-usage-file"); snarfing_optarg=1; inc=2; next; }
/^(-stack-protector)$/     { fullopt=$0; canonopt=deesc("-stack-protector"); snarfing_optarg=1; inc=2; next; }
/^(-stack-protector-buffer-size)$/     { fullopt=$0; canonopt=deesc("-stack-protector-buffer-size"); snarfing_optarg=1; inc=2; next; }
/^(-split-dwarf-output)$/     { fullopt=$0; canonopt=deesc("-split-dwarf-output"); snarfing_optarg=1; inc=2; next; }
/^(-split-dwarf-file)$/     { fullopt=$0; canonopt=deesc("-split-dwarf-file"); snarfing_optarg=1; inc=2; next; }
/^-shared-libsan$/ { fullopt=$0; canonopt=deesc("-shared-libsan"); inc=1; do_output(fullopt); next; }
/^-setup-static-analyzer$/ { fullopt=$0; canonopt=deesc("-setup-static-analyzer"); inc=1; do_output(fullopt); next; }
/^(-serialize-diagnostics)$/     { fullopt=$0; canonopt=deesc("-serialize-diagnostics"); snarfing_optarg=1; inc=2; next; }
/^(-serialize-diagnostic-file)$/     { fullopt=$0; canonopt=deesc("-serialize-diagnostic-file"); snarfing_optarg=1; inc=2; next; }
/^(-save-temps=)(.*)$/ { fullopt=$0; canonopt=deesc("-save-temps"); optarg=gensub(/(-save-temps=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-save-temps$/ { fullopt=$0; canonopt=deesc("-save-temps"); inc=1; do_output(fullopt); next; }
/^(-save-stats=)(.*)$/ { fullopt=$0; canonopt=deesc("-save-stats"); optarg=gensub(/(-save-stats=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-save-stats$/ { fullopt=$0; canonopt=deesc("-save-stats"); inc=1; do_output(fullopt); next; }
/^(-rtlib=)(.*)$/ { fullopt=$0; canonopt=deesc("-rtlib"); optarg=gensub(/(-rtlib=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-round-trip-args$/ { fullopt=$0; canonopt=deesc("-round-trip-args"); inc=1; do_output(fullopt); next; }
/^-rewrite-test$/ { fullopt=$0; canonopt=deesc("-rewrite-test"); inc=1; do_output(fullopt); next; }
/^-rewrite-objc$/ { fullopt=$0; canonopt=deesc("-rewrite-objc"); inc=1; do_output(fullopt); next; }
/^-rewrite-macros$/ { fullopt=$0; canonopt=deesc("-rewrite-macros"); inc=1; do_output(fullopt); next; }
/^-rewrite-legacy-objc$/ { fullopt=$0; canonopt=deesc("-rewrite-legacy-objc"); inc=1; do_output(fullopt); next; }
/^(-resource-dir)$/     { fullopt=$0; canonopt=deesc("-resource-dir"); snarfing_optarg=1; inc=2; next; }
/^(-remap-file)$/     { fullopt=$0; canonopt=deesc("-remap-file"); snarfing_optarg=1; inc=2; next; }
/^-relocatable-pch$/ { fullopt=$0; canonopt=deesc("-relocatable-pch"); inc=1; do_output(fullopt); next; }
/^-relaxed-aliasing$/ { fullopt=$0; canonopt=deesc("-relaxed-aliasing"); inc=1; do_output(fullopt); next; }
/^(-record-command-line)$/     { fullopt=$0; canonopt=deesc("-record-command-line"); snarfing_optarg=1; inc=2; next; }
/^-pthread$/ { fullopt=$0; canonopt=deesc("-pthread"); inc=1; do_output(fullopt); next; }
/^-print-targets$/ { fullopt=$0; canonopt=deesc("-print-targets"); inc=1; do_output(fullopt); next; }
/^-print-target-triple$/ { fullopt=$0; canonopt=deesc("-print-target-triple"); inc=1; do_output(fullopt); next; }
/^-print-supported-cpus$/ { fullopt=$0; canonopt=deesc("-print-supported-cpus"); inc=1; do_output(fullopt); next; }
/^-print-stats$/ { fullopt=$0; canonopt=deesc("-print-stats"); inc=1; do_output(fullopt); next; }
/^-print-search-dirs$/ { fullopt=$0; canonopt=deesc("-print-search-dirs"); inc=1; do_output(fullopt); next; }
/^-print-runtime-dir$/ { fullopt=$0; canonopt=deesc("-print-runtime-dir"); inc=1; do_output(fullopt); next; }
/^-print-rocm-search-dirs$/ { fullopt=$0; canonopt=deesc("-print-rocm-search-dirs"); inc=1; do_output(fullopt); next; }
/^-print-resource-dir$/ { fullopt=$0; canonopt=deesc("-print-resource-dir"); inc=1; do_output(fullopt); next; }
/^(-print-prog-name=)(.*)$/ { fullopt=$0; canonopt=deesc("-print-prog-name"); optarg=gensub(/(-print-prog-name=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-print-preamble$/ { fullopt=$0; canonopt=deesc("-print-preamble"); inc=1; do_output(fullopt); next; }
/^-print-multiarch$/ { fullopt=$0; canonopt=deesc("-print-multiarch"); inc=1; do_output(fullopt); next; }
/^-print-libgcc-file-name$/ { fullopt=$0; canonopt=deesc("-print-libgcc-file-name"); inc=1; do_output(fullopt); next; }
/^-print-ivar-layout$/ { fullopt=$0; canonopt=deesc("-print-ivar-layout"); inc=1; do_output(fullopt); next; }
/^(-print-file-name=)(.*)$/ { fullopt=$0; canonopt=deesc("-print-file-name"); optarg=gensub(/(-print-file-name=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-print-effective-triple$/ { fullopt=$0; canonopt=deesc("-print-effective-triple"); inc=1; do_output(fullopt); next; }
/^-print-dependency-directives-minimized-source$/ { fullopt=$0; canonopt=deesc("-print-dependency-directives-minimized-source"); inc=1; do_output(fullopt); next; }
/^(-preamble-bytes=)(.*)$/ { fullopt=$0; canonopt=deesc("-preamble-bytes"); optarg=gensub(/(-preamble-bytes=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-plugin)$/     { fullopt=$0; canonopt=deesc("-plugin"); snarfing_optarg=1; inc=2; next; }
/^(-plugin-arg-)(.*)$/ { fullopt=$0; canonopt=deesc("-plugin-arg-"); optarg=gensub(/(-plugin-arg-)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-pipe$/ { fullopt=$0; canonopt=deesc("-pipe"); inc=1; do_output(fullopt); next; }
/^(-pic-level)$/     { fullopt=$0; canonopt=deesc("-pic-level"); snarfing_optarg=1; inc=2; next; }
/^-pic-is-pie$/ { fullopt=$0; canonopt=deesc("-pic-is-pie"); inc=1; do_output(fullopt); next; }
/^-pg$/ { fullopt=$0; canonopt=deesc("-pg"); inc=1; do_output(fullopt); next; }
/^-pedantic$/ { fullopt=$0; canonopt=deesc("-pedantic"); inc=1; do_output(fullopt); next; }
/^(-pch-through-header=)(.*)$/ { fullopt=$0; canonopt=deesc("-pch-through-header"); optarg=gensub(/(-pch-through-header=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-pch-through-hdrstop-use$/ { fullopt=$0; canonopt=deesc("-pch-through-hdrstop-use"); inc=1; do_output(fullopt); next; }
/^-pch-through-hdrstop-create$/ { fullopt=$0; canonopt=deesc("-pch-through-hdrstop-create"); inc=1; do_output(fullopt); next; }
/^(-opt-record-passes)$/     { fullopt=$0; canonopt=deesc("-opt-record-passes"); snarfing_optarg=1; inc=2; next; }
/^(-opt-record-format)$/     { fullopt=$0; canonopt=deesc("-opt-record-format"); snarfing_optarg=1; inc=2; next; }
/^(-opt-record-file)$/     { fullopt=$0; canonopt=deesc("-opt-record-file"); snarfing_optarg=1; inc=2; next; }
/^(-objcxx-isystem)$/     { fullopt=$0; canonopt=deesc("-objcxx-isystem"); snarfing_optarg=1; inc=2; next; }
/^(-objcmt-whitelist-dir-path=)(.*)$/ { fullopt=$0; canonopt=deesc("-objcmt-whitelist-dir-path"); optarg=gensub(/(-objcmt-whitelist-dir-path=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-objcmt-returns-innerpointer-property$/ { fullopt=$0; canonopt=deesc("-objcmt-returns-innerpointer-property"); inc=1; do_output(fullopt); next; }
/^-objcmt-ns-nonatomic-iosonly$/ { fullopt=$0; canonopt=deesc("-objcmt-ns-nonatomic-iosonly"); inc=1; do_output(fullopt); next; }
/^-objcmt-migrate-subscripting$/ { fullopt=$0; canonopt=deesc("-objcmt-migrate-subscripting"); inc=1; do_output(fullopt); next; }
/^-objcmt-migrate-readwrite-property$/ { fullopt=$0; canonopt=deesc("-objcmt-migrate-readwrite-property"); inc=1; do_output(fullopt); next; }
/^-objcmt-migrate-readonly-property$/ { fullopt=$0; canonopt=deesc("-objcmt-migrate-readonly-property"); inc=1; do_output(fullopt); next; }
/^-objcmt-migrate-protocol-conformance$/ { fullopt=$0; canonopt=deesc("-objcmt-migrate-protocol-conformance"); inc=1; do_output(fullopt); next; }
/^-objcmt-migrate-property-dot-syntax$/ { fullopt=$0; canonopt=deesc("-objcmt-migrate-property-dot-syntax"); inc=1; do_output(fullopt); next; }
/^-objcmt-migrate-property$/ { fullopt=$0; canonopt=deesc("-objcmt-migrate-property"); inc=1; do_output(fullopt); next; }
/^-objcmt-migrate-ns-macros$/ { fullopt=$0; canonopt=deesc("-objcmt-migrate-ns-macros"); inc=1; do_output(fullopt); next; }
/^-objcmt-migrate-literals$/ { fullopt=$0; canonopt=deesc("-objcmt-migrate-literals"); inc=1; do_output(fullopt); next; }
/^-objcmt-migrate-instancetype$/ { fullopt=$0; canonopt=deesc("-objcmt-migrate-instancetype"); inc=1; do_output(fullopt); next; }
/^-objcmt-migrate-designated-init$/ { fullopt=$0; canonopt=deesc("-objcmt-migrate-designated-init"); inc=1; do_output(fullopt); next; }
/^-objcmt-migrate-annotation$/ { fullopt=$0; canonopt=deesc("-objcmt-migrate-annotation"); inc=1; do_output(fullopt); next; }
/^-objcmt-migrate-all$/ { fullopt=$0; canonopt=deesc("-objcmt-migrate-all"); inc=1; do_output(fullopt); next; }
/^-objcmt-atomic-property$/ { fullopt=$0; canonopt=deesc("-objcmt-atomic-property"); inc=1; do_output(fullopt); next; }
/^(-objc-isystem)$/     { fullopt=$0; canonopt=deesc("-objc-isystem"); snarfing_optarg=1; inc=2; next; }
/^(-o)$/     { fullopt=$0; canonopt=deesc("-o"); snarfing_optarg=1; inc=2; next; }
/^-nostdsysteminc$/ { fullopt=$0; canonopt=deesc("-nostdsysteminc"); inc=1; do_output(fullopt); next; }
/^-nostdinc\+\+$/ { fullopt=$0; canonopt=deesc("-nostdinc\+\+"); inc=1; do_output(fullopt); next; }
/^-nogpulib$/ { fullopt=$0; canonopt=deesc("-nogpulib"); inc=1; do_output(fullopt); next; }
/^-nogpuinc$/ { fullopt=$0; canonopt=deesc("-nogpuinc"); inc=1; do_output(fullopt); next; }
/^-nobuiltininc$/ { fullopt=$0; canonopt=deesc("-nobuiltininc"); inc=1; do_output(fullopt); next; }
/^-no-struct-path-tbaa$/ { fullopt=$0; canonopt=deesc("-no-struct-path-tbaa"); inc=1; do_output(fullopt); next; }
/^-no-round-trip-args$/ { fullopt=$0; canonopt=deesc("-no-round-trip-args"); inc=1; do_output(fullopt); next; }
/^-no-pthread$/ { fullopt=$0; canonopt=deesc("-no-pthread"); inc=1; do_output(fullopt); next; }
/^-no-ns-alloc-error$/ { fullopt=$0; canonopt=deesc("-no-ns-alloc-error"); inc=1; do_output(fullopt); next; }
/^-no-implicit-float$/ { fullopt=$0; canonopt=deesc("-no-implicit-float"); inc=1; do_output(fullopt); next; }
/^-no-finalize-removal$/ { fullopt=$0; canonopt=deesc("-no-finalize-removal"); inc=1; do_output(fullopt); next; }
/^-no-emit-llvm-uselists$/ { fullopt=$0; canonopt=deesc("-no-emit-llvm-uselists"); inc=1; do_output(fullopt); next; }
/^-no-code-completion-ns-level-decls$/ { fullopt=$0; canonopt=deesc("-no-code-completion-ns-level-decls"); inc=1; do_output(fullopt); next; }
/^-no-code-completion-globals$/ { fullopt=$0; canonopt=deesc("-no-code-completion-globals"); inc=1; do_output(fullopt); next; }
/^-new-struct-path-tbaa$/ { fullopt=$0; canonopt=deesc("-new-struct-path-tbaa"); inc=1; do_output(fullopt); next; }
/^-mwavefrontsize64$/ { fullopt=$0; canonopt=deesc("-mwavefrontsize64"); inc=1; do_output(fullopt); next; }
/^-munwind-tables$/ { fullopt=$0; canonopt=deesc("-munwind-tables"); inc=1; do_output(fullopt); next; }
/^-munsafe-fp-atomics$/ { fullopt=$0; canonopt=deesc("-munsafe-fp-atomics"); inc=1; do_output(fullopt); next; }
/^-munaligned-access$/ { fullopt=$0; canonopt=deesc("-munaligned-access"); inc=1; do_output(fullopt); next; }
/^(-mtune=)(.*)$/ { fullopt=$0; canonopt=deesc("-mtune"); optarg=gensub(/(-mtune=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-mtp)$/     { fullopt=$0; canonopt=deesc("-mtp"); snarfing_optarg=1; inc=2; next; }
/^(-mtp=)(.*)$/ { fullopt=$0; canonopt=deesc("-mtp"); optarg=gensub(/(-mtp=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-mtls-size=)(.*)$/ { fullopt=$0; canonopt=deesc("-mtls-size"); optarg=gensub(/(-mtls-size=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mtls-direct-seg-refs$/ { fullopt=$0; canonopt=deesc("-mtls-direct-seg-refs"); inc=1; do_output(fullopt); next; }
/^(-mthread-model)$/     { fullopt=$0; canonopt=deesc("-mthread-model"); snarfing_optarg=1; inc=2; next; }
/^-mtgsplit$/ { fullopt=$0; canonopt=deesc("-mtgsplit"); inc=1; do_output(fullopt); next; }
/^(-mt-migrate-directory)$/     { fullopt=$0; canonopt=deesc("-mt-migrate-directory"); snarfing_optarg=1; inc=2; next; }
/^-msvr4-struct-return$/ { fullopt=$0; canonopt=deesc("-msvr4-struct-return"); inc=1; do_output(fullopt); next; }
/^(-msve-vector-bits=)(.*)$/ { fullopt=$0; canonopt=deesc("-msve-vector-bits"); optarg=gensub(/(-msve-vector-bits=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mstrict-align$/ { fullopt=$0; canonopt=deesc("-mstrict-align"); inc=1; do_output(fullopt); next; }
/^-mstackrealign$/ { fullopt=$0; canonopt=deesc("-mstackrealign"); inc=1; do_output(fullopt); next; }
/^(-mstack-protector-guard=)(.*)$/ { fullopt=$0; canonopt=deesc("-mstack-protector-guard"); optarg=gensub(/(-mstack-protector-guard=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-mstack-protector-guard-reg=)(.*)$/ { fullopt=$0; canonopt=deesc("-mstack-protector-guard-reg"); optarg=gensub(/(-mstack-protector-guard-reg=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-mstack-protector-guard-offset=)(.*)$/ { fullopt=$0; canonopt=deesc("-mstack-protector-guard-offset"); optarg=gensub(/(-mstack-protector-guard-offset=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-mstack-probe-size=)(.*)$/ { fullopt=$0; canonopt=deesc("-mstack-probe-size"); optarg=gensub(/(-mstack-probe-size=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mstack-arg-probe$/ { fullopt=$0; canonopt=deesc("-mstack-arg-probe"); inc=1; do_output(fullopt); next; }
/^(-mstack-alignment=)(.*)$/ { fullopt=$0; canonopt=deesc("-mstack-alignment"); optarg=gensub(/(-mstack-alignment=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mspeculative-load-hardening$/ { fullopt=$0; canonopt=deesc("-mspeculative-load-hardening"); inc=1; do_output(fullopt); next; }
/^-msoft-float$/ { fullopt=$0; canonopt=deesc("-msoft-float"); inc=1; do_output(fullopt); next; }
/^(-msmall-data-limit)$/     { fullopt=$0; canonopt=deesc("-msmall-data-limit"); snarfing_optarg=1; inc=2; next; }
/^(-msmall-data-limit=)(.*)$/ { fullopt=$0; canonopt=deesc("-msmall-data-limit"); optarg=gensub(/(-msmall-data-limit=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-msign-return-address=)(.*)$/ { fullopt=$0; canonopt=deesc("-msign-return-address"); optarg=gensub(/(-msign-return-address=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mseses$/ { fullopt=$0; canonopt=deesc("-mseses"); inc=1; do_output(fullopt); next; }
/^-msave-temp-labels$/ { fullopt=$0; canonopt=deesc("-msave-temp-labels"); inc=1; do_output(fullopt); next; }
/^-msave-restore$/ { fullopt=$0; canonopt=deesc("-msave-restore"); inc=1; do_output(fullopt); next; }
/^-mrtd$/ { fullopt=$0; canonopt=deesc("-mrtd"); inc=1; do_output(fullopt); next; }
/^-mrestrict-it$/ { fullopt=$0; canonopt=deesc("-mrestrict-it"); inc=1; do_output(fullopt); next; }
/^(-mrelocation-model)$/     { fullopt=$0; canonopt=deesc("-mrelocation-model"); snarfing_optarg=1; inc=2; next; }
/^-mrelax-all$/ { fullopt=$0; canonopt=deesc("-mrelax-all"); inc=1; do_output(fullopt); next; }
/^-mrelax$/ { fullopt=$0; canonopt=deesc("-mrelax"); inc=1; do_output(fullopt); next; }
/^(-mregparm)$/     { fullopt=$0; canonopt=deesc("-mregparm"); snarfing_optarg=1; inc=2; next; }
/^-mrecord-mcount$/ { fullopt=$0; canonopt=deesc("-mrecord-mcount"); inc=1; do_output(fullopt); next; }
/^-mreassociate$/ { fullopt=$0; canonopt=deesc("-mreassociate"); inc=1; do_output(fullopt); next; }
/^-mqdsp6-compat$/ { fullopt=$0; canonopt=deesc("-mqdsp6-compat"); inc=1; do_output(fullopt); next; }
/^(-mprefer-vector-width=)(.*)$/ { fullopt=$0; canonopt=deesc("-mprefer-vector-width"); optarg=gensub(/(-mprefer-vector-width=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-mpad-max-prefix-size=)(.*)$/ { fullopt=$0; canonopt=deesc("-mpad-max-prefix-size"); optarg=gensub(/(-mpad-max-prefix-size=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mpackets$/ { fullopt=$0; canonopt=deesc("-mpackets"); inc=1; do_output(fullopt); next; }
/^-mpacked-stack$/ { fullopt=$0; canonopt=deesc("-mpacked-stack"); inc=1; do_output(fullopt); next; }
/^-moutline-atomics$/ { fullopt=$0; canonopt=deesc("-moutline-atomics"); inc=1; do_output(fullopt); next; }
/^-moutline$/ { fullopt=$0; canonopt=deesc("-moutline"); inc=1; do_output(fullopt); next; }
/^-momit-leaf-frame-pointer$/ { fullopt=$0; canonopt=deesc("-momit-leaf-frame-pointer"); inc=1; do_output(fullopt); next; }
/^-module-file-info$/ { fullopt=$0; canonopt=deesc("-module-file-info"); inc=1; do_output(fullopt); next; }
/^-module-file-deps$/ { fullopt=$0; canonopt=deesc("-module-file-deps"); inc=1; do_output(fullopt); next; }
/^(-module-dependency-dir)$/     { fullopt=$0; canonopt=deesc("-module-dependency-dir"); snarfing_optarg=1; inc=2; next; }
/^-mnvs$/ { fullopt=$0; canonopt=deesc("-mnvs"); inc=1; do_output(fullopt); next; }
/^-mnvj$/ { fullopt=$0; canonopt=deesc("-mnvj"); inc=1; do_output(fullopt); next; }
/^-mnop-mcount$/ { fullopt=$0; canonopt=deesc("-mnop-mcount"); inc=1; do_output(fullopt); next; }
/^-mnoexecstack$/ { fullopt=$0; canonopt=deesc("-mnoexecstack"); inc=1; do_output(fullopt); next; }
/^-mnocrc$/ { fullopt=$0; canonopt=deesc("-mnocrc"); inc=1; do_output(fullopt); next; }
/^-mno-wavefrontsize64$/ { fullopt=$0; canonopt=deesc("-mno-wavefrontsize64"); inc=1; do_output(fullopt); next; }
/^-mno-unwind-tables$/ { fullopt=$0; canonopt=deesc("-mno-unwind-tables"); inc=1; do_output(fullopt); next; }
/^-mno-unsafe-fp-atomics$/ { fullopt=$0; canonopt=deesc("-mno-unsafe-fp-atomics"); inc=1; do_output(fullopt); next; }
/^-mno-unaligned-access$/ { fullopt=$0; canonopt=deesc("-mno-unaligned-access"); inc=1; do_output(fullopt); next; }
/^-mno-tls-direct-seg-refs$/ { fullopt=$0; canonopt=deesc("-mno-tls-direct-seg-refs"); inc=1; do_output(fullopt); next; }
/^-mno-tgsplit$/ { fullopt=$0; canonopt=deesc("-mno-tgsplit"); inc=1; do_output(fullopt); next; }
/^-mno-svr4-struct-return$/ { fullopt=$0; canonopt=deesc("-mno-svr4-struct-return"); inc=1; do_output(fullopt); next; }
/^-mno-strict-align$/ { fullopt=$0; canonopt=deesc("-mno-strict-align"); inc=1; do_output(fullopt); next; }
/^-mno-stackrealign$/ { fullopt=$0; canonopt=deesc("-mno-stackrealign"); inc=1; do_output(fullopt); next; }
/^-mno-stack-arg-probe$/ { fullopt=$0; canonopt=deesc("-mno-stack-arg-probe"); inc=1; do_output(fullopt); next; }
/^-mno-speculative-load-hardening$/ { fullopt=$0; canonopt=deesc("-mno-speculative-load-hardening"); inc=1; do_output(fullopt); next; }
/^-mno-soft-float$/ { fullopt=$0; canonopt=deesc("-mno-soft-float"); inc=1; do_output(fullopt); next; }
/^-mno-seses$/ { fullopt=$0; canonopt=deesc("-mno-seses"); inc=1; do_output(fullopt); next; }
/^-mno-save-temp-labels$/ { fullopt=$0; canonopt=deesc("-mno-save-temp-labels"); inc=1; do_output(fullopt); next; }
/^-mno-save-restore$/ { fullopt=$0; canonopt=deesc("-mno-save-restore"); inc=1; do_output(fullopt); next; }
/^-mno-rtd$/ { fullopt=$0; canonopt=deesc("-mno-rtd"); inc=1; do_output(fullopt); next; }
/^-mno-restrict-it$/ { fullopt=$0; canonopt=deesc("-mno-restrict-it"); inc=1; do_output(fullopt); next; }
/^-mno-relax-all$/ { fullopt=$0; canonopt=deesc("-mno-relax-all"); inc=1; do_output(fullopt); next; }
/^-mno-relax$/ { fullopt=$0; canonopt=deesc("-mno-relax"); inc=1; do_output(fullopt); next; }
/^-mno-record-mcount$/ { fullopt=$0; canonopt=deesc("-mno-record-mcount"); inc=1; do_output(fullopt); next; }
/^-mno-reassociate$/ { fullopt=$0; canonopt=deesc("-mno-reassociate"); inc=1; do_output(fullopt); next; }
/^-mno-qdsp6-compat$/ { fullopt=$0; canonopt=deesc("-mno-qdsp6-compat"); inc=1; do_output(fullopt); next; }
/^-mno-packets$/ { fullopt=$0; canonopt=deesc("-mno-packets"); inc=1; do_output(fullopt); next; }
/^-mno-packed-stack$/ { fullopt=$0; canonopt=deesc("-mno-packed-stack"); inc=1; do_output(fullopt); next; }
/^-mno-outline-atomics$/ { fullopt=$0; canonopt=deesc("-mno-outline-atomics"); inc=1; do_output(fullopt); next; }
/^-mno-outline$/ { fullopt=$0; canonopt=deesc("-mno-outline"); inc=1; do_output(fullopt); next; }
/^-mno-omit-leaf-frame-pointer$/ { fullopt=$0; canonopt=deesc("-mno-omit-leaf-frame-pointer"); inc=1; do_output(fullopt); next; }
/^-mno-odule-file-info$/ { fullopt=$0; canonopt=deesc("-mno-odule-file-info"); inc=1; do_output(fullopt); next; }
/^-mno-odule-file-deps$/ { fullopt=$0; canonopt=deesc("-mno-odule-file-deps"); inc=1; do_output(fullopt); next; }
/^-mno-nvs$/ { fullopt=$0; canonopt=deesc("-mno-nvs"); inc=1; do_output(fullopt); next; }
/^-mno-nvj$/ { fullopt=$0; canonopt=deesc("-mno-nvj"); inc=1; do_output(fullopt); next; }
/^-mno-nop-mcount$/ { fullopt=$0; canonopt=deesc("-mno-nop-mcount"); inc=1; do_output(fullopt); next; }
/^-mno-noexecstack$/ { fullopt=$0; canonopt=deesc("-mno-noexecstack"); inc=1; do_output(fullopt); next; }
/^-mno-nocrc$/ { fullopt=$0; canonopt=deesc("-mno-nocrc"); inc=1; do_output(fullopt); next; }
/^-mno-neg-immediates$/ { fullopt=$0; canonopt=deesc("-mno-neg-immediates"); inc=1; do_output(fullopt); next; }
/^-mno-mt$/ { fullopt=$0; canonopt=deesc("-mno-mt"); inc=1; do_output(fullopt); next; }
/^-mno-msa$/ { fullopt=$0; canonopt=deesc("-mno-msa"); inc=1; do_output(fullopt); next; }
/^-mno-ms-bitfields$/ { fullopt=$0; canonopt=deesc("-mno-ms-bitfields"); inc=1; do_output(fullopt); next; }
/^-mno-movt$/ { fullopt=$0; canonopt=deesc("-mno-movt"); inc=1; do_output(fullopt); next; }
/^-mno-memops$/ { fullopt=$0; canonopt=deesc("-mno-memops"); inc=1; do_output(fullopt); next; }
/^-mno-mark-bti-property$/ { fullopt=$0; canonopt=deesc("-mno-mark-bti-property"); inc=1; do_output(fullopt); next; }
/^-mno-madd4$/ { fullopt=$0; canonopt=deesc("-mno-madd4"); inc=1; do_output(fullopt); next; }
/^-mno-lvi-hardening$/ { fullopt=$0; canonopt=deesc("-mno-lvi-hardening"); inc=1; do_output(fullopt); next; }
/^-mno-lvi-cfi$/ { fullopt=$0; canonopt=deesc("-mno-lvi-cfi"); inc=1; do_output(fullopt); next; }
/^-mno-long-double-80$/ { fullopt=$0; canonopt=deesc("-mno-long-double-80"); inc=1; do_output(fullopt); next; }
/^-mno-long-double-64$/ { fullopt=$0; canonopt=deesc("-mno-long-double-64"); inc=1; do_output(fullopt); next; }
/^-mno-long-double-128$/ { fullopt=$0; canonopt=deesc("-mno-long-double-128"); inc=1; do_output(fullopt); next; }
/^-mno-long-calls$/ { fullopt=$0; canonopt=deesc("-mno-long-calls"); inc=1; do_output(fullopt); next; }
/^-mno-local-sdata$/ { fullopt=$0; canonopt=deesc("-mno-local-sdata"); inc=1; do_output(fullopt); next; }
/^-mno-incremental-linker-compatible$/ { fullopt=$0; canonopt=deesc("-mno-incremental-linker-compatible"); inc=1; do_output(fullopt); next; }
/^-mno-implicit-float$/ { fullopt=$0; canonopt=deesc("-mno-implicit-float"); inc=1; do_output(fullopt); next; }
/^-mno-igrate$/ { fullopt=$0; canonopt=deesc("-mno-igrate"); inc=1; do_output(fullopt); next; }
/^-mno-ignore-xcoff-visibility$/ { fullopt=$0; canonopt=deesc("-mno-ignore-xcoff-visibility"); inc=1; do_output(fullopt); next; }
/^-mno-iamcu$/ { fullopt=$0; canonopt=deesc("-mno-iamcu"); inc=1; do_output(fullopt); next; }
/^-mno-hvx$/ { fullopt=$0; canonopt=deesc("-mno-hvx"); inc=1; do_output(fullopt); next; }
/^-mno-gpopt$/ { fullopt=$0; canonopt=deesc("-mno-gpopt"); inc=1; do_output(fullopt); next; }
/^-mno-global-merge$/ { fullopt=$0; canonopt=deesc("-mno-global-merge"); inc=1; do_output(fullopt); next; }
/^-mno-general-regs-only$/ { fullopt=$0; canonopt=deesc("-mno-general-regs-only"); inc=1; do_output(fullopt); next; }
/^-mno-fp64$/ { fullopt=$0; canonopt=deesc("-mno-fp64"); inc=1; do_output(fullopt); next; }
/^-mno-fp32$/ { fullopt=$0; canonopt=deesc("-mno-fp32"); inc=1; do_output(fullopt); next; }
/^-mno-fix-cortex-a53-835769$/ { fullopt=$0; canonopt=deesc("-mno-fix-cortex-a53-835769"); inc=1; do_output(fullopt); next; }
/^-mno-fentry$/ { fullopt=$0; canonopt=deesc("-mno-fentry"); inc=1; do_output(fullopt); next; }
/^-mno-extern-sdata$/ { fullopt=$0; canonopt=deesc("-mno-extern-sdata"); inc=1; do_output(fullopt); next; }
/^-mno-execute-only$/ { fullopt=$0; canonopt=deesc("-mno-execute-only"); inc=1; do_output(fullopt); next; }
/^-mno-enable-unsafe-fp-math$/ { fullopt=$0; canonopt=deesc("-mno-enable-unsafe-fp-math"); inc=1; do_output(fullopt); next; }
/^-mno-enable-no-nans$/ { fullopt=$0; canonopt=deesc("-mno-enable-no-nans"); inc=1; do_output(fullopt); next; }
/^-mno-enable-no-infs$/ { fullopt=$0; canonopt=deesc("-mno-enable-no-infs"); inc=1; do_output(fullopt); next; }
/^-mno-enable-experimental-extensions$/ { fullopt=$0; canonopt=deesc("-mno-enable-experimental-extensions"); inc=1; do_output(fullopt); next; }
/^-mno-embedded-data$/ { fullopt=$0; canonopt=deesc("-mno-embedded-data"); inc=1; do_output(fullopt); next; }
/^-mno-disable-tail-calls$/ { fullopt=$0; canonopt=deesc("-mno-disable-tail-calls"); inc=1; do_output(fullopt); next; }
/^-mno-cumode$/ { fullopt=$0; canonopt=deesc("-mno-cumode"); inc=1; do_output(fullopt); next; }
/^-mno-crc$/ { fullopt=$0; canonopt=deesc("-mno-crc"); inc=1; do_output(fullopt); next; }
/^-mno-constructor-aliases$/ { fullopt=$0; canonopt=deesc("-mno-constructor-aliases"); inc=1; do_output(fullopt); next; }
/^-mno-code-object-v3$/ { fullopt=$0; canonopt=deesc("-mno-code-object-v3"); inc=1; do_output(fullopt); next; }
/^-mno-cmse$/ { fullopt=$0; canonopt=deesc("-mno-cmse"); inc=1; do_output(fullopt); next; }
/^-mno-branches-within-32B-boundaries$/ { fullopt=$0; canonopt=deesc("-mno-branches-within-32B-boundaries"); inc=1; do_output(fullopt); next; }
/^-mno-backchain$/ { fullopt=$0; canonopt=deesc("-mno-backchain"); inc=1; do_output(fullopt); next; }
/^-mno-assembler-no-warn$/ { fullopt=$0; canonopt=deesc("-mno-assembler-no-warn"); inc=1; do_output(fullopt); next; }
/^-mno-assembler-fatal-warnings$/ { fullopt=$0; canonopt=deesc("-mno-assembler-fatal-warnings"); inc=1; do_output(fullopt); next; }
/^-mno-amdgpu-ieee$/ { fullopt=$0; canonopt=deesc("-mno-amdgpu-ieee"); inc=1; do_output(fullopt); next; }
/^-mno-align-double$/ { fullopt=$0; canonopt=deesc("-mno-align-double"); inc=1; do_output(fullopt); next; }
/^-mno-aix-struct-return$/ { fullopt=$0; canonopt=deesc("-mno-aix-struct-return"); inc=1; do_output(fullopt); next; }
/^-mno-abicalls$/ { fullopt=$0; canonopt=deesc("-mno-abicalls"); inc=1; do_output(fullopt); next; }
/^-mmt$/ { fullopt=$0; canonopt=deesc("-mmt"); inc=1; do_output(fullopt); next; }
/^-mmsa$/ { fullopt=$0; canonopt=deesc("-mmsa"); inc=1; do_output(fullopt); next; }
/^-mms-bitfields$/ { fullopt=$0; canonopt=deesc("-mms-bitfields"); inc=1; do_output(fullopt); next; }
/^-mmemops$/ { fullopt=$0; canonopt=deesc("-mmemops"); inc=1; do_output(fullopt); next; }
/^-mmark-bti-property$/ { fullopt=$0; canonopt=deesc("-mmark-bti-property"); inc=1; do_output(fullopt); next; }
/^-mmadd4$/ { fullopt=$0; canonopt=deesc("-mmadd4"); inc=1; do_output(fullopt); next; }
/^(-mmacosx-version-min=)(.*)$/ { fullopt=$0; canonopt=deesc("-mmacosx-version-min"); optarg=gensub(/(-mmacosx-version-min=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mlvi-hardening$/ { fullopt=$0; canonopt=deesc("-mlvi-hardening"); inc=1; do_output(fullopt); next; }
/^-mlvi-cfi$/ { fullopt=$0; canonopt=deesc("-mlvi-cfi"); inc=1; do_output(fullopt); next; }
/^-mlong-double-80$/ { fullopt=$0; canonopt=deesc("-mlong-double-80"); inc=1; do_output(fullopt); next; }
/^-mlong-double-64$/ { fullopt=$0; canonopt=deesc("-mlong-double-64"); inc=1; do_output(fullopt); next; }
/^-mlong-double-128$/ { fullopt=$0; canonopt=deesc("-mlong-double-128"); inc=1; do_output(fullopt); next; }
/^-mlong-calls$/ { fullopt=$0; canonopt=deesc("-mlong-calls"); inc=1; do_output(fullopt); next; }
/^-mlocal-sdata$/ { fullopt=$0; canonopt=deesc("-mlocal-sdata"); inc=1; do_output(fullopt); next; }
/^(-mllvm)$/     { fullopt=$0; canonopt=deesc("-mllvm"); snarfing_optarg=1; inc=2; next; }
/^(-mlink-builtin-bitcode)$/     { fullopt=$0; canonopt=deesc("-mlink-builtin-bitcode"); snarfing_optarg=1; inc=2; next; }
/^(-mlink-bitcode-file)$/     { fullopt=$0; canonopt=deesc("-mlink-bitcode-file"); snarfing_optarg=1; inc=2; next; }
/^(-mlimit-float-precision)$/     { fullopt=$0; canonopt=deesc("-mlimit-float-precision"); snarfing_optarg=1; inc=2; next; }
/^(-mios-version-min=)(.*)$/ { fullopt=$0; canonopt=deesc("-mios-version-min"); optarg=gensub(/(-mios-version-min=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-mindirect-jump=)(.*)$/ { fullopt=$0; canonopt=deesc("-mindirect-jump"); optarg=gensub(/(-mindirect-jump=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mincremental-linker-compatible$/ { fullopt=$0; canonopt=deesc("-mincremental-linker-compatible"); inc=1; do_output(fullopt); next; }
/^-migrate$/ { fullopt=$0; canonopt=deesc("-migrate"); inc=1; do_output(fullopt); next; }
/^-mignore-xcoff-visibility$/ { fullopt=$0; canonopt=deesc("-mignore-xcoff-visibility"); inc=1; do_output(fullopt); next; }
/^-miamcu$/ { fullopt=$0; canonopt=deesc("-miamcu"); inc=1; do_output(fullopt); next; }
/^(-mhvx=)(.*)$/ { fullopt=$0; canonopt=deesc("-mhvx"); optarg=gensub(/(-mhvx=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-mhvx-length=)(.*)$/ { fullopt=$0; canonopt=deesc("-mhvx-length"); optarg=gensub(/(-mhvx-length=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mhvx$/ { fullopt=$0; canonopt=deesc("-mhvx"); inc=1; do_output(fullopt); next; }
/^(-mharden-sls=)(.*)$/ { fullopt=$0; canonopt=deesc("-mharden-sls"); optarg=gensub(/(-mharden-sls=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mgpopt$/ { fullopt=$0; canonopt=deesc("-mgpopt"); inc=1; do_output(fullopt); next; }
/^-mglobal-merge$/ { fullopt=$0; canonopt=deesc("-mglobal-merge"); inc=1; do_output(fullopt); next; }
/^-mgeneral-regs-only$/ { fullopt=$0; canonopt=deesc("-mgeneral-regs-only"); inc=1; do_output(fullopt); next; }
/^(-mframe-pointer=)(.*)$/ { fullopt=$0; canonopt=deesc("-mframe-pointer"); optarg=gensub(/(-mframe-pointer=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-mfpmath)$/     { fullopt=$0; canonopt=deesc("-mfpmath"); snarfing_optarg=1; inc=2; next; }
/^-mfp64$/ { fullopt=$0; canonopt=deesc("-mfp64"); inc=1; do_output(fullopt); next; }
/^-mfp32$/ { fullopt=$0; canonopt=deesc("-mfp32"); inc=1; do_output(fullopt); next; }
/^(-mfloat-abi)$/     { fullopt=$0; canonopt=deesc("-mfloat-abi"); snarfing_optarg=1; inc=2; next; }
/^-mfix-cortex-a53-835769$/ { fullopt=$0; canonopt=deesc("-mfix-cortex-a53-835769"); inc=1; do_output(fullopt); next; }
/^-mfentry$/ { fullopt=$0; canonopt=deesc("-mfentry"); inc=1; do_output(fullopt); next; }
/^-mextern-sdata$/ { fullopt=$0; canonopt=deesc("-mextern-sdata"); inc=1; do_output(fullopt); next; }
/^-mexecute-only$/ { fullopt=$0; canonopt=deesc("-mexecute-only"); inc=1; do_output(fullopt); next; }
/^(-mexec-model=)(.*)$/ { fullopt=$0; canonopt=deesc("-mexec-model"); optarg=gensub(/(-mexec-model=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-menable-unsafe-fp-math$/ { fullopt=$0; canonopt=deesc("-menable-unsafe-fp-math"); inc=1; do_output(fullopt); next; }
/^-menable-no-nans$/ { fullopt=$0; canonopt=deesc("-menable-no-nans"); inc=1; do_output(fullopt); next; }
/^-menable-no-infs$/ { fullopt=$0; canonopt=deesc("-menable-no-infs"); inc=1; do_output(fullopt); next; }
/^-menable-experimental-extensions$/ { fullopt=$0; canonopt=deesc("-menable-experimental-extensions"); inc=1; do_output(fullopt); next; }
/^-membedded-data$/ { fullopt=$0; canonopt=deesc("-membedded-data"); inc=1; do_output(fullopt); next; }
/^(-meabi)$/     { fullopt=$0; canonopt=deesc("-meabi"); snarfing_optarg=1; inc=2; next; }
/^(-mdouble=)(.*)$/ { fullopt=$0; canonopt=deesc("-mdouble"); optarg=gensub(/(-mdouble=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mdisable-tail-calls$/ { fullopt=$0; canonopt=deesc("-mdisable-tail-calls"); inc=1; do_output(fullopt); next; }
/^(-mdebug-pass)$/     { fullopt=$0; canonopt=deesc("-mdebug-pass"); snarfing_optarg=1; inc=2; next; }
/^-mcumode$/ { fullopt=$0; canonopt=deesc("-mcumode"); inc=1; do_output(fullopt); next; }
/^-mcrc$/ { fullopt=$0; canonopt=deesc("-mcrc"); inc=1; do_output(fullopt); next; }
/^-mconstructor-aliases$/ { fullopt=$0; canonopt=deesc("-mconstructor-aliases"); inc=1; do_output(fullopt); next; }
/^(-mcode-object-version=)(.*)$/ { fullopt=$0; canonopt=deesc("-mcode-object-version"); optarg=gensub(/(-mcode-object-version=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mcode-object-v3$/ { fullopt=$0; canonopt=deesc("-mcode-object-v3"); inc=1; do_output(fullopt); next; }
/^-mcmse$/ { fullopt=$0; canonopt=deesc("-mcmse"); inc=1; do_output(fullopt); next; }
/^(-mcmodel=)(.*)$/ { fullopt=$0; canonopt=deesc("-mcmodel"); optarg=gensub(/(-mcmodel=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mbranches-within-32B-boundaries$/ { fullopt=$0; canonopt=deesc("-mbranches-within-32B-boundaries"); inc=1; do_output(fullopt); next; }
/^(-mbranch-protection=)(.*)$/ { fullopt=$0; canonopt=deesc("-mbranch-protection"); optarg=gensub(/(-mbranch-protection=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-mbackchain$/ { fullopt=$0; canonopt=deesc("-mbackchain"); inc=1; do_output(fullopt); next; }
/^-massembler-no-warn$/ { fullopt=$0; canonopt=deesc("-massembler-no-warn"); inc=1; do_output(fullopt); next; }
/^-massembler-fatal-warnings$/ { fullopt=$0; canonopt=deesc("-massembler-fatal-warnings"); inc=1; do_output(fullopt); next; }
/^-mamdgpu-ieee$/ { fullopt=$0; canonopt=deesc("-mamdgpu-ieee"); inc=1; do_output(fullopt); next; }
/^-malign-double$/ { fullopt=$0; canonopt=deesc("-malign-double"); inc=1; do_output(fullopt); next; }
/^(-malign-branch=)(.*)$/ { fullopt=$0; canonopt=deesc("-malign-branch"); optarg=gensub(/(-malign-branch=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-malign-branch-boundary=)(.*)$/ { fullopt=$0; canonopt=deesc("-malign-branch-boundary"); optarg=gensub(/(-malign-branch-boundary=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-maix-struct-return$/ { fullopt=$0; canonopt=deesc("-maix-struct-return"); inc=1; do_output(fullopt); next; }
/^(-main-file-name)$/     { fullopt=$0; canonopt=deesc("-main-file-name"); snarfing_optarg=1; inc=2; next; }
/^-mabicalls$/ { fullopt=$0; canonopt=deesc("-mabicalls"); inc=1; do_output(fullopt); next; }
/^(-mabi=)(.*)$/ { fullopt=$0; canonopt=deesc("-mabi"); optarg=gensub(/(-mabi=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-load)$/     { fullopt=$0; canonopt=deesc("-load"); snarfing_optarg=1; inc=2; next; }
/^(-iwithsysroot)$/     { fullopt=$0; canonopt=deesc("-iwithsysroot"); snarfing_optarg=1; inc=2; next; }
/^(-iwithprefixbefore)$/     { fullopt=$0; canonopt=deesc("-iwithprefixbefore"); snarfing_optarg=1; inc=2; next; }
/^(-iwithprefix)$/     { fullopt=$0; canonopt=deesc("-iwithprefix"); snarfing_optarg=1; inc=2; next; }
/^(-ivfsoverlay)$/     { fullopt=$0; canonopt=deesc("-ivfsoverlay"); snarfing_optarg=1; inc=2; next; }
/^(-isystem)$/     { fullopt=$0; canonopt=deesc("-isystem"); snarfing_optarg=1; inc=2; next; }
/^(-isystem-after)$/     { fullopt=$0; canonopt=deesc("-isystem-after"); snarfing_optarg=1; inc=2; next; }
/^(-isysroot)$/     { fullopt=$0; canonopt=deesc("-isysroot"); snarfing_optarg=1; inc=2; next; }
/^(-iquote)$/     { fullopt=$0; canonopt=deesc("-iquote"); snarfing_optarg=1; inc=2; next; }
/^(-iprefix)$/     { fullopt=$0; canonopt=deesc("-iprefix"); snarfing_optarg=1; inc=2; next; }
/^(-internal-isystem)$/     { fullopt=$0; canonopt=deesc("-internal-isystem"); snarfing_optarg=1; inc=2; next; }
/^(-internal-externc-isystem)$/     { fullopt=$0; canonopt=deesc("-internal-externc-isystem"); snarfing_optarg=1; inc=2; next; }
/^-init-only$/ { fullopt=$0; canonopt=deesc("-init-only"); inc=1; do_output(fullopt); next; }
/^-index-header-map$/ { fullopt=$0; canonopt=deesc("-index-header-map"); inc=1; do_output(fullopt); next; }
/^(-include)$/     { fullopt=$0; canonopt=deesc("-include"); snarfing_optarg=1; inc=2; next; }
/^(-include-pch)$/     { fullopt=$0; canonopt=deesc("-include-pch"); snarfing_optarg=1; inc=2; next; }
/^(-imacros)$/     { fullopt=$0; canonopt=deesc("-imacros"); snarfing_optarg=1; inc=2; next; }
/^(-iframeworkwithsysroot)$/     { fullopt=$0; canonopt=deesc("-iframeworkwithsysroot"); snarfing_optarg=1; inc=2; next; }
/^(-iframework)$/     { fullopt=$0; canonopt=deesc("-iframework"); snarfing_optarg=1; inc=2; next; }
/^(-idirafter)$/     { fullopt=$0; canonopt=deesc("-idirafter"); snarfing_optarg=1; inc=2; next; }
/^-ibuiltininc$/ { fullopt=$0; canonopt=deesc("-ibuiltininc"); inc=1; do_output(fullopt); next; }
/^-help$/ { fullopt=$0; canonopt=deesc("-help"); inc=1; do_output(fullopt); next; }
/^(-header-include-file)$/     { fullopt=$0; canonopt=deesc("-header-include-file"); snarfing_optarg=1; inc=2; next; }
/^(-gz=)(.*)$/ { fullopt=$0; canonopt=deesc("-gz"); optarg=gensub(/(-gz=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-gstrict-dwarf$/ { fullopt=$0; canonopt=deesc("-gstrict-dwarf"); inc=1; do_output(fullopt); next; }
/^(-gsplit-dwarf=)(.*)$/ { fullopt=$0; canonopt=deesc("-gsplit-dwarf"); optarg=gensub(/(-gsplit-dwarf=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-gno-strict-dwarf$/ { fullopt=$0; canonopt=deesc("-gno-strict-dwarf"); inc=1; do_output(fullopt); next; }
/^-gno-inline-line-tables$/ { fullopt=$0; canonopt=deesc("-gno-inline-line-tables"); inc=1; do_output(fullopt); next; }
/^-gno-embed-source$/ { fullopt=$0; canonopt=deesc("-gno-embed-source"); inc=1; do_output(fullopt); next; }
/^-gno-column-info$/ { fullopt=$0; canonopt=deesc("-gno-column-info"); inc=1; do_output(fullopt); next; }
/^-gno-codeview-ghash$/ { fullopt=$0; canonopt=deesc("-gno-codeview-ghash"); inc=1; do_output(fullopt); next; }
/^-gmodules$/ { fullopt=$0; canonopt=deesc("-gmodules"); inc=1; do_output(fullopt); next; }
/^-gline-tables-only$/ { fullopt=$0; canonopt=deesc("-gline-tables-only"); inc=1; do_output(fullopt); next; }
/^-gline-directives-only$/ { fullopt=$0; canonopt=deesc("-gline-directives-only"); inc=1; do_output(fullopt); next; }
/^-ginline-line-tables$/ { fullopt=$0; canonopt=deesc("-ginline-line-tables"); inc=1; do_output(fullopt); next; }
/^-gembed-source$/ { fullopt=$0; canonopt=deesc("-gembed-source"); inc=1; do_output(fullopt); next; }
/^-gdwarf64$/ { fullopt=$0; canonopt=deesc("-gdwarf64"); inc=1; do_output(fullopt); next; }
/^-gdwarf32$/ { fullopt=$0; canonopt=deesc("-gdwarf32"); inc=1; do_output(fullopt); next; }
/^-gdwarf-5$/ { fullopt=$0; canonopt=deesc("-gdwarf-5"); inc=1; do_output(fullopt); next; }
/^-gdwarf-4$/ { fullopt=$0; canonopt=deesc("-gdwarf-4"); inc=1; do_output(fullopt); next; }
/^-gdwarf-3$/ { fullopt=$0; canonopt=deesc("-gdwarf-3"); inc=1; do_output(fullopt); next; }
/^-gdwarf-2$/ { fullopt=$0; canonopt=deesc("-gdwarf-2"); inc=1; do_output(fullopt); next; }
/^-gdwarf$/ { fullopt=$0; canonopt=deesc("-gdwarf"); inc=1; do_output(fullopt); next; }
/^-gcolumn-info$/ { fullopt=$0; canonopt=deesc("-gcolumn-info"); inc=1; do_output(fullopt); next; }
/^-gcodeview-ghash$/ { fullopt=$0; canonopt=deesc("-gcodeview-ghash"); inc=1; do_output(fullopt); next; }
/^-gcodeview$/ { fullopt=$0; canonopt=deesc("-gcodeview"); inc=1; do_output(fullopt); next; }
/^-g$/ { fullopt=$0; canonopt=deesc("-g"); inc=1; do_output(fullopt); next; }
/^-fzvector$/ { fullopt=$0; canonopt=deesc("-fzvector"); inc=1; do_output(fullopt); next; }
/^-fzero-initialized-in-bss$/ { fullopt=$0; canonopt=deesc("-fzero-initialized-in-bss"); inc=1; do_output(fullopt); next; }
/^(-fxray-selected-function-group=)(.*)$/ { fullopt=$0; canonopt=deesc("-fxray-selected-function-group"); optarg=gensub(/(-fxray-selected-function-group=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fxray-never-instrument=)(.*)$/ { fullopt=$0; canonopt=deesc("-fxray-never-instrument"); optarg=gensub(/(-fxray-never-instrument=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fxray-modes=)(.*)$/ { fullopt=$0; canonopt=deesc("-fxray-modes"); optarg=gensub(/(-fxray-modes=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fxray-link-deps$/ { fullopt=$0; canonopt=deesc("-fxray-link-deps"); inc=1; do_output(fullopt); next; }
/^(-fxray-instrumentation-bundle=)(.*)$/ { fullopt=$0; canonopt=deesc("-fxray-instrumentation-bundle"); optarg=gensub(/(-fxray-instrumentation-bundle=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fxray-instrument$/ { fullopt=$0; canonopt=deesc("-fxray-instrument"); inc=1; do_output(fullopt); next; }
/^(-fxray-instruction-threshold=)(.*)$/ { fullopt=$0; canonopt=deesc("-fxray-instruction-threshold"); optarg=gensub(/(-fxray-instruction-threshold=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fxray-ignore-loops$/ { fullopt=$0; canonopt=deesc("-fxray-ignore-loops"); inc=1; do_output(fullopt); next; }
/^-fxray-function-index$/ { fullopt=$0; canonopt=deesc("-fxray-function-index"); inc=1; do_output(fullopt); next; }
/^(-fxray-function-groups=)(.*)$/ { fullopt=$0; canonopt=deesc("-fxray-function-groups"); optarg=gensub(/(-fxray-function-groups=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fxray-attr-list=)(.*)$/ { fullopt=$0; canonopt=deesc("-fxray-attr-list"); optarg=gensub(/(-fxray-attr-list=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fxray-always-instrument=)(.*)$/ { fullopt=$0; canonopt=deesc("-fxray-always-instrument"); optarg=gensub(/(-fxray-always-instrument=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fxray-always-emit-typedevents$/ { fullopt=$0; canonopt=deesc("-fxray-always-emit-typedevents"); inc=1; do_output(fullopt); next; }
/^-fxray-always-emit-customevents$/ { fullopt=$0; canonopt=deesc("-fxray-always-emit-customevents"); inc=1; do_output(fullopt); next; }
/^-fxl-pragma-pack$/ { fullopt=$0; canonopt=deesc("-fxl-pragma-pack"); inc=1; do_output(fullopt); next; }
/^-fwritable-strings$/ { fullopt=$0; canonopt=deesc("-fwritable-strings"); inc=1; do_output(fullopt); next; }
/^-fwrapv$/ { fullopt=$0; canonopt=deesc("-fwrapv"); inc=1; do_output(fullopt); next; }
/^-fwhole-program-vtables$/ { fullopt=$0; canonopt=deesc("-fwhole-program-vtables"); inc=1; do_output(fullopt); next; }
/^(-fwchar-type=)(.*)$/ { fullopt=$0; canonopt=deesc("-fwchar-type"); optarg=gensub(/(-fwchar-type=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fwasm-exceptions$/ { fullopt=$0; canonopt=deesc("-fwasm-exceptions"); inc=1; do_output(fullopt); next; }
/^(-fvisibility)$/     { fullopt=$0; canonopt=deesc("-fvisibility"); snarfing_optarg=1; inc=2; next; }
/^(-fvisibility=)(.*)$/ { fullopt=$0; canonopt=deesc("-fvisibility"); optarg=gensub(/(-fvisibility=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fvisibility-nodllstorageclass=)(.*)$/ { fullopt=$0; canonopt=deesc("-fvisibility-nodllstorageclass"); optarg=gensub(/(-fvisibility-nodllstorageclass=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fvisibility-ms-compat$/ { fullopt=$0; canonopt=deesc("-fvisibility-ms-compat"); inc=1; do_output(fullopt); next; }
/^-fvisibility-inlines-hidden-static-local-var$/ { fullopt=$0; canonopt=deesc("-fvisibility-inlines-hidden-static-local-var"); inc=1; do_output(fullopt); next; }
/^-fvisibility-inlines-hidden$/ { fullopt=$0; canonopt=deesc("-fvisibility-inlines-hidden"); inc=1; do_output(fullopt); next; }
/^-fvisibility-global-new-delete-hidden$/ { fullopt=$0; canonopt=deesc("-fvisibility-global-new-delete-hidden"); inc=1; do_output(fullopt); next; }
/^-fvisibility-from-dllstorageclass$/ { fullopt=$0; canonopt=deesc("-fvisibility-from-dllstorageclass"); inc=1; do_output(fullopt); next; }
/^(-fvisibility-externs-nodllstorageclass=)(.*)$/ { fullopt=$0; canonopt=deesc("-fvisibility-externs-nodllstorageclass"); optarg=gensub(/(-fvisibility-externs-nodllstorageclass=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fvisibility-externs-dllimport=)(.*)$/ { fullopt=$0; canonopt=deesc("-fvisibility-externs-dllimport"); optarg=gensub(/(-fvisibility-externs-dllimport=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fvisibility-dllexport=)(.*)$/ { fullopt=$0; canonopt=deesc("-fvisibility-dllexport"); optarg=gensub(/(-fvisibility-dllexport=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fvirtual-function-elimination$/ { fullopt=$0; canonopt=deesc("-fvirtual-function-elimination"); inc=1; do_output(fullopt); next; }
/^(-fverify-debuginfo-preserve-export=)(.*)$/ { fullopt=$0; canonopt=deesc("-fverify-debuginfo-preserve-export"); optarg=gensub(/(-fverify-debuginfo-preserve-export=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fverify-debuginfo-preserve$/ { fullopt=$0; canonopt=deesc("-fverify-debuginfo-preserve"); inc=1; do_output(fullopt); next; }
/^-fverbose-asm$/ { fullopt=$0; canonopt=deesc("-fverbose-asm"); inc=1; do_output(fullopt); next; }
/^-fvectorize$/ { fullopt=$0; canonopt=deesc("-fvectorize"); inc=1; do_output(fullopt); next; }
/^(-fveclib=)(.*)$/ { fullopt=$0; canonopt=deesc("-fveclib"); optarg=gensub(/(-fveclib=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fvalidate-ast-input-files-content$/ { fullopt=$0; canonopt=deesc("-fvalidate-ast-input-files-content"); inc=1; do_output(fullopt); next; }
/^-fuse-register-sized-bitfield-access$/ { fullopt=$0; canonopt=deesc("-fuse-register-sized-bitfield-access"); inc=1; do_output(fullopt); next; }
/^-fuse-line-directives$/ { fullopt=$0; canonopt=deesc("-fuse-line-directives"); inc=1; do_output(fullopt); next; }
/^-fuse-init-array$/ { fullopt=$0; canonopt=deesc("-fuse-init-array"); inc=1; do_output(fullopt); next; }
/^-fuse-cxa-atexit$/ { fullopt=$0; canonopt=deesc("-fuse-cxa-atexit"); inc=1; do_output(fullopt); next; }
/^(-fuse-cuid=)(.*)$/ { fullopt=$0; canonopt=deesc("-fuse-cuid"); optarg=gensub(/(-fuse-cuid=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fuse-ctor-homing$/ { fullopt=$0; canonopt=deesc("-fuse-ctor-homing"); inc=1; do_output(fullopt); next; }
/^-funroll-loops$/ { fullopt=$0; canonopt=deesc("-funroll-loops"); inc=1; do_output(fullopt); next; }
/^-funknown-anytype$/ { fullopt=$0; canonopt=deesc("-funknown-anytype"); inc=1; do_output(fullopt); next; }
/^-funique-section-names$/ { fullopt=$0; canonopt=deesc("-funique-section-names"); inc=1; do_output(fullopt); next; }
/^-funique-internal-linkage-names$/ { fullopt=$0; canonopt=deesc("-funique-internal-linkage-names"); inc=1; do_output(fullopt); next; }
/^-funique-basic-block-section-names$/ { fullopt=$0; canonopt=deesc("-funique-basic-block-section-names"); inc=1; do_output(fullopt); next; }
/^(-function-alignment)$/     { fullopt=$0; canonopt=deesc("-function-alignment"); snarfing_optarg=1; inc=2; next; }
/^(-ftype-visibility)$/     { fullopt=$0; canonopt=deesc("-ftype-visibility"); snarfing_optarg=1; inc=2; next; }
/^(-ftrivial-auto-var-init=)(.*)$/ { fullopt=$0; canonopt=deesc("-ftrivial-auto-var-init"); optarg=gensub(/(-ftrivial-auto-var-init=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-ftrivial-auto-var-init-stop-after=)(.*)$/ { fullopt=$0; canonopt=deesc("-ftrivial-auto-var-init-stop-after"); optarg=gensub(/(-ftrivial-auto-var-init-stop-after=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-ftrigraphs$/ { fullopt=$0; canonopt=deesc("-ftrigraphs"); inc=1; do_output(fullopt); next; }
/^(-ftrapv-handler=)(.*)$/ { fullopt=$0; canonopt=deesc("-ftrapv-handler"); optarg=gensub(/(-ftrapv-handler=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-ftrapv$/ { fullopt=$0; canonopt=deesc("-ftrapv"); inc=1; do_output(fullopt); next; }
/^(-ftrap-function=)(.*)$/ { fullopt=$0; canonopt=deesc("-ftrap-function"); optarg=gensub(/(-ftrap-function=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-ftime-trace-granularity=)(.*)$/ { fullopt=$0; canonopt=deesc("-ftime-trace-granularity"); optarg=gensub(/(-ftime-trace-granularity=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-ftime-trace$/ { fullopt=$0; canonopt=deesc("-ftime-trace"); inc=1; do_output(fullopt); next; }
/^(-ftime-report=)(.*)$/ { fullopt=$0; canonopt=deesc("-ftime-report"); optarg=gensub(/(-ftime-report=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fthreadsafe-statics$/ { fullopt=$0; canonopt=deesc("-fthreadsafe-statics"); inc=1; do_output(fullopt); next; }
/^(-fthinlto-index=)(.*)$/ { fullopt=$0; canonopt=deesc("-fthinlto-index"); optarg=gensub(/(-fthinlto-index=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fthin-link-bitcode=)(.*)$/ { fullopt=$0; canonopt=deesc("-fthin-link-bitcode"); optarg=gensub(/(-fthin-link-bitcode=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-ftest-module-file-extension=)(.*)$/ { fullopt=$0; canonopt=deesc("-ftest-module-file-extension"); optarg=gensub(/(-ftest-module-file-extension=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-ftest-coverage$/ { fullopt=$0; canonopt=deesc("-ftest-coverage"); inc=1; do_output(fullopt); next; }
/^(-ftemplate-depth)$/     { fullopt=$0; canonopt=deesc("-ftemplate-depth"); snarfing_optarg=1; inc=2; next; }
/^(-ftemplate-backtrace-limit)$/     { fullopt=$0; canonopt=deesc("-ftemplate-backtrace-limit"); snarfing_optarg=1; inc=2; next; }
/^(-ftabstop)$/     { fullopt=$0; canonopt=deesc("-ftabstop"); snarfing_optarg=1; inc=2; next; }
/^-fsystem-module$/ { fullopt=$0; canonopt=deesc("-fsystem-module"); inc=1; do_output(fullopt); next; }
/^-fsycl-is-host$/ { fullopt=$0; canonopt=deesc("-fsycl-is-host"); inc=1; do_output(fullopt); next; }
/^-fsycl-is-device$/ { fullopt=$0; canonopt=deesc("-fsycl-is-device"); inc=1; do_output(fullopt); next; }
/^-fsycl$/ { fullopt=$0; canonopt=deesc("-fsycl"); inc=1; do_output(fullopt); next; }
/^-fstrict-vtable-pointers$/ { fullopt=$0; canonopt=deesc("-fstrict-vtable-pointers"); inc=1; do_output(fullopt); next; }
/^-fstrict-return$/ { fullopt=$0; canonopt=deesc("-fstrict-return"); inc=1; do_output(fullopt); next; }
/^-fstrict-float-cast-overflow$/ { fullopt=$0; canonopt=deesc("-fstrict-float-cast-overflow"); inc=1; do_output(fullopt); next; }
/^-fstrict-enums$/ { fullopt=$0; canonopt=deesc("-fstrict-enums"); inc=1; do_output(fullopt); next; }
/^-fstandalone-debug$/ { fullopt=$0; canonopt=deesc("-fstandalone-debug"); inc=1; do_output(fullopt); next; }
/^-fstack-usage$/ { fullopt=$0; canonopt=deesc("-fstack-usage"); inc=1; do_output(fullopt); next; }
/^-fstack-size-section$/ { fullopt=$0; canonopt=deesc("-fstack-size-section"); inc=1; do_output(fullopt); next; }
/^-fstack-protector-strong$/ { fullopt=$0; canonopt=deesc("-fstack-protector-strong"); inc=1; do_output(fullopt); next; }
/^-fstack-protector-all$/ { fullopt=$0; canonopt=deesc("-fstack-protector-all"); inc=1; do_output(fullopt); next; }
/^-fstack-protector$/ { fullopt=$0; canonopt=deesc("-fstack-protector"); inc=1; do_output(fullopt); next; }
/^-fstack-clash-protection$/ { fullopt=$0; canonopt=deesc("-fstack-clash-protection"); inc=1; do_output(fullopt); next; }
/^-fsplit-stack$/ { fullopt=$0; canonopt=deesc("-fsplit-stack"); inc=1; do_output(fullopt); next; }
/^-fsplit-machine-functions$/ { fullopt=$0; canonopt=deesc("-fsplit-machine-functions"); inc=1; do_output(fullopt); next; }
/^-fsplit-lto-unit$/ { fullopt=$0; canonopt=deesc("-fsplit-lto-unit"); inc=1; do_output(fullopt); next; }
/^-fsplit-dwarf-inlining$/ { fullopt=$0; canonopt=deesc("-fsplit-dwarf-inlining"); inc=1; do_output(fullopt); next; }
/^(-fspell-checking-limit)$/     { fullopt=$0; canonopt=deesc("-fspell-checking-limit"); snarfing_optarg=1; inc=2; next; }
/^-fspell-checking$/ { fullopt=$0; canonopt=deesc("-fspell-checking"); inc=1; do_output(fullopt); next; }
/^-fslp-vectorize$/ { fullopt=$0; canonopt=deesc("-fslp-vectorize"); inc=1; do_output(fullopt); next; }
/^-fsjlj-exceptions$/ { fullopt=$0; canonopt=deesc("-fsjlj-exceptions"); inc=1; do_output(fullopt); next; }
/^-fsized-deallocation$/ { fullopt=$0; canonopt=deesc("-fsized-deallocation"); inc=1; do_output(fullopt); next; }
/^-fsigned-zeros$/ { fullopt=$0; canonopt=deesc("-fsigned-zeros"); inc=1; do_output(fullopt); next; }
/^-fsigned-wchar$/ { fullopt=$0; canonopt=deesc("-fsigned-wchar"); inc=1; do_output(fullopt); next; }
/^-fsigned-char$/ { fullopt=$0; canonopt=deesc("-fsigned-char"); inc=1; do_output(fullopt); next; }
/^-fshow-source-location$/ { fullopt=$0; canonopt=deesc("-fshow-source-location"); inc=1; do_output(fullopt); next; }
/^-fshow-skipped-includes$/ { fullopt=$0; canonopt=deesc("-fshow-skipped-includes"); inc=1; do_output(fullopt); next; }
/^(-fshow-overloads=)(.*)$/ { fullopt=$0; canonopt=deesc("-fshow-overloads"); optarg=gensub(/(-fshow-overloads=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fshow-column$/ { fullopt=$0; canonopt=deesc("-fshow-column"); inc=1; do_output(fullopt); next; }
/^-fshort-wchar$/ { fullopt=$0; canonopt=deesc("-fshort-wchar"); inc=1; do_output(fullopt); next; }
/^-fshort-enums$/ { fullopt=$0; canonopt=deesc("-fshort-enums"); inc=1; do_output(fullopt); next; }
/^-fsemantic-interposition$/ { fullopt=$0; canonopt=deesc("-fsemantic-interposition"); inc=1; do_output(fullopt); next; }
/^-fseh-exceptions$/ { fullopt=$0; canonopt=deesc("-fseh-exceptions"); inc=1; do_output(fullopt); next; }
/^(-fsave-optimization-record=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsave-optimization-record"); optarg=gensub(/(-fsave-optimization-record=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fsave-optimization-record$/ { fullopt=$0; canonopt=deesc("-fsave-optimization-record"); inc=1; do_output(fullopt); next; }
/^(-fsanitize=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsanitize"); optarg=gensub(/(-fsanitize=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fsanitize-undefined-strip-path-components=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsanitize-undefined-strip-path-components"); optarg=gensub(/(-fsanitize-undefined-strip-path-components=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fsanitize-trap=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsanitize-trap"); optarg=gensub(/(-fsanitize-trap=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fsanitize-trap$/ { fullopt=$0; canonopt=deesc("-fsanitize-trap"); inc=1; do_output(fullopt); next; }
/^-fsanitize-thread-memory-access$/ { fullopt=$0; canonopt=deesc("-fsanitize-thread-memory-access"); inc=1; do_output(fullopt); next; }
/^-fsanitize-thread-func-entry-exit$/ { fullopt=$0; canonopt=deesc("-fsanitize-thread-func-entry-exit"); inc=1; do_output(fullopt); next; }
/^-fsanitize-thread-atomics$/ { fullopt=$0; canonopt=deesc("-fsanitize-thread-atomics"); inc=1; do_output(fullopt); next; }
/^(-fsanitize-system-ignorelist=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsanitize-system-ignorelist"); optarg=gensub(/(-fsanitize-system-ignorelist=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fsanitize-system-blacklist=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsanitize-system-blacklist"); optarg=gensub(/(-fsanitize-system-blacklist=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fsanitize-stats$/ { fullopt=$0; canonopt=deesc("-fsanitize-stats"); inc=1; do_output(fullopt); next; }
/^(-fsanitize-recover=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsanitize-recover"); optarg=gensub(/(-fsanitize-recover=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fsanitize-minimal-runtime$/ { fullopt=$0; canonopt=deesc("-fsanitize-minimal-runtime"); inc=1; do_output(fullopt); next; }
/^-fsanitize-memory-use-after-dtor$/ { fullopt=$0; canonopt=deesc("-fsanitize-memory-use-after-dtor"); inc=1; do_output(fullopt); next; }
/^(-fsanitize-memory-track-origins=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsanitize-memory-track-origins"); optarg=gensub(/(-fsanitize-memory-track-origins=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fsanitize-memory-track-origins$/ { fullopt=$0; canonopt=deesc("-fsanitize-memory-track-origins"); inc=1; do_output(fullopt); next; }
/^(-fsanitize-ignorelist=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsanitize-ignorelist"); optarg=gensub(/(-fsanitize-ignorelist=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fsanitize-hwaddress-experimental-aliasing$/ { fullopt=$0; canonopt=deesc("-fsanitize-hwaddress-experimental-aliasing"); inc=1; do_output(fullopt); next; }
/^(-fsanitize-hwaddress-abi=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsanitize-hwaddress-abi"); optarg=gensub(/(-fsanitize-hwaddress-abi=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fsanitize-coverage=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsanitize-coverage"); optarg=gensub(/(-fsanitize-coverage=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fsanitize-coverage-whitelist=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsanitize-coverage-whitelist"); optarg=gensub(/(-fsanitize-coverage-whitelist=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fsanitize-coverage-type=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsanitize-coverage-type"); optarg=gensub(/(-fsanitize-coverage-type=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fsanitize-coverage-trace-pc-guard$/ { fullopt=$0; canonopt=deesc("-fsanitize-coverage-trace-pc-guard"); inc=1; do_output(fullopt); next; }
/^-fsanitize-coverage-trace-pc$/ { fullopt=$0; canonopt=deesc("-fsanitize-coverage-trace-pc"); inc=1; do_output(fullopt); next; }
/^-fsanitize-coverage-trace-gep$/ { fullopt=$0; canonopt=deesc("-fsanitize-coverage-trace-gep"); inc=1; do_output(fullopt); next; }
/^-fsanitize-coverage-trace-div$/ { fullopt=$0; canonopt=deesc("-fsanitize-coverage-trace-div"); inc=1; do_output(fullopt); next; }
/^-fsanitize-coverage-trace-cmp$/ { fullopt=$0; canonopt=deesc("-fsanitize-coverage-trace-cmp"); inc=1; do_output(fullopt); next; }
/^-fsanitize-coverage-trace-bb$/ { fullopt=$0; canonopt=deesc("-fsanitize-coverage-trace-bb"); inc=1; do_output(fullopt); next; }
/^-fsanitize-coverage-stack-depth$/ { fullopt=$0; canonopt=deesc("-fsanitize-coverage-stack-depth"); inc=1; do_output(fullopt); next; }
/^-fsanitize-coverage-pc-table$/ { fullopt=$0; canonopt=deesc("-fsanitize-coverage-pc-table"); inc=1; do_output(fullopt); next; }
/^-fsanitize-coverage-no-prune$/ { fullopt=$0; canonopt=deesc("-fsanitize-coverage-no-prune"); inc=1; do_output(fullopt); next; }
/^-fsanitize-coverage-inline-bool-flag$/ { fullopt=$0; canonopt=deesc("-fsanitize-coverage-inline-bool-flag"); inc=1; do_output(fullopt); next; }
/^-fsanitize-coverage-inline-8bit-counters$/ { fullopt=$0; canonopt=deesc("-fsanitize-coverage-inline-8bit-counters"); inc=1; do_output(fullopt); next; }
/^-fsanitize-coverage-indirect-calls$/ { fullopt=$0; canonopt=deesc("-fsanitize-coverage-indirect-calls"); inc=1; do_output(fullopt); next; }
/^(-fsanitize-coverage-ignorelist=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsanitize-coverage-ignorelist"); optarg=gensub(/(-fsanitize-coverage-ignorelist=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fsanitize-coverage-blacklist=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsanitize-coverage-blacklist"); optarg=gensub(/(-fsanitize-coverage-blacklist=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fsanitize-coverage-allowlist=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsanitize-coverage-allowlist"); optarg=gensub(/(-fsanitize-coverage-allowlist=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fsanitize-coverage-8bit-counters$/ { fullopt=$0; canonopt=deesc("-fsanitize-coverage-8bit-counters"); inc=1; do_output(fullopt); next; }
/^-fsanitize-cfi-icall-generalize-pointers$/ { fullopt=$0; canonopt=deesc("-fsanitize-cfi-icall-generalize-pointers"); inc=1; do_output(fullopt); next; }
/^-fsanitize-cfi-cross-dso$/ { fullopt=$0; canonopt=deesc("-fsanitize-cfi-cross-dso"); inc=1; do_output(fullopt); next; }
/^-fsanitize-cfi-canonical-jump-tables$/ { fullopt=$0; canonopt=deesc("-fsanitize-cfi-canonical-jump-tables"); inc=1; do_output(fullopt); next; }
/^(-fsanitize-blacklist=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsanitize-blacklist"); optarg=gensub(/(-fsanitize-blacklist=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fsanitize-address-use-odr-indicator$/ { fullopt=$0; canonopt=deesc("-fsanitize-address-use-odr-indicator"); inc=1; do_output(fullopt); next; }
/^-fsanitize-address-use-after-scope$/ { fullopt=$0; canonopt=deesc("-fsanitize-address-use-after-scope"); inc=1; do_output(fullopt); next; }
/^(-fsanitize-address-use-after-return=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsanitize-address-use-after-return"); optarg=gensub(/(-fsanitize-address-use-after-return=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fsanitize-address-poison-custom-array-cookie$/ { fullopt=$0; canonopt=deesc("-fsanitize-address-poison-custom-array-cookie"); inc=1; do_output(fullopt); next; }
/^-fsanitize-address-outline-instrumentation$/ { fullopt=$0; canonopt=deesc("-fsanitize-address-outline-instrumentation"); inc=1; do_output(fullopt); next; }
/^-fsanitize-address-globals-dead-stripping$/ { fullopt=$0; canonopt=deesc("-fsanitize-address-globals-dead-stripping"); inc=1; do_output(fullopt); next; }
/^(-fsanitize-address-field-padding=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsanitize-address-field-padding"); optarg=gensub(/(-fsanitize-address-field-padding=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fsanitize-address-destructor=)(.*)$/ { fullopt=$0; canonopt=deesc("-fsanitize-address-destructor"); optarg=gensub(/(-fsanitize-address-destructor=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-frwpi$/ { fullopt=$0; canonopt=deesc("-frwpi"); inc=1; do_output(fullopt); next; }
/^-frtti-data$/ { fullopt=$0; canonopt=deesc("-frtti-data"); inc=1; do_output(fullopt); next; }
/^-frtti$/ { fullopt=$0; canonopt=deesc("-frtti"); inc=1; do_output(fullopt); next; }
/^-frtlib-add-rpath$/ { fullopt=$0; canonopt=deesc("-frtlib-add-rpath"); inc=1; do_output(fullopt); next; }
/^-fropi$/ { fullopt=$0; canonopt=deesc("-fropi"); inc=1; do_output(fullopt); next; }
/^-frewrite-includes$/ { fullopt=$0; canonopt=deesc("-frewrite-includes"); inc=1; do_output(fullopt); next; }
/^-frewrite-imports$/ { fullopt=$0; canonopt=deesc("-frewrite-imports"); inc=1; do_output(fullopt); next; }
/^-freroll-loops$/ { fullopt=$0; canonopt=deesc("-freroll-loops"); inc=1; do_output(fullopt); next; }
/^-frelaxed-template-template-args$/ { fullopt=$0; canonopt=deesc("-frelaxed-template-template-args"); inc=1; do_output(fullopt); next; }
/^-fregister-global-dtors-with-atexit$/ { fullopt=$0; canonopt=deesc("-fregister-global-dtors-with-atexit"); inc=1; do_output(fullopt); next; }
/^-freg-struct-return$/ { fullopt=$0; canonopt=deesc("-freg-struct-return"); inc=1; do_output(fullopt); next; }
/^-frecovery-ast-type$/ { fullopt=$0; canonopt=deesc("-frecovery-ast-type"); inc=1; do_output(fullopt); next; }
/^-frecovery-ast$/ { fullopt=$0; canonopt=deesc("-frecovery-ast"); inc=1; do_output(fullopt); next; }
/^-freciprocal-math$/ { fullopt=$0; canonopt=deesc("-freciprocal-math"); inc=1; do_output(fullopt); next; }
/^-fpseudo-probe-for-profiling$/ { fullopt=$0; canonopt=deesc("-fpseudo-probe-for-profiling"); inc=1; do_output(fullopt); next; }
/^-fprotect-parens$/ { fullopt=$0; canonopt=deesc("-fprotect-parens"); inc=1; do_output(fullopt); next; }
/^(-fprofile-use=)(.*)$/ { fullopt=$0; canonopt=deesc("-fprofile-use"); optarg=gensub(/(-fprofile-use=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fprofile-update=)(.*)$/ { fullopt=$0; canonopt=deesc("-fprofile-update"); optarg=gensub(/(-fprofile-update=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fprofile-sample-use=)(.*)$/ { fullopt=$0; canonopt=deesc("-fprofile-sample-use"); optarg=gensub(/(-fprofile-sample-use=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fprofile-sample-accurate$/ { fullopt=$0; canonopt=deesc("-fprofile-sample-accurate"); inc=1; do_output(fullopt); next; }
/^(-fprofile-remapping-file=)(.*)$/ { fullopt=$0; canonopt=deesc("-fprofile-remapping-file"); optarg=gensub(/(-fprofile-remapping-file=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fprofile-list=)(.*)$/ { fullopt=$0; canonopt=deesc("-fprofile-list"); optarg=gensub(/(-fprofile-list=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fprofile-instrument=)(.*)$/ { fullopt=$0; canonopt=deesc("-fprofile-instrument"); optarg=gensub(/(-fprofile-instrument=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fprofile-instrument-use-path=)(.*)$/ { fullopt=$0; canonopt=deesc("-fprofile-instrument-use-path"); optarg=gensub(/(-fprofile-instrument-use-path=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fprofile-instrument-path=)(.*)$/ { fullopt=$0; canonopt=deesc("-fprofile-instrument-path"); optarg=gensub(/(-fprofile-instrument-path=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fprofile-instr-use=)(.*)$/ { fullopt=$0; canonopt=deesc("-fprofile-instr-use"); optarg=gensub(/(-fprofile-instr-use=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fprofile-instr-generate=)(.*)$/ { fullopt=$0; canonopt=deesc("-fprofile-instr-generate"); optarg=gensub(/(-fprofile-instr-generate=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fprofile-instr-generate$/ { fullopt=$0; canonopt=deesc("-fprofile-instr-generate"); inc=1; do_output(fullopt); next; }
/^(-fprofile-generate=)(.*)$/ { fullopt=$0; canonopt=deesc("-fprofile-generate"); optarg=gensub(/(-fprofile-generate=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fprofile-generate$/ { fullopt=$0; canonopt=deesc("-fprofile-generate"); inc=1; do_output(fullopt); next; }
/^(-fprofile-filter-files=)(.*)$/ { fullopt=$0; canonopt=deesc("-fprofile-filter-files"); optarg=gensub(/(-fprofile-filter-files=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fprofile-exclude-files=)(.*)$/ { fullopt=$0; canonopt=deesc("-fprofile-exclude-files"); optarg=gensub(/(-fprofile-exclude-files=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fprofile-arcs$/ { fullopt=$0; canonopt=deesc("-fprofile-arcs"); inc=1; do_output(fullopt); next; }
/^(-fproc-stat-report)(.*)$/ { fullopt=$0; canonopt=deesc("-fproc-stat-report"); optarg=gensub(/(-fproc-stat-report)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fproc-stat-report=)(.*)$/ { fullopt=$0; canonopt=deesc("-fproc-stat-report"); optarg=gensub(/(-fproc-stat-report=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fpreserve-vec3-type$/ { fullopt=$0; canonopt=deesc("-fpreserve-vec3-type"); inc=1; do_output(fullopt); next; }
/^-fpreserve-as-comments$/ { fullopt=$0; canonopt=deesc("-fpreserve-as-comments"); inc=1; do_output(fullopt); next; }
/^(-fprebuilt-module-path=)(.*)$/ { fullopt=$0; canonopt=deesc("-fprebuilt-module-path"); optarg=gensub(/(-fprebuilt-module-path=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fprebuilt-implicit-modules$/ { fullopt=$0; canonopt=deesc("-fprebuilt-implicit-modules"); inc=1; do_output(fullopt); next; }
/^(-fplugin=)(.*)$/ { fullopt=$0; canonopt=deesc("-fplugin"); optarg=gensub(/(-fplugin=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fplt$/ { fullopt=$0; canonopt=deesc("-fplt"); inc=1; do_output(fullopt); next; }
/^-fpch-validate-input-files-content$/ { fullopt=$0; canonopt=deesc("-fpch-validate-input-files-content"); inc=1; do_output(fullopt); next; }
/^-fpch-instantiate-templates$/ { fullopt=$0; canonopt=deesc("-fpch-instantiate-templates"); inc=1; do_output(fullopt); next; }
/^-fpch-debuginfo$/ { fullopt=$0; canonopt=deesc("-fpch-debuginfo"); inc=1; do_output(fullopt); next; }
/^-fpch-codegen$/ { fullopt=$0; canonopt=deesc("-fpch-codegen"); inc=1; do_output(fullopt); next; }
/^-fpcc-struct-return$/ { fullopt=$0; canonopt=deesc("-fpcc-struct-return"); inc=1; do_output(fullopt); next; }
/^(-fpatchable-function-entry=)(.*)$/ { fullopt=$0; canonopt=deesc("-fpatchable-function-entry"); optarg=gensub(/(-fpatchable-function-entry=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fpatchable-function-entry-offset=)(.*)$/ { fullopt=$0; canonopt=deesc("-fpatchable-function-entry-offset"); optarg=gensub(/(-fpatchable-function-entry-offset=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fpass-plugin=)(.*)$/ { fullopt=$0; canonopt=deesc("-fpass-plugin"); optarg=gensub(/(-fpass-plugin=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fpass-by-value-is-noalias$/ { fullopt=$0; canonopt=deesc("-fpass-by-value-is-noalias"); inc=1; do_output(fullopt); next; }
/^-fpascal-strings$/ { fullopt=$0; canonopt=deesc("-fpascal-strings"); inc=1; do_output(fullopt); next; }
/^-fpadding-on-unsigned-fixed-point$/ { fullopt=$0; canonopt=deesc("-fpadding-on-unsigned-fixed-point"); inc=1; do_output(fullopt); next; }
/^(-fpack-struct=)(.*)$/ { fullopt=$0; canonopt=deesc("-fpack-struct"); optarg=gensub(/(-fpack-struct=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-foverride-record-layout=)(.*)$/ { fullopt=$0; canonopt=deesc("-foverride-record-layout"); optarg=gensub(/(-foverride-record-layout=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-forder-file-instrumentation$/ { fullopt=$0; canonopt=deesc("-forder-file-instrumentation"); inc=1; do_output(fullopt); next; }
/^(-foptimization-record-passes=)(.*)$/ { fullopt=$0; canonopt=deesc("-foptimization-record-passes"); optarg=gensub(/(-foptimization-record-passes=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-foptimization-record-file=)(.*)$/ { fullopt=$0; canonopt=deesc("-foptimization-record-file"); optarg=gensub(/(-foptimization-record-file=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-foperator-names$/ { fullopt=$0; canonopt=deesc("-foperator-names"); inc=1; do_output(fullopt); next; }
/^(-foperator-arrow-depth)$/     { fullopt=$0; canonopt=deesc("-foperator-arrow-depth"); snarfing_optarg=1; inc=2; next; }
/^(-fopenmp-targets=)(.*)$/ { fullopt=$0; canonopt=deesc("-fopenmp-targets"); optarg=gensub(/(-fopenmp-targets=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fopenmp-target-new-runtime$/ { fullopt=$0; canonopt=deesc("-fopenmp-target-new-runtime"); inc=1; do_output(fullopt); next; }
/^-fopenmp-simd$/ { fullopt=$0; canonopt=deesc("-fopenmp-simd"); inc=1; do_output(fullopt); next; }
/^-fopenmp-optimistic-collapse$/ { fullopt=$0; canonopt=deesc("-fopenmp-optimistic-collapse"); inc=1; do_output(fullopt); next; }
/^-fopenmp-is-device$/ { fullopt=$0; canonopt=deesc("-fopenmp-is-device"); inc=1; do_output(fullopt); next; }
/^(-fopenmp-host-ir-file-path)$/     { fullopt=$0; canonopt=deesc("-fopenmp-host-ir-file-path"); snarfing_optarg=1; inc=2; next; }
/^-fopenmp-enable-irbuilder$/ { fullopt=$0; canonopt=deesc("-fopenmp-enable-irbuilder"); inc=1; do_output(fullopt); next; }
/^-fopenmp$/ { fullopt=$0; canonopt=deesc("-fopenmp"); inc=1; do_output(fullopt); next; }
/^(-foffload-lto=)(.*)$/ { fullopt=$0; canonopt=deesc("-foffload-lto"); optarg=gensub(/(-foffload-lto=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-foffload-lto$/ { fullopt=$0; canonopt=deesc("-foffload-lto"); inc=1; do_output(fullopt); next; }
/^-fobjc-weak$/ { fullopt=$0; canonopt=deesc("-fobjc-weak"); inc=1; do_output(fullopt); next; }
/^-fobjc-subscripting-legacy-runtime$/ { fullopt=$0; canonopt=deesc("-fobjc-subscripting-legacy-runtime"); inc=1; do_output(fullopt); next; }
/^(-fobjc-runtime=)(.*)$/ { fullopt=$0; canonopt=deesc("-fobjc-runtime"); optarg=gensub(/(-fobjc-runtime=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fobjc-runtime-has-weak$/ { fullopt=$0; canonopt=deesc("-fobjc-runtime-has-weak"); inc=1; do_output(fullopt); next; }
/^-fobjc-infer-related-result-type$/ { fullopt=$0; canonopt=deesc("-fobjc-infer-related-result-type"); inc=1; do_output(fullopt); next; }
/^-fobjc-gc-only$/ { fullopt=$0; canonopt=deesc("-fobjc-gc-only"); inc=1; do_output(fullopt); next; }
/^-fobjc-gc$/ { fullopt=$0; canonopt=deesc("-fobjc-gc"); inc=1; do_output(fullopt); next; }
/^-fobjc-exceptions$/ { fullopt=$0; canonopt=deesc("-fobjc-exceptions"); inc=1; do_output(fullopt); next; }
/^-fobjc-encode-cxx-class-template-spec$/ { fullopt=$0; canonopt=deesc("-fobjc-encode-cxx-class-template-spec"); inc=1; do_output(fullopt); next; }
/^(-fobjc-dispatch-method=)(.*)$/ { fullopt=$0; canonopt=deesc("-fobjc-dispatch-method"); optarg=gensub(/(-fobjc-dispatch-method=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fobjc-disable-direct-methods-for-testing$/ { fullopt=$0; canonopt=deesc("-fobjc-disable-direct-methods-for-testing"); inc=1; do_output(fullopt); next; }
/^-fobjc-convert-messages-to-runtime-calls$/ { fullopt=$0; canonopt=deesc("-fobjc-convert-messages-to-runtime-calls"); inc=1; do_output(fullopt); next; }
/^-fobjc-arc-exceptions$/ { fullopt=$0; canonopt=deesc("-fobjc-arc-exceptions"); inc=1; do_output(fullopt); next; }
/^(-fobjc-arc-cxxlib=)(.*)$/ { fullopt=$0; canonopt=deesc("-fobjc-arc-cxxlib"); optarg=gensub(/(-fobjc-arc-cxxlib=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fobjc-arc$/ { fullopt=$0; canonopt=deesc("-fobjc-arc"); inc=1; do_output(fullopt); next; }
/^-fno-zvector$/ { fullopt=$0; canonopt=deesc("-fno-zvector"); inc=1; do_output(fullopt); next; }
/^-fno-zero-initialized-in-bss$/ { fullopt=$0; canonopt=deesc("-fno-zero-initialized-in-bss"); inc=1; do_output(fullopt); next; }
/^-fno-xray-link-deps$/ { fullopt=$0; canonopt=deesc("-fno-xray-link-deps"); inc=1; do_output(fullopt); next; }
/^-fno-xray-instrument$/ { fullopt=$0; canonopt=deesc("-fno-xray-instrument"); inc=1; do_output(fullopt); next; }
/^-fno-xray-ignore-loops$/ { fullopt=$0; canonopt=deesc("-fno-xray-ignore-loops"); inc=1; do_output(fullopt); next; }
/^-fno-xray-function-index$/ { fullopt=$0; canonopt=deesc("-fno-xray-function-index"); inc=1; do_output(fullopt); next; }
/^-fno-xray-always-emit-typedevents$/ { fullopt=$0; canonopt=deesc("-fno-xray-always-emit-typedevents"); inc=1; do_output(fullopt); next; }
/^-fno-xray-always-emit-customevents$/ { fullopt=$0; canonopt=deesc("-fno-xray-always-emit-customevents"); inc=1; do_output(fullopt); next; }
/^-fno-xl-pragma-pack$/ { fullopt=$0; canonopt=deesc("-fno-xl-pragma-pack"); inc=1; do_output(fullopt); next; }
/^-fno-writable-strings$/ { fullopt=$0; canonopt=deesc("-fno-writable-strings"); inc=1; do_output(fullopt); next; }
/^-fno-wrapv$/ { fullopt=$0; canonopt=deesc("-fno-wrapv"); inc=1; do_output(fullopt); next; }
/^-fno-whole-program-vtables$/ { fullopt=$0; canonopt=deesc("-fno-whole-program-vtables"); inc=1; do_output(fullopt); next; }
/^-fno-wchar$/ { fullopt=$0; canonopt=deesc("-fno-wchar"); inc=1; do_output(fullopt); next; }
/^-fno-wasm-exceptions$/ { fullopt=$0; canonopt=deesc("-fno-wasm-exceptions"); inc=1; do_output(fullopt); next; }
/^-fno-visibility-ms-compat$/ { fullopt=$0; canonopt=deesc("-fno-visibility-ms-compat"); inc=1; do_output(fullopt); next; }
/^-fno-visibility-inlines-hidden-static-local-var$/ { fullopt=$0; canonopt=deesc("-fno-visibility-inlines-hidden-static-local-var"); inc=1; do_output(fullopt); next; }
/^-fno-visibility-inlines-hidden$/ { fullopt=$0; canonopt=deesc("-fno-visibility-inlines-hidden"); inc=1; do_output(fullopt); next; }
/^-fno-visibility-global-new-delete-hidden$/ { fullopt=$0; canonopt=deesc("-fno-visibility-global-new-delete-hidden"); inc=1; do_output(fullopt); next; }
/^-fno-visibility-from-dllstorageclass$/ { fullopt=$0; canonopt=deesc("-fno-visibility-from-dllstorageclass"); inc=1; do_output(fullopt); next; }
/^-fno-virtual-function-elimination$/ { fullopt=$0; canonopt=deesc("-fno-virtual-function-elimination"); inc=1; do_output(fullopt); next; }
/^-fno-verify-debuginfo-preserve$/ { fullopt=$0; canonopt=deesc("-fno-verify-debuginfo-preserve"); inc=1; do_output(fullopt); next; }
/^-fno-verbose-asm$/ { fullopt=$0; canonopt=deesc("-fno-verbose-asm"); inc=1; do_output(fullopt); next; }
/^-fno-vectorize$/ { fullopt=$0; canonopt=deesc("-fno-vectorize"); inc=1; do_output(fullopt); next; }
/^-fno-validate-pch$/ { fullopt=$0; canonopt=deesc("-fno-validate-pch"); inc=1; do_output(fullopt); next; }
/^-fno-validate-ast-input-files-content$/ { fullopt=$0; canonopt=deesc("-fno-validate-ast-input-files-content"); inc=1; do_output(fullopt); next; }
/^-fno-use-register-sized-bitfield-access$/ { fullopt=$0; canonopt=deesc("-fno-use-register-sized-bitfield-access"); inc=1; do_output(fullopt); next; }
/^-fno-use-line-directives$/ { fullopt=$0; canonopt=deesc("-fno-use-line-directives"); inc=1; do_output(fullopt); next; }
/^-fno-use-init-array$/ { fullopt=$0; canonopt=deesc("-fno-use-init-array"); inc=1; do_output(fullopt); next; }
/^-fno-use-cxa-atexit$/ { fullopt=$0; canonopt=deesc("-fno-use-cxa-atexit"); inc=1; do_output(fullopt); next; }
/^-fno-use-ctor-homing$/ { fullopt=$0; canonopt=deesc("-fno-use-ctor-homing"); inc=1; do_output(fullopt); next; }
/^-fno-unroll-loops$/ { fullopt=$0; canonopt=deesc("-fno-unroll-loops"); inc=1; do_output(fullopt); next; }
/^-fno-unknown-anytype$/ { fullopt=$0; canonopt=deesc("-fno-unknown-anytype"); inc=1; do_output(fullopt); next; }
/^-fno-unique-section-names$/ { fullopt=$0; canonopt=deesc("-fno-unique-section-names"); inc=1; do_output(fullopt); next; }
/^-fno-unique-internal-linkage-names$/ { fullopt=$0; canonopt=deesc("-fno-unique-internal-linkage-names"); inc=1; do_output(fullopt); next; }
/^-fno-unique-basic-block-section-names$/ { fullopt=$0; canonopt=deesc("-fno-unique-basic-block-section-names"); inc=1; do_output(fullopt); next; }
/^-fno-trigraphs$/ { fullopt=$0; canonopt=deesc("-fno-trigraphs"); inc=1; do_output(fullopt); next; }
/^-fno-trapv$/ { fullopt=$0; canonopt=deesc("-fno-trapv"); inc=1; do_output(fullopt); next; }
/^-fno-time-trace$/ { fullopt=$0; canonopt=deesc("-fno-time-trace"); inc=1; do_output(fullopt); next; }
/^-fno-threadsafe-statics$/ { fullopt=$0; canonopt=deesc("-fno-threadsafe-statics"); inc=1; do_output(fullopt); next; }
/^-fno-test-coverage$/ { fullopt=$0; canonopt=deesc("-fno-test-coverage"); inc=1; do_output(fullopt); next; }
/^-fno-temp-file$/ { fullopt=$0; canonopt=deesc("-fno-temp-file"); inc=1; do_output(fullopt); next; }
/^-fno-system-module$/ { fullopt=$0; canonopt=deesc("-fno-system-module"); inc=1; do_output(fullopt); next; }
/^-fno-sycl-is-host$/ { fullopt=$0; canonopt=deesc("-fno-sycl-is-host"); inc=1; do_output(fullopt); next; }
/^-fno-sycl-is-device$/ { fullopt=$0; canonopt=deesc("-fno-sycl-is-device"); inc=1; do_output(fullopt); next; }
/^-fno-sycl$/ { fullopt=$0; canonopt=deesc("-fno-sycl"); inc=1; do_output(fullopt); next; }
/^-fno-strict-vtable-pointers$/ { fullopt=$0; canonopt=deesc("-fno-strict-vtable-pointers"); inc=1; do_output(fullopt); next; }
/^-fno-strict-return$/ { fullopt=$0; canonopt=deesc("-fno-strict-return"); inc=1; do_output(fullopt); next; }
/^-fno-strict-float-cast-overflow$/ { fullopt=$0; canonopt=deesc("-fno-strict-float-cast-overflow"); inc=1; do_output(fullopt); next; }
/^-fno-strict-enums$/ { fullopt=$0; canonopt=deesc("-fno-strict-enums"); inc=1; do_output(fullopt); next; }
/^-fno-standalone-debug$/ { fullopt=$0; canonopt=deesc("-fno-standalone-debug"); inc=1; do_output(fullopt); next; }
/^-fno-stack-usage$/ { fullopt=$0; canonopt=deesc("-fno-stack-usage"); inc=1; do_output(fullopt); next; }
/^-fno-stack-size-section$/ { fullopt=$0; canonopt=deesc("-fno-stack-size-section"); inc=1; do_output(fullopt); next; }
/^-fno-stack-protector-strong$/ { fullopt=$0; canonopt=deesc("-fno-stack-protector-strong"); inc=1; do_output(fullopt); next; }
/^-fno-stack-protector-all$/ { fullopt=$0; canonopt=deesc("-fno-stack-protector-all"); inc=1; do_output(fullopt); next; }
/^-fno-stack-protector$/ { fullopt=$0; canonopt=deesc("-fno-stack-protector"); inc=1; do_output(fullopt); next; }
/^-fno-stack-clash-protection$/ { fullopt=$0; canonopt=deesc("-fno-stack-clash-protection"); inc=1; do_output(fullopt); next; }
/^-fno-split-stack$/ { fullopt=$0; canonopt=deesc("-fno-split-stack"); inc=1; do_output(fullopt); next; }
/^-fno-split-machine-functions$/ { fullopt=$0; canonopt=deesc("-fno-split-machine-functions"); inc=1; do_output(fullopt); next; }
/^-fno-split-lto-unit$/ { fullopt=$0; canonopt=deesc("-fno-split-lto-unit"); inc=1; do_output(fullopt); next; }
/^-fno-split-dwarf-inlining$/ { fullopt=$0; canonopt=deesc("-fno-split-dwarf-inlining"); inc=1; do_output(fullopt); next; }
/^-fno-spell-checking$/ { fullopt=$0; canonopt=deesc("-fno-spell-checking"); inc=1; do_output(fullopt); next; }
/^-fno-slp-vectorize$/ { fullopt=$0; canonopt=deesc("-fno-slp-vectorize"); inc=1; do_output(fullopt); next; }
/^-fno-sjlj-exceptions$/ { fullopt=$0; canonopt=deesc("-fno-sjlj-exceptions"); inc=1; do_output(fullopt); next; }
/^-fno-sized-deallocation$/ { fullopt=$0; canonopt=deesc("-fno-sized-deallocation"); inc=1; do_output(fullopt); next; }
/^-fno-signed-zeros$/ { fullopt=$0; canonopt=deesc("-fno-signed-zeros"); inc=1; do_output(fullopt); next; }
/^-fno-signed-wchar$/ { fullopt=$0; canonopt=deesc("-fno-signed-wchar"); inc=1; do_output(fullopt); next; }
/^-fno-signed-char$/ { fullopt=$0; canonopt=deesc("-fno-signed-char"); inc=1; do_output(fullopt); next; }
/^-fno-show-source-location$/ { fullopt=$0; canonopt=deesc("-fno-show-source-location"); inc=1; do_output(fullopt); next; }
/^-fno-show-skipped-includes$/ { fullopt=$0; canonopt=deesc("-fno-show-skipped-includes"); inc=1; do_output(fullopt); next; }
/^-fno-show-column$/ { fullopt=$0; canonopt=deesc("-fno-show-column"); inc=1; do_output(fullopt); next; }
/^-fno-short-wchar$/ { fullopt=$0; canonopt=deesc("-fno-short-wchar"); inc=1; do_output(fullopt); next; }
/^-fno-short-enums$/ { fullopt=$0; canonopt=deesc("-fno-short-enums"); inc=1; do_output(fullopt); next; }
/^-fno-semantic-interposition$/ { fullopt=$0; canonopt=deesc("-fno-semantic-interposition"); inc=1; do_output(fullopt); next; }
/^-fno-seh-exceptions$/ { fullopt=$0; canonopt=deesc("-fno-seh-exceptions"); inc=1; do_output(fullopt); next; }
/^-fno-save-optimization-record$/ { fullopt=$0; canonopt=deesc("-fno-save-optimization-record"); inc=1; do_output(fullopt); next; }
/^(-fno-sanitize-trap=)(.*)$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-trap"); optarg=gensub(/(-fno-sanitize-trap=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-trap$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-trap"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-thread-memory-access$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-thread-memory-access"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-thread-func-entry-exit$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-thread-func-entry-exit"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-thread-atomics$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-thread-atomics"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-stats$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-stats"); inc=1; do_output(fullopt); next; }
/^(-fno-sanitize-recover=)(.*)$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-recover"); optarg=gensub(/(-fno-sanitize-recover=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-minimal-runtime$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-minimal-runtime"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-memory-use-after-dtor$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-memory-use-after-dtor"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-memory-track-origins$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-memory-track-origins"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-ignorelist$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-ignorelist"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-hwaddress-experimental-aliasing$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-hwaddress-experimental-aliasing"); inc=1; do_output(fullopt); next; }
/^(-fno-sanitize-coverage=)(.*)$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-coverage"); optarg=gensub(/(-fno-sanitize-coverage=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-coverage-trace-pc-guard$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-coverage-trace-pc-guard"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-coverage-trace-pc$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-coverage-trace-pc"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-coverage-trace-gep$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-coverage-trace-gep"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-coverage-trace-div$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-coverage-trace-div"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-coverage-trace-cmp$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-coverage-trace-cmp"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-coverage-trace-bb$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-coverage-trace-bb"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-coverage-stack-depth$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-coverage-stack-depth"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-coverage-pc-table$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-coverage-pc-table"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-coverage-no-prune$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-coverage-no-prune"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-coverage-inline-bool-flag$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-coverage-inline-bool-flag"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-coverage-inline-8bit-counters$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-coverage-inline-8bit-counters"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-coverage-indirect-calls$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-coverage-indirect-calls"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-coverage-8bit-counters$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-coverage-8bit-counters"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-cfi-icall-generalize-pointers$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-cfi-icall-generalize-pointers"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-cfi-cross-dso$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-cfi-cross-dso"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-cfi-canonical-jump-tables$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-cfi-canonical-jump-tables"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-address-use-odr-indicator$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-address-use-odr-indicator"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-address-use-after-scope$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-address-use-after-scope"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-address-poison-custom-array-cookie$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-address-poison-custom-array-cookie"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-address-outline-instrumentation$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-address-outline-instrumentation"); inc=1; do_output(fullopt); next; }
/^-fno-sanitize-address-globals-dead-stripping$/ { fullopt=$0; canonopt=deesc("-fno-sanitize-address-globals-dead-stripping"); inc=1; do_output(fullopt); next; }
/^-fno-rwpi$/ { fullopt=$0; canonopt=deesc("-fno-rwpi"); inc=1; do_output(fullopt); next; }
/^-fno-rtti-data$/ { fullopt=$0; canonopt=deesc("-fno-rtti-data"); inc=1; do_output(fullopt); next; }
/^-fno-rtti$/ { fullopt=$0; canonopt=deesc("-fno-rtti"); inc=1; do_output(fullopt); next; }
/^-fno-rtlib-add-rpath$/ { fullopt=$0; canonopt=deesc("-fno-rtlib-add-rpath"); inc=1; do_output(fullopt); next; }
/^-fno-ropi$/ { fullopt=$0; canonopt=deesc("-fno-ropi"); inc=1; do_output(fullopt); next; }
/^-fno-rewrite-includes$/ { fullopt=$0; canonopt=deesc("-fno-rewrite-includes"); inc=1; do_output(fullopt); next; }
/^-fno-rewrite-imports$/ { fullopt=$0; canonopt=deesc("-fno-rewrite-imports"); inc=1; do_output(fullopt); next; }
/^-fno-reroll-loops$/ { fullopt=$0; canonopt=deesc("-fno-reroll-loops"); inc=1; do_output(fullopt); next; }
/^-fno-relaxed-template-template-args$/ { fullopt=$0; canonopt=deesc("-fno-relaxed-template-template-args"); inc=1; do_output(fullopt); next; }
/^-fno-register-global-dtors-with-atexit$/ { fullopt=$0; canonopt=deesc("-fno-register-global-dtors-with-atexit"); inc=1; do_output(fullopt); next; }
/^-fno-reg-struct-return$/ { fullopt=$0; canonopt=deesc("-fno-reg-struct-return"); inc=1; do_output(fullopt); next; }
/^-fno-recovery-ast-type$/ { fullopt=$0; canonopt=deesc("-fno-recovery-ast-type"); inc=1; do_output(fullopt); next; }
/^-fno-recovery-ast$/ { fullopt=$0; canonopt=deesc("-fno-recovery-ast"); inc=1; do_output(fullopt); next; }
/^-fno-reciprocal-math$/ { fullopt=$0; canonopt=deesc("-fno-reciprocal-math"); inc=1; do_output(fullopt); next; }
/^-fno-pseudo-probe-for-profiling$/ { fullopt=$0; canonopt=deesc("-fno-pseudo-probe-for-profiling"); inc=1; do_output(fullopt); next; }
/^-fno-protect-parens$/ { fullopt=$0; canonopt=deesc("-fno-protect-parens"); inc=1; do_output(fullopt); next; }
/^-fno-profile-sample-accurate$/ { fullopt=$0; canonopt=deesc("-fno-profile-sample-accurate"); inc=1; do_output(fullopt); next; }
/^-fno-profile-instr-use$/ { fullopt=$0; canonopt=deesc("-fno-profile-instr-use"); inc=1; do_output(fullopt); next; }
/^-fno-profile-instr-generate$/ { fullopt=$0; canonopt=deesc("-fno-profile-instr-generate"); inc=1; do_output(fullopt); next; }
/^-fno-profile-generate$/ { fullopt=$0; canonopt=deesc("-fno-profile-generate"); inc=1; do_output(fullopt); next; }
/^-fno-profile-arcs$/ { fullopt=$0; canonopt=deesc("-fno-profile-arcs"); inc=1; do_output(fullopt); next; }
/^-fno-preserve-vec3-type$/ { fullopt=$0; canonopt=deesc("-fno-preserve-vec3-type"); inc=1; do_output(fullopt); next; }
/^-fno-preserve-as-comments$/ { fullopt=$0; canonopt=deesc("-fno-preserve-as-comments"); inc=1; do_output(fullopt); next; }
/^-fno-prebuilt-implicit-modules$/ { fullopt=$0; canonopt=deesc("-fno-prebuilt-implicit-modules"); inc=1; do_output(fullopt); next; }
/^-fno-plt$/ { fullopt=$0; canonopt=deesc("-fno-plt"); inc=1; do_output(fullopt); next; }
/^-fno-pch-validate-input-files-content$/ { fullopt=$0; canonopt=deesc("-fno-pch-validate-input-files-content"); inc=1; do_output(fullopt); next; }
/^-fno-pch-timestamp$/ { fullopt=$0; canonopt=deesc("-fno-pch-timestamp"); inc=1; do_output(fullopt); next; }
/^-fno-pch-instantiate-templates$/ { fullopt=$0; canonopt=deesc("-fno-pch-instantiate-templates"); inc=1; do_output(fullopt); next; }
/^-fno-pch-debuginfo$/ { fullopt=$0; canonopt=deesc("-fno-pch-debuginfo"); inc=1; do_output(fullopt); next; }
/^-fno-pch-codegen$/ { fullopt=$0; canonopt=deesc("-fno-pch-codegen"); inc=1; do_output(fullopt); next; }
/^-fno-pcc-struct-return$/ { fullopt=$0; canonopt=deesc("-fno-pcc-struct-return"); inc=1; do_output(fullopt); next; }
/^-fno-pass-by-value-is-noalias$/ { fullopt=$0; canonopt=deesc("-fno-pass-by-value-is-noalias"); inc=1; do_output(fullopt); next; }
/^-fno-pascal-strings$/ { fullopt=$0; canonopt=deesc("-fno-pascal-strings"); inc=1; do_output(fullopt); next; }
/^-fno-padding-on-unsigned-fixed-point$/ { fullopt=$0; canonopt=deesc("-fno-padding-on-unsigned-fixed-point"); inc=1; do_output(fullopt); next; }
/^-fno-order-file-instrumentation$/ { fullopt=$0; canonopt=deesc("-fno-order-file-instrumentation"); inc=1; do_output(fullopt); next; }
/^-fno-operator-names$/ { fullopt=$0; canonopt=deesc("-fno-operator-names"); inc=1; do_output(fullopt); next; }
/^-fno-openmp-target-new-runtime$/ { fullopt=$0; canonopt=deesc("-fno-openmp-target-new-runtime"); inc=1; do_output(fullopt); next; }
/^-fno-openmp-simd$/ { fullopt=$0; canonopt=deesc("-fno-openmp-simd"); inc=1; do_output(fullopt); next; }
/^-fno-openmp-optimistic-collapse$/ { fullopt=$0; canonopt=deesc("-fno-openmp-optimistic-collapse"); inc=1; do_output(fullopt); next; }
/^-fno-openmp-is-device$/ { fullopt=$0; canonopt=deesc("-fno-openmp-is-device"); inc=1; do_output(fullopt); next; }
/^-fno-openmp-enable-irbuilder$/ { fullopt=$0; canonopt=deesc("-fno-openmp-enable-irbuilder"); inc=1; do_output(fullopt); next; }
/^-fno-openmp$/ { fullopt=$0; canonopt=deesc("-fno-openmp"); inc=1; do_output(fullopt); next; }
/^-fno-offload-lto$/ { fullopt=$0; canonopt=deesc("-fno-offload-lto"); inc=1; do_output(fullopt); next; }
/^-fno-objc-weak$/ { fullopt=$0; canonopt=deesc("-fno-objc-weak"); inc=1; do_output(fullopt); next; }
/^-fno-objc-subscripting-legacy-runtime$/ { fullopt=$0; canonopt=deesc("-fno-objc-subscripting-legacy-runtime"); inc=1; do_output(fullopt); next; }
/^-fno-objc-runtime-has-weak$/ { fullopt=$0; canonopt=deesc("-fno-objc-runtime-has-weak"); inc=1; do_output(fullopt); next; }
/^-fno-objc-infer-related-result-type$/ { fullopt=$0; canonopt=deesc("-fno-objc-infer-related-result-type"); inc=1; do_output(fullopt); next; }
/^-fno-objc-gc-only$/ { fullopt=$0; canonopt=deesc("-fno-objc-gc-only"); inc=1; do_output(fullopt); next; }
/^-fno-objc-gc$/ { fullopt=$0; canonopt=deesc("-fno-objc-gc"); inc=1; do_output(fullopt); next; }
/^-fno-objc-exceptions$/ { fullopt=$0; canonopt=deesc("-fno-objc-exceptions"); inc=1; do_output(fullopt); next; }
/^-fno-objc-encode-cxx-class-template-spec$/ { fullopt=$0; canonopt=deesc("-fno-objc-encode-cxx-class-template-spec"); inc=1; do_output(fullopt); next; }
/^-fno-objc-disable-direct-methods-for-testing$/ { fullopt=$0; canonopt=deesc("-fno-objc-disable-direct-methods-for-testing"); inc=1; do_output(fullopt); next; }
/^-fno-objc-convert-messages-to-runtime-calls$/ { fullopt=$0; canonopt=deesc("-fno-objc-convert-messages-to-runtime-calls"); inc=1; do_output(fullopt); next; }
/^-fno-objc-arc-exceptions$/ { fullopt=$0; canonopt=deesc("-fno-objc-arc-exceptions"); inc=1; do_output(fullopt); next; }
/^-fno-objc-arc$/ { fullopt=$0; canonopt=deesc("-fno-objc-arc"); inc=1; do_output(fullopt); next; }
/^-fno-native-half-type$/ { fullopt=$0; canonopt=deesc("-fno-native-half-type"); inc=1; do_output(fullopt); next; }
/^-fno-native-half-arguments-and-returns$/ { fullopt=$0; canonopt=deesc("-fno-native-half-arguments-and-returns"); inc=1; do_output(fullopt); next; }
/^-fno-ms-extensions$/ { fullopt=$0; canonopt=deesc("-fno-ms-extensions"); inc=1; do_output(fullopt); next; }
/^-fno-ms-compatibility$/ { fullopt=$0; canonopt=deesc("-fno-ms-compatibility"); inc=1; do_output(fullopt); next; }
/^-fno-modules-validate-system-headers$/ { fullopt=$0; canonopt=deesc("-fno-modules-validate-system-headers"); inc=1; do_output(fullopt); next; }
/^-fno-modules-validate-once-per-build-session$/ { fullopt=$0; canonopt=deesc("-fno-modules-validate-once-per-build-session"); inc=1; do_output(fullopt); next; }
/^-fno-modules-validate-input-files-content$/ { fullopt=$0; canonopt=deesc("-fno-modules-validate-input-files-content"); inc=1; do_output(fullopt); next; }
/^-fno-modules-ts$/ { fullopt=$0; canonopt=deesc("-fno-modules-ts"); inc=1; do_output(fullopt); next; }
/^-fno-modules-strict-decluse$/ { fullopt=$0; canonopt=deesc("-fno-modules-strict-decluse"); inc=1; do_output(fullopt); next; }
/^-fno-modules-strict-context-hash$/ { fullopt=$0; canonopt=deesc("-fno-modules-strict-context-hash"); inc=1; do_output(fullopt); next; }
/^-fno-modules-search-all$/ { fullopt=$0; canonopt=deesc("-fno-modules-search-all"); inc=1; do_output(fullopt); next; }
/^-fno-modules-local-submodule-visibility$/ { fullopt=$0; canonopt=deesc("-fno-modules-local-submodule-visibility"); inc=1; do_output(fullopt); next; }
/^-fno-modules-hash-content$/ { fullopt=$0; canonopt=deesc("-fno-modules-hash-content"); inc=1; do_output(fullopt); next; }
/^-fno-modules-global-index$/ { fullopt=$0; canonopt=deesc("-fno-modules-global-index"); inc=1; do_output(fullopt); next; }
/^-fno-modules-error-recovery$/ { fullopt=$0; canonopt=deesc("-fno-modules-error-recovery"); inc=1; do_output(fullopt); next; }
/^-fno-modules-disable-diagnostic-validation$/ { fullopt=$0; canonopt=deesc("-fno-modules-disable-diagnostic-validation"); inc=1; do_output(fullopt); next; }
/^-fno-modules-decluse$/ { fullopt=$0; canonopt=deesc("-fno-modules-decluse"); inc=1; do_output(fullopt); next; }
/^-fno-modules-debuginfo$/ { fullopt=$0; canonopt=deesc("-fno-modules-debuginfo"); inc=1; do_output(fullopt); next; }
/^-fno-modules-codegen$/ { fullopt=$0; canonopt=deesc("-fno-modules-codegen"); inc=1; do_output(fullopt); next; }
/^-fno-modules$/ { fullopt=$0; canonopt=deesc("-fno-modules"); inc=1; do_output(fullopt); next; }
/^-fno-module-map-file-home-is-cwd$/ { fullopt=$0; canonopt=deesc("-fno-module-map-file-home-is-cwd"); inc=1; do_output(fullopt); next; }
/^-fno-merge-functions$/ { fullopt=$0; canonopt=deesc("-fno-merge-functions"); inc=1; do_output(fullopt); next; }
/^-fno-merge-all-constants$/ { fullopt=$0; canonopt=deesc("-fno-merge-all-constants"); inc=1; do_output(fullopt); next; }
/^-fno-memory-profile$/ { fullopt=$0; canonopt=deesc("-fno-memory-profile"); inc=1; do_output(fullopt); next; }
/^-fno-math-errno$/ { fullopt=$0; canonopt=deesc("-fno-math-errno"); inc=1; do_output(fullopt); next; }
/^-fno-math-builtin$/ { fullopt=$0; canonopt=deesc("-fno-math-builtin"); inc=1; do_output(fullopt); next; }
/^-fno-lto-visibility-public-std$/ { fullopt=$0; canonopt=deesc("-fno-lto-visibility-public-std"); inc=1; do_output(fullopt); next; }
/^-fno-lto-unit$/ { fullopt=$0; canonopt=deesc("-fno-lto-unit"); inc=1; do_output(fullopt); next; }
/^-fno-lto$/ { fullopt=$0; canonopt=deesc("-fno-lto"); inc=1; do_output(fullopt); next; }
/^-fno-legacy-pass-manager$/ { fullopt=$0; canonopt=deesc("-fno-legacy-pass-manager"); inc=1; do_output(fullopt); next; }
/^-fno-keep-static-consts$/ { fullopt=$0; canonopt=deesc("-fno-keep-static-consts"); inc=1; do_output(fullopt); next; }
/^-fno-jump-tables$/ { fullopt=$0; canonopt=deesc("-fno-jump-tables"); inc=1; do_output(fullopt); next; }
/^-fno-ixit-to-temporary$/ { fullopt=$0; canonopt=deesc("-fno-ixit-to-temporary"); inc=1; do_output(fullopt); next; }
/^-fno-ixit-recompile$/ { fullopt=$0; canonopt=deesc("-fno-ixit-recompile"); inc=1; do_output(fullopt); next; }
/^-fno-ixit$/ { fullopt=$0; canonopt=deesc("-fno-ixit"); inc=1; do_output(fullopt); next; }
/^-fno-ix-what-you-can$/ { fullopt=$0; canonopt=deesc("-fno-ix-what-you-can"); inc=1; do_output(fullopt); next; }
/^-fno-ix-only-warnings$/ { fullopt=$0; canonopt=deesc("-fno-ix-only-warnings"); inc=1; do_output(fullopt); next; }
/^-fno-integrated-cc1$/ { fullopt=$0; canonopt=deesc("-fno-integrated-cc1"); inc=1; do_output(fullopt); next; }
/^-fno-integrated-as$/ { fullopt=$0; canonopt=deesc("-fno-integrated-as"); inc=1; do_output(fullopt); next; }
/^-fno-instrument-functions-after-inlining$/ { fullopt=$0; canonopt=deesc("-fno-instrument-functions-after-inlining"); inc=1; do_output(fullopt); next; }
/^-fno-instrument-functions$/ { fullopt=$0; canonopt=deesc("-fno-instrument-functions"); inc=1; do_output(fullopt); next; }
/^-fno-instrument-function-entry-bare$/ { fullopt=$0; canonopt=deesc("-fno-instrument-function-entry-bare"); inc=1; do_output(fullopt); next; }
/^-fno-inline-hint-functions$/ { fullopt=$0; canonopt=deesc("-fno-inline-hint-functions"); inc=1; do_output(fullopt); next; }
/^-fno-inline-functions$/ { fullopt=$0; canonopt=deesc("-fno-inline-functions"); inc=1; do_output(fullopt); next; }
/^-fno-include-default-header$/ { fullopt=$0; canonopt=deesc("-fno-include-default-header"); inc=1; do_output(fullopt); next; }
/^-fno-implicit-modules$/ { fullopt=$0; canonopt=deesc("-fno-implicit-modules"); inc=1; do_output(fullopt); next; }
/^-fno-implicit-module-maps$/ { fullopt=$0; canonopt=deesc("-fno-implicit-module-maps"); inc=1; do_output(fullopt); next; }
/^-fno-ignore-exceptions$/ { fullopt=$0; canonopt=deesc("-fno-ignore-exceptions"); inc=1; do_output(fullopt); next; }
/^-fno-hip-new-launch-api$/ { fullopt=$0; canonopt=deesc("-fno-hip-new-launch-api"); inc=1; do_output(fullopt); next; }
/^-fno-hip-fp32-correctly-rounded-divide-sqrt$/ { fullopt=$0; canonopt=deesc("-fno-hip-fp32-correctly-rounded-divide-sqrt"); inc=1; do_output(fullopt); next; }
/^-fno-half-no-semantic-interposition$/ { fullopt=$0; canonopt=deesc("-fno-half-no-semantic-interposition"); inc=1; do_output(fullopt); next; }
/^-fno-gpu-sanitize$/ { fullopt=$0; canonopt=deesc("-fno-gpu-sanitize"); inc=1; do_output(fullopt); next; }
/^-fno-gpu-rdc$/ { fullopt=$0; canonopt=deesc("-fno-gpu-rdc"); inc=1; do_output(fullopt); next; }
/^-fno-gpu-flush-denormals-to-zero$/ { fullopt=$0; canonopt=deesc("-fno-gpu-flush-denormals-to-zero"); inc=1; do_output(fullopt); next; }
/^-fno-gpu-exclude-wrong-side-overloads$/ { fullopt=$0; canonopt=deesc("-fno-gpu-exclude-wrong-side-overloads"); inc=1; do_output(fullopt); next; }
/^-fno-gpu-defer-diag$/ { fullopt=$0; canonopt=deesc("-fno-gpu-defer-diag"); inc=1; do_output(fullopt); next; }
/^-fno-gpu-allow-device-init$/ { fullopt=$0; canonopt=deesc("-fno-gpu-allow-device-init"); inc=1; do_output(fullopt); next; }
/^-fno-gnu89-inline$/ { fullopt=$0; canonopt=deesc("-fno-gnu89-inline"); inc=1; do_output(fullopt); next; }
/^-fno-gnu-runtime$/ { fullopt=$0; canonopt=deesc("-fno-gnu-runtime"); inc=1; do_output(fullopt); next; }
/^-fno-gnu-keywords$/ { fullopt=$0; canonopt=deesc("-fno-gnu-keywords"); inc=1; do_output(fullopt); next; }
/^-fno-gnu-inline-asm$/ { fullopt=$0; canonopt=deesc("-fno-gnu-inline-asm"); inc=1; do_output(fullopt); next; }
/^-fno-global-isel$/ { fullopt=$0; canonopt=deesc("-fno-global-isel"); inc=1; do_output(fullopt); next; }
/^-fno-function-sections$/ { fullopt=$0; canonopt=deesc("-fno-function-sections"); inc=1; do_output(fullopt); next; }
/^-fno-freestanding$/ { fullopt=$0; canonopt=deesc("-fno-freestanding"); inc=1; do_output(fullopt); next; }
/^-fno-force-enable-int128$/ { fullopt=$0; canonopt=deesc("-fno-force-enable-int128"); inc=1; do_output(fullopt); next; }
/^-fno-force-emit-vtables$/ { fullopt=$0; canonopt=deesc("-fno-force-emit-vtables"); inc=1; do_output(fullopt); next; }
/^-fno-force-dwarf-frame$/ { fullopt=$0; canonopt=deesc("-fno-force-dwarf-frame"); inc=1; do_output(fullopt); next; }
/^-fno-forbid-guard-variables$/ { fullopt=$0; canonopt=deesc("-fno-forbid-guard-variables"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x9$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x9"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x8$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x8"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x7$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x7"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x6$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x6"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x5$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x5"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x4$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x4"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x31$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x31"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x30$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x30"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x3$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x3"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x29$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x29"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x28$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x28"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x27$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x27"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x26$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x26"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x25$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x25"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x24$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x24"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x23$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x23"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x22$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x22"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x21$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x21"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x20$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x20"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x2$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x2"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x19$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x19"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x18$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x18"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x17$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x17"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x16$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x16"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x15$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x15"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x14$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x14"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x13$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x13"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x12$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x12"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x11$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x11"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x10$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x10"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-x1$/ { fullopt=$0; canonopt=deesc("-fno-fixed-x1"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-r9$/ { fullopt=$0; canonopt=deesc("-fno-fixed-r9"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-r19$/ { fullopt=$0; canonopt=deesc("-fno-fixed-r19"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-point$/ { fullopt=$0; canonopt=deesc("-fno-fixed-point"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-d7$/ { fullopt=$0; canonopt=deesc("-fno-fixed-d7"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-d6$/ { fullopt=$0; canonopt=deesc("-fno-fixed-d6"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-d5$/ { fullopt=$0; canonopt=deesc("-fno-fixed-d5"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-d4$/ { fullopt=$0; canonopt=deesc("-fno-fixed-d4"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-d3$/ { fullopt=$0; canonopt=deesc("-fno-fixed-d3"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-d2$/ { fullopt=$0; canonopt=deesc("-fno-fixed-d2"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-d1$/ { fullopt=$0; canonopt=deesc("-fno-fixed-d1"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-d0$/ { fullopt=$0; canonopt=deesc("-fno-fixed-d0"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-a6$/ { fullopt=$0; canonopt=deesc("-fno-fixed-a6"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-a5$/ { fullopt=$0; canonopt=deesc("-fno-fixed-a5"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-a4$/ { fullopt=$0; canonopt=deesc("-fno-fixed-a4"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-a3$/ { fullopt=$0; canonopt=deesc("-fno-fixed-a3"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-a2$/ { fullopt=$0; canonopt=deesc("-fno-fixed-a2"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-a1$/ { fullopt=$0; canonopt=deesc("-fno-fixed-a1"); inc=1; do_output(fullopt); next; }
/^-fno-fixed-a0$/ { fullopt=$0; canonopt=deesc("-fno-fixed-a0"); inc=1; do_output(fullopt); next; }
/^-fno-finite-math-only$/ { fullopt=$0; canonopt=deesc("-fno-finite-math-only"); inc=1; do_output(fullopt); next; }
/^-fno-finite-loops$/ { fullopt=$0; canonopt=deesc("-fno-finite-loops"); inc=1; do_output(fullopt); next; }
/^-fno-fine-grained-bitfield-accesses$/ { fullopt=$0; canonopt=deesc("-fno-fine-grained-bitfield-accesses"); inc=1; do_output(fullopt); next; }
/^-fno-fast-math$/ { fullopt=$0; canonopt=deesc("-fno-fast-math"); inc=1; do_output(fullopt); next; }
/^-fno-fake-address-space-map$/ { fullopt=$0; canonopt=deesc("-fno-fake-address-space-map"); inc=1; do_output(fullopt); next; }
/^-fno-externc-nounwind$/ { fullopt=$0; canonopt=deesc("-fno-externc-nounwind"); inc=1; do_output(fullopt); next; }
/^-fno-experimental-strict-floating-point$/ { fullopt=$0; canonopt=deesc("-fno-experimental-strict-floating-point"); inc=1; do_output(fullopt); next; }
/^-fno-experimental-relative-c\+\+-abi-vtables$/ { fullopt=$0; canonopt=deesc("-fno-experimental-relative-c\+\+-abi-vtables"); inc=1; do_output(fullopt); next; }
/^-fno-experimental-new-constant-interpreter$/ { fullopt=$0; canonopt=deesc("-fno-experimental-new-constant-interpreter"); inc=1; do_output(fullopt); next; }
/^-fno-experimental-debug-variable-locations$/ { fullopt=$0; canonopt=deesc("-fno-experimental-debug-variable-locations"); inc=1; do_output(fullopt); next; }
/^-fno-exceptions$/ { fullopt=$0; canonopt=deesc("-fno-exceptions"); inc=1; do_output(fullopt); next; }
/^-fno-escaping-block-tail-calls$/ { fullopt=$0; canonopt=deesc("-fno-escaping-block-tail-calls"); inc=1; do_output(fullopt); next; }
/^-fno-encode-extended-block-signature$/ { fullopt=$0; canonopt=deesc("-fno-encode-extended-block-signature"); inc=1; do_output(fullopt); next; }
/^-fno-enable-matrix$/ { fullopt=$0; canonopt=deesc("-fno-enable-matrix"); inc=1; do_output(fullopt); next; }
/^-fno-emulated-tls$/ { fullopt=$0; canonopt=deesc("-fno-emulated-tls"); inc=1; do_output(fullopt); next; }
/^-fno-emit-all-decls$/ { fullopt=$0; canonopt=deesc("-fno-emit-all-decls"); inc=1; do_output(fullopt); next; }
/^-fno-embed-bitcode-marker$/ { fullopt=$0; canonopt=deesc("-fno-embed-bitcode-marker"); inc=1; do_output(fullopt); next; }
/^-fno-embed-bitcode$/ { fullopt=$0; canonopt=deesc("-fno-embed-bitcode"); inc=1; do_output(fullopt); next; }
/^-fno-eliminate-unused-debug-types$/ { fullopt=$0; canonopt=deesc("-fno-eliminate-unused-debug-types"); inc=1; do_output(fullopt); next; }
/^-fno-elide-type$/ { fullopt=$0; canonopt=deesc("-fno-elide-type"); inc=1; do_output(fullopt); next; }
/^-fno-elide-constructors$/ { fullopt=$0; canonopt=deesc("-fno-elide-constructors"); inc=1; do_output(fullopt); next; }
/^-fno-dwarf-exceptions$/ { fullopt=$0; canonopt=deesc("-fno-dwarf-exceptions"); inc=1; do_output(fullopt); next; }
/^-fno-dwarf-directory-asm$/ { fullopt=$0; canonopt=deesc("-fno-dwarf-directory-asm"); inc=1; do_output(fullopt); next; }
/^-fno-dump-vtable-layouts$/ { fullopt=$0; canonopt=deesc("-fno-dump-vtable-layouts"); inc=1; do_output(fullopt); next; }
/^-fno-dump-record-layouts-simple$/ { fullopt=$0; canonopt=deesc("-fno-dump-record-layouts-simple"); inc=1; do_output(fullopt); next; }
/^-fno-dump-record-layouts-complete$/ { fullopt=$0; canonopt=deesc("-fno-dump-record-layouts-complete"); inc=1; do_output(fullopt); next; }
/^-fno-dump-record-layouts-canonical$/ { fullopt=$0; canonopt=deesc("-fno-dump-record-layouts-canonical"); inc=1; do_output(fullopt); next; }
/^-fno-dump-record-layouts$/ { fullopt=$0; canonopt=deesc("-fno-dump-record-layouts"); inc=1; do_output(fullopt); next; }
/^-fno-double-square-bracket-attributes$/ { fullopt=$0; canonopt=deesc("-fno-double-square-bracket-attributes"); inc=1; do_output(fullopt); next; }
/^-fno-dollars-in-identifiers$/ { fullopt=$0; canonopt=deesc("-fno-dollars-in-identifiers"); inc=1; do_output(fullopt); next; }
/^-fno-discard-value-names$/ { fullopt=$0; canonopt=deesc("-fno-discard-value-names"); inc=1; do_output(fullopt); next; }
/^-fno-disable-module-hash$/ { fullopt=$0; canonopt=deesc("-fno-disable-module-hash"); inc=1; do_output(fullopt); next; }
/^-fno-direct-access-external-data$/ { fullopt=$0; canonopt=deesc("-fno-direct-access-external-data"); inc=1; do_output(fullopt); next; }
/^-fno-digraphs$/ { fullopt=$0; canonopt=deesc("-fno-digraphs"); inc=1; do_output(fullopt); next; }
/^-fno-diagnostics-use-presumed-location$/ { fullopt=$0; canonopt=deesc("-fno-diagnostics-use-presumed-location"); inc=1; do_output(fullopt); next; }
/^-fno-diagnostics-show-template-tree$/ { fullopt=$0; canonopt=deesc("-fno-diagnostics-show-template-tree"); inc=1; do_output(fullopt); next; }
/^-fno-diagnostics-show-option$/ { fullopt=$0; canonopt=deesc("-fno-diagnostics-show-option"); inc=1; do_output(fullopt); next; }
/^-fno-diagnostics-show-note-include-stack$/ { fullopt=$0; canonopt=deesc("-fno-diagnostics-show-note-include-stack"); inc=1; do_output(fullopt); next; }
/^-fno-diagnostics-show-hotness$/ { fullopt=$0; canonopt=deesc("-fno-diagnostics-show-hotness"); inc=1; do_output(fullopt); next; }
/^-fno-diagnostics-print-source-range-info$/ { fullopt=$0; canonopt=deesc("-fno-diagnostics-print-source-range-info"); inc=1; do_output(fullopt); next; }
/^-fno-diagnostics-parseable-fixits$/ { fullopt=$0; canonopt=deesc("-fno-diagnostics-parseable-fixits"); inc=1; do_output(fullopt); next; }
/^-fno-diagnostics-fixit-info$/ { fullopt=$0; canonopt=deesc("-fno-diagnostics-fixit-info"); inc=1; do_output(fullopt); next; }
/^-fno-diagnostics-absolute-paths$/ { fullopt=$0; canonopt=deesc("-fno-diagnostics-absolute-paths"); inc=1; do_output(fullopt); next; }
/^-fno-deprecated-macro$/ { fullopt=$0; canonopt=deesc("-fno-deprecated-macro"); inc=1; do_output(fullopt); next; }
/^-fno-delete-null-pointer-checks$/ { fullopt=$0; canonopt=deesc("-fno-delete-null-pointer-checks"); inc=1; do_output(fullopt); next; }
/^-fno-delayed-template-parsing$/ { fullopt=$0; canonopt=deesc("-fno-delayed-template-parsing"); inc=1; do_output(fullopt); next; }
/^-fno-declspec$/ { fullopt=$0; canonopt=deesc("-fno-declspec"); inc=1; do_output(fullopt); next; }
/^-fno-declare-opencl-builtins$/ { fullopt=$0; canonopt=deesc("-fno-declare-opencl-builtins"); inc=1; do_output(fullopt); next; }
/^-fno-debugger-support$/ { fullopt=$0; canonopt=deesc("-fno-debugger-support"); inc=1; do_output(fullopt); next; }
/^-fno-debugger-objc-literal$/ { fullopt=$0; canonopt=deesc("-fno-debugger-objc-literal"); inc=1; do_output(fullopt); next; }
/^-fno-debugger-cast-result-to-id$/ { fullopt=$0; canonopt=deesc("-fno-debugger-cast-result-to-id"); inc=1; do_output(fullopt); next; }
/^-fno-debug-types-section$/ { fullopt=$0; canonopt=deesc("-fno-debug-types-section"); inc=1; do_output(fullopt); next; }
/^-fno-debug-ranges-base-address$/ { fullopt=$0; canonopt=deesc("-fno-debug-ranges-base-address"); inc=1; do_output(fullopt); next; }
/^-fno-debug-pass-manager$/ { fullopt=$0; canonopt=deesc("-fno-debug-pass-manager"); inc=1; do_output(fullopt); next; }
/^-fno-debug-macro$/ { fullopt=$0; canonopt=deesc("-fno-debug-macro"); inc=1; do_output(fullopt); next; }
/^-fno-debug-info-for-profiling$/ { fullopt=$0; canonopt=deesc("-fno-debug-info-for-profiling"); inc=1; do_output(fullopt); next; }
/^-fno-data-sections$/ { fullopt=$0; canonopt=deesc("-fno-data-sections"); inc=1; do_output(fullopt); next; }
/^-fno-cxx-exceptions$/ { fullopt=$0; canonopt=deesc("-fno-cxx-exceptions"); inc=1; do_output(fullopt); next; }
/^-fno-cuda-short-ptr$/ { fullopt=$0; canonopt=deesc("-fno-cuda-short-ptr"); inc=1; do_output(fullopt); next; }
/^-fno-cuda-is-device$/ { fullopt=$0; canonopt=deesc("-fno-cuda-is-device"); inc=1; do_output(fullopt); next; }
/^-fno-cuda-host-device-constexpr$/ { fullopt=$0; canonopt=deesc("-fno-cuda-host-device-constexpr"); inc=1; do_output(fullopt); next; }
/^-fno-cuda-approx-transcendentals$/ { fullopt=$0; canonopt=deesc("-fno-cuda-approx-transcendentals"); inc=1; do_output(fullopt); next; }
/^-fno-cuda-allow-variadic-functions$/ { fullopt=$0; canonopt=deesc("-fno-cuda-allow-variadic-functions"); inc=1; do_output(fullopt); next; }
/^-fno-cs-profile-generate$/ { fullopt=$0; canonopt=deesc("-fno-cs-profile-generate"); inc=1; do_output(fullopt); next; }
/^-fno-crash-diagnostics$/ { fullopt=$0; canonopt=deesc("-fno-crash-diagnostics"); inc=1; do_output(fullopt); next; }
/^-fno-coverage-mapping$/ { fullopt=$0; canonopt=deesc("-fno-coverage-mapping"); inc=1; do_output(fullopt); next; }
/^-fno-coroutines-ts$/ { fullopt=$0; canonopt=deesc("-fno-coroutines-ts"); inc=1; do_output(fullopt); next; }
/^-fno-convergent-functions$/ { fullopt=$0; canonopt=deesc("-fno-convergent-functions"); inc=1; do_output(fullopt); next; }
/^-fno-constant-cfstrings$/ { fullopt=$0; canonopt=deesc("-fno-constant-cfstrings"); inc=1; do_output(fullopt); next; }
/^-fno-const-strings$/ { fullopt=$0; canonopt=deesc("-fno-const-strings"); inc=1; do_output(fullopt); next; }
/^-fno-concepts-ts$/ { fullopt=$0; canonopt=deesc("-fno-concepts-ts"); inc=1; do_output(fullopt); next; }
/^-fno-concept-satisfaction-caching$/ { fullopt=$0; canonopt=deesc("-fno-concept-satisfaction-caching"); inc=1; do_output(fullopt); next; }
/^-fno-complete-member-pointers$/ { fullopt=$0; canonopt=deesc("-fno-complete-member-pointers"); inc=1; do_output(fullopt); next; }
/^-fno-compatibility-qualified-id-block-type-checking$/ { fullopt=$0; canonopt=deesc("-fno-compatibility-qualified-id-block-type-checking"); inc=1; do_output(fullopt); next; }
/^-fno-common$/ { fullopt=$0; canonopt=deesc("-fno-common"); inc=1; do_output(fullopt); next; }
/^-fno-color-diagnostics$/ { fullopt=$0; canonopt=deesc("-fno-color-diagnostics"); inc=1; do_output(fullopt); next; }
/^-fno-char8_t$/ { fullopt=$0; canonopt=deesc("-fno-char8_t"); inc=1; do_output(fullopt); next; }
/^-fno-cf-protection$/ { fullopt=$0; canonopt=deesc("-fno-cf-protection"); inc=1; do_output(fullopt); next; }
/^-fno-caret-diagnostics$/ { fullopt=$0; canonopt=deesc("-fno-caret-diagnostics"); inc=1; do_output(fullopt); next; }
/^-fno-call-saved-x9$/ { fullopt=$0; canonopt=deesc("-fno-call-saved-x9"); inc=1; do_output(fullopt); next; }
/^-fno-call-saved-x8$/ { fullopt=$0; canonopt=deesc("-fno-call-saved-x8"); inc=1; do_output(fullopt); next; }
/^-fno-call-saved-x18$/ { fullopt=$0; canonopt=deesc("-fno-call-saved-x18"); inc=1; do_output(fullopt); next; }
/^-fno-call-saved-x15$/ { fullopt=$0; canonopt=deesc("-fno-call-saved-x15"); inc=1; do_output(fullopt); next; }
/^-fno-call-saved-x14$/ { fullopt=$0; canonopt=deesc("-fno-call-saved-x14"); inc=1; do_output(fullopt); next; }
/^-fno-call-saved-x13$/ { fullopt=$0; canonopt=deesc("-fno-call-saved-x13"); inc=1; do_output(fullopt); next; }
/^-fno-call-saved-x12$/ { fullopt=$0; canonopt=deesc("-fno-call-saved-x12"); inc=1; do_output(fullopt); next; }
/^-fno-call-saved-x11$/ { fullopt=$0; canonopt=deesc("-fno-call-saved-x11"); inc=1; do_output(fullopt); next; }
/^-fno-call-saved-x10$/ { fullopt=$0; canonopt=deesc("-fno-call-saved-x10"); inc=1; do_output(fullopt); next; }
/^-fno-c\+\+-static-destructors$/ { fullopt=$0; canonopt=deesc("-fno-c\+\+-static-destructors"); inc=1; do_output(fullopt); next; }
/^-fno-builtin-module-map$/ { fullopt=$0; canonopt=deesc("-fno-builtin-module-map"); inc=1; do_output(fullopt); next; }
/^(-fno-builtin-)(.*)$/ { fullopt=$0; canonopt=deesc("-fno-builtin-"); optarg=gensub(/(-fno-builtin-)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fno-builtin$/ { fullopt=$0; canonopt=deesc("-fno-builtin"); inc=1; do_output(fullopt); next; }
/^-fno-borland-extensions$/ { fullopt=$0; canonopt=deesc("-fno-borland-extensions"); inc=1; do_output(fullopt); next; }
/^-fno-blocks-runtime-optional$/ { fullopt=$0; canonopt=deesc("-fno-blocks-runtime-optional"); inc=1; do_output(fullopt); next; }
/^-fno-blocks$/ { fullopt=$0; canonopt=deesc("-fno-blocks"); inc=1; do_output(fullopt); next; }
/^-fno-bitfield-type-align$/ { fullopt=$0; canonopt=deesc("-fno-bitfield-type-align"); inc=1; do_output(fullopt); next; }
/^-fno-autolink$/ { fullopt=$0; canonopt=deesc("-fno-autolink"); inc=1; do_output(fullopt); next; }
/^-fno-async-exceptions$/ { fullopt=$0; canonopt=deesc("-fno-async-exceptions"); inc=1; do_output(fullopt); next; }
/^-fno-assume-sane-operator-new$/ { fullopt=$0; canonopt=deesc("-fno-assume-sane-operator-new"); inc=1; do_output(fullopt); next; }
/^-fno-asm-blocks$/ { fullopt=$0; canonopt=deesc("-fno-asm-blocks"); inc=1; do_output(fullopt); next; }
/^-fno-apply-global-visibility-to-externs$/ { fullopt=$0; canonopt=deesc("-fno-apply-global-visibility-to-externs"); inc=1; do_output(fullopt); next; }
/^-fno-application-extension$/ { fullopt=$0; canonopt=deesc("-fno-application-extension"); inc=1; do_output(fullopt); next; }
/^-fno-apple-pragma-pack$/ { fullopt=$0; canonopt=deesc("-fno-apple-pragma-pack"); inc=1; do_output(fullopt); next; }
/^-fno-apple-link-rtlib$/ { fullopt=$0; canonopt=deesc("-fno-apple-link-rtlib"); inc=1; do_output(fullopt); next; }
/^-fno-apple-kext$/ { fullopt=$0; canonopt=deesc("-fno-apple-kext"); inc=1; do_output(fullopt); next; }
/^-fno-ansi-escape-codes$/ { fullopt=$0; canonopt=deesc("-fno-ansi-escape-codes"); inc=1; do_output(fullopt); next; }
/^-fno-allow-pcm-with-compiler-errors$/ { fullopt=$0; canonopt=deesc("-fno-allow-pcm-with-compiler-errors"); inc=1; do_output(fullopt); next; }
/^-fno-allow-pch-with-different-modules-cache-path$/ { fullopt=$0; canonopt=deesc("-fno-allow-pch-with-different-modules-cache-path"); inc=1; do_output(fullopt); next; }
/^-fno-allow-pch-with-compiler-errors$/ { fullopt=$0; canonopt=deesc("-fno-allow-pch-with-compiler-errors"); inc=1; do_output(fullopt); next; }
/^-fno-allow-half-arguments-and-returns$/ { fullopt=$0; canonopt=deesc("-fno-allow-half-arguments-and-returns"); inc=1; do_output(fullopt); next; }
/^-fno-allow-editor-placeholders$/ { fullopt=$0; canonopt=deesc("-fno-allow-editor-placeholders"); inc=1; do_output(fullopt); next; }
/^-fno-aligned-allocation$/ { fullopt=$0; canonopt=deesc("-fno-aligned-allocation"); inc=1; do_output(fullopt); next; }
/^-fno-aligned-alloc-unavailable$/ { fullopt=$0; canonopt=deesc("-fno-aligned-alloc-unavailable"); inc=1; do_output(fullopt); next; }
/^-fno-addrsig$/ { fullopt=$0; canonopt=deesc("-fno-addrsig"); inc=1; do_output(fullopt); next; }
/^-fno-access-control$/ { fullopt=$0; canonopt=deesc("-fno-access-control"); inc=1; do_output(fullopt); next; }
/^-fno-aapcs-bitfield-width$/ { fullopt=$0; canonopt=deesc("-fno-aapcs-bitfield-width"); inc=1; do_output(fullopt); next; }
/^-fno-aapcs-bitfield-load$/ { fullopt=$0; canonopt=deesc("-fno-aapcs-bitfield-load"); inc=1; do_output(fullopt); next; }
/^(-fnew-alignment=)(.*)$/ { fullopt=$0; canonopt=deesc("-fnew-alignment"); optarg=gensub(/(-fnew-alignment=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fnative-half-type$/ { fullopt=$0; canonopt=deesc("-fnative-half-type"); inc=1; do_output(fullopt); next; }
/^-fnative-half-arguments-and-returns$/ { fullopt=$0; canonopt=deesc("-fnative-half-arguments-and-returns"); inc=1; do_output(fullopt); next; }
/^(-fmsc-version=)(.*)$/ { fullopt=$0; canonopt=deesc("-fmsc-version"); optarg=gensub(/(-fmsc-version=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fms-extensions$/ { fullopt=$0; canonopt=deesc("-fms-extensions"); inc=1; do_output(fullopt); next; }
/^(-fms-compatibility-version=)(.*)$/ { fullopt=$0; canonopt=deesc("-fms-compatibility-version"); optarg=gensub(/(-fms-compatibility-version=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fms-compatibility$/ { fullopt=$0; canonopt=deesc("-fms-compatibility"); inc=1; do_output(fullopt); next; }
/^-fmodules-validate-system-headers$/ { fullopt=$0; canonopt=deesc("-fmodules-validate-system-headers"); inc=1; do_output(fullopt); next; }
/^-fmodules-validate-once-per-build-session$/ { fullopt=$0; canonopt=deesc("-fmodules-validate-once-per-build-session"); inc=1; do_output(fullopt); next; }
/^-fmodules-validate-input-files-content$/ { fullopt=$0; canonopt=deesc("-fmodules-validate-input-files-content"); inc=1; do_output(fullopt); next; }
/^(-fmodules-user-build-path)$/     { fullopt=$0; canonopt=deesc("-fmodules-user-build-path"); snarfing_optarg=1; inc=2; next; }
/^-fmodules-ts$/ { fullopt=$0; canonopt=deesc("-fmodules-ts"); inc=1; do_output(fullopt); next; }
/^-fmodules-strict-decluse$/ { fullopt=$0; canonopt=deesc("-fmodules-strict-decluse"); inc=1; do_output(fullopt); next; }
/^-fmodules-strict-context-hash$/ { fullopt=$0; canonopt=deesc("-fmodules-strict-context-hash"); inc=1; do_output(fullopt); next; }
/^-fmodules-search-all$/ { fullopt=$0; canonopt=deesc("-fmodules-search-all"); inc=1; do_output(fullopt); next; }
/^(-fmodules-prune-interval=)(.*)$/ { fullopt=$0; canonopt=deesc("-fmodules-prune-interval"); optarg=gensub(/(-fmodules-prune-interval=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fmodules-prune-after=)(.*)$/ { fullopt=$0; canonopt=deesc("-fmodules-prune-after"); optarg=gensub(/(-fmodules-prune-after=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fmodules-local-submodule-visibility$/ { fullopt=$0; canonopt=deesc("-fmodules-local-submodule-visibility"); inc=1; do_output(fullopt); next; }
/^(-fmodules-ignore-macro=)(.*)$/ { fullopt=$0; canonopt=deesc("-fmodules-ignore-macro"); optarg=gensub(/(-fmodules-ignore-macro=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fmodules-hash-content$/ { fullopt=$0; canonopt=deesc("-fmodules-hash-content"); inc=1; do_output(fullopt); next; }
/^(-fmodules-embed-file=)(.*)$/ { fullopt=$0; canonopt=deesc("-fmodules-embed-file"); optarg=gensub(/(-fmodules-embed-file=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fmodules-embed-all-files)(.*)$/ { fullopt=$0; canonopt=deesc("-fmodules-embed-all-files"); optarg=gensub(/(-fmodules-embed-all-files)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fmodules-disable-diagnostic-validation$/ { fullopt=$0; canonopt=deesc("-fmodules-disable-diagnostic-validation"); inc=1; do_output(fullopt); next; }
/^-fmodules-decluse$/ { fullopt=$0; canonopt=deesc("-fmodules-decluse"); inc=1; do_output(fullopt); next; }
/^-fmodules-debuginfo$/ { fullopt=$0; canonopt=deesc("-fmodules-debuginfo"); inc=1; do_output(fullopt); next; }
/^-fmodules-codegen$/ { fullopt=$0; canonopt=deesc("-fmodules-codegen"); inc=1; do_output(fullopt); next; }
/^(-fmodules-cache-path=)(.*)$/ { fullopt=$0; canonopt=deesc("-fmodules-cache-path"); optarg=gensub(/(-fmodules-cache-path=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fmodules$/ { fullopt=$0; canonopt=deesc("-fmodules"); inc=1; do_output(fullopt); next; }
/^(-fmodule-name=)(.*)$/ { fullopt=$0; canonopt=deesc("-fmodule-name"); optarg=gensub(/(-fmodule-name=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fmodule-map-file=)(.*)$/ { fullopt=$0; canonopt=deesc("-fmodule-map-file"); optarg=gensub(/(-fmodule-map-file=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fmodule-map-file-home-is-cwd$/ { fullopt=$0; canonopt=deesc("-fmodule-map-file-home-is-cwd"); inc=1; do_output(fullopt); next; }
/^(-fmodule-format=)(.*)$/ { fullopt=$0; canonopt=deesc("-fmodule-format"); optarg=gensub(/(-fmodule-format=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fmodule-file=)(.*)$/ { fullopt=$0; canonopt=deesc("-fmodule-file"); optarg=gensub(/(-fmodule-file=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fmodule-feature)$/     { fullopt=$0; canonopt=deesc("-fmodule-feature"); snarfing_optarg=1; inc=2; next; }
/^(-fmessage-length=)(.*)$/ { fullopt=$0; canonopt=deesc("-fmessage-length"); optarg=gensub(/(-fmessage-length=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fmerge-functions$/ { fullopt=$0; canonopt=deesc("-fmerge-functions"); inc=1; do_output(fullopt); next; }
/^-fmerge-all-constants$/ { fullopt=$0; canonopt=deesc("-fmerge-all-constants"); inc=1; do_output(fullopt); next; }
/^(-fmemory-profile=)(.*)$/ { fullopt=$0; canonopt=deesc("-fmemory-profile"); optarg=gensub(/(-fmemory-profile=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fmemory-profile$/ { fullopt=$0; canonopt=deesc("-fmemory-profile"); inc=1; do_output(fullopt); next; }
/^(-fmax-type-align=)(.*)$/ { fullopt=$0; canonopt=deesc("-fmax-type-align"); optarg=gensub(/(-fmax-type-align=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fmax-tokens=)(.*)$/ { fullopt=$0; canonopt=deesc("-fmax-tokens"); optarg=gensub(/(-fmax-tokens=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fmath-errno$/ { fullopt=$0; canonopt=deesc("-fmath-errno"); inc=1; do_output(fullopt); next; }
/^(-fmacro-prefix-map=)(.*)$/ { fullopt=$0; canonopt=deesc("-fmacro-prefix-map"); optarg=gensub(/(-fmacro-prefix-map=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fmacro-backtrace-limit)$/     { fullopt=$0; canonopt=deesc("-fmacro-backtrace-limit"); snarfing_optarg=1; inc=2; next; }
/^(-flto=)(.*)$/ { fullopt=$0; canonopt=deesc("-flto"); optarg=gensub(/(-flto=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-flto-visibility-public-std$/ { fullopt=$0; canonopt=deesc("-flto-visibility-public-std"); inc=1; do_output(fullopt); next; }
/^-flto-unit$/ { fullopt=$0; canonopt=deesc("-flto-unit"); inc=1; do_output(fullopt); next; }
/^(-flto-jobs=)(.*)$/ { fullopt=$0; canonopt=deesc("-flto-jobs"); optarg=gensub(/(-flto-jobs=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-flto$/ { fullopt=$0; canonopt=deesc("-flto"); inc=1; do_output(fullopt); next; }
/^-flegacy-pass-manager$/ { fullopt=$0; canonopt=deesc("-flegacy-pass-manager"); inc=1; do_output(fullopt); next; }
/^(-flax-vector-conversions=)(.*)$/ { fullopt=$0; canonopt=deesc("-flax-vector-conversions"); optarg=gensub(/(-flax-vector-conversions=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fkeep-static-consts$/ { fullopt=$0; canonopt=deesc("-fkeep-static-consts"); inc=1; do_output(fullopt); next; }
/^-fjump-tables$/ { fullopt=$0; canonopt=deesc("-fjump-tables"); inc=1; do_output(fullopt); next; }
/^(-fixit=)(.*)$/ { fullopt=$0; canonopt=deesc("-fixit"); optarg=gensub(/(-fixit=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fixit-to-temporary$/ { fullopt=$0; canonopt=deesc("-fixit-to-temporary"); inc=1; do_output(fullopt); next; }
/^-fixit-recompile$/ { fullopt=$0; canonopt=deesc("-fixit-recompile"); inc=1; do_output(fullopt); next; }
/^-fixit$/ { fullopt=$0; canonopt=deesc("-fixit"); inc=1; do_output(fullopt); next; }
/^-fix-what-you-can$/ { fullopt=$0; canonopt=deesc("-fix-what-you-can"); inc=1; do_output(fullopt); next; }
/^-fix-only-warnings$/ { fullopt=$0; canonopt=deesc("-fix-only-warnings"); inc=1; do_output(fullopt); next; }
/^-fintegrated-cc1$/ { fullopt=$0; canonopt=deesc("-fintegrated-cc1"); inc=1; do_output(fullopt); next; }
/^-fintegrated-as$/ { fullopt=$0; canonopt=deesc("-fintegrated-as"); inc=1; do_output(fullopt); next; }
/^-finstrument-functions-after-inlining$/ { fullopt=$0; canonopt=deesc("-finstrument-functions-after-inlining"); inc=1; do_output(fullopt); next; }
/^-finstrument-functions$/ { fullopt=$0; canonopt=deesc("-finstrument-functions"); inc=1; do_output(fullopt); next; }
/^-finstrument-function-entry-bare$/ { fullopt=$0; canonopt=deesc("-finstrument-function-entry-bare"); inc=1; do_output(fullopt); next; }
/^(-finput-charset=)(.*)$/ { fullopt=$0; canonopt=deesc("-finput-charset"); optarg=gensub(/(-finput-charset=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-finline-hint-functions$/ { fullopt=$0; canonopt=deesc("-finline-hint-functions"); inc=1; do_output(fullopt); next; }
/^-finline-functions$/ { fullopt=$0; canonopt=deesc("-finline-functions"); inc=1; do_output(fullopt); next; }
/^-finclude-default-header$/ { fullopt=$0; canonopt=deesc("-finclude-default-header"); inc=1; do_output(fullopt); next; }
/^-fimplicit-modules$/ { fullopt=$0; canonopt=deesc("-fimplicit-modules"); inc=1; do_output(fullopt); next; }
/^-fimplicit-module-maps$/ { fullopt=$0; canonopt=deesc("-fimplicit-module-maps"); inc=1; do_output(fullopt); next; }
/^-fignore-exceptions$/ { fullopt=$0; canonopt=deesc("-fignore-exceptions"); inc=1; do_output(fullopt); next; }
/^-fhip-new-launch-api$/ { fullopt=$0; canonopt=deesc("-fhip-new-launch-api"); inc=1; do_output(fullopt); next; }
/^-fhip-fp32-correctly-rounded-divide-sqrt$/ { fullopt=$0; canonopt=deesc("-fhip-fp32-correctly-rounded-divide-sqrt"); inc=1; do_output(fullopt); next; }
/^-fhalf-no-semantic-interposition$/ { fullopt=$0; canonopt=deesc("-fhalf-no-semantic-interposition"); inc=1; do_output(fullopt); next; }
/^-fgpu-sanitize$/ { fullopt=$0; canonopt=deesc("-fgpu-sanitize"); inc=1; do_output(fullopt); next; }
/^-fgpu-rdc$/ { fullopt=$0; canonopt=deesc("-fgpu-rdc"); inc=1; do_output(fullopt); next; }
/^-fgpu-flush-denormals-to-zero$/ { fullopt=$0; canonopt=deesc("-fgpu-flush-denormals-to-zero"); inc=1; do_output(fullopt); next; }
/^-fgpu-exclude-wrong-side-overloads$/ { fullopt=$0; canonopt=deesc("-fgpu-exclude-wrong-side-overloads"); inc=1; do_output(fullopt); next; }
/^-fgpu-defer-diag$/ { fullopt=$0; canonopt=deesc("-fgpu-defer-diag"); inc=1; do_output(fullopt); next; }
/^-fgpu-allow-device-init$/ { fullopt=$0; canonopt=deesc("-fgpu-allow-device-init"); inc=1; do_output(fullopt); next; }
/^(-fgnuc-version=)(.*)$/ { fullopt=$0; canonopt=deesc("-fgnuc-version"); optarg=gensub(/(-fgnuc-version=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fgnu89-inline$/ { fullopt=$0; canonopt=deesc("-fgnu89-inline"); inc=1; do_output(fullopt); next; }
/^-fgnu-runtime$/ { fullopt=$0; canonopt=deesc("-fgnu-runtime"); inc=1; do_output(fullopt); next; }
/^-fgnu-keywords$/ { fullopt=$0; canonopt=deesc("-fgnu-keywords"); inc=1; do_output(fullopt); next; }
/^-fgnu-inline-asm$/ { fullopt=$0; canonopt=deesc("-fgnu-inline-asm"); inc=1; do_output(fullopt); next; }
/^-fglobal-isel$/ { fullopt=$0; canonopt=deesc("-fglobal-isel"); inc=1; do_output(fullopt); next; }
/^-ffunction-sections$/ { fullopt=$0; canonopt=deesc("-ffunction-sections"); inc=1; do_output(fullopt); next; }
/^-ffreestanding$/ { fullopt=$0; canonopt=deesc("-ffreestanding"); inc=1; do_output(fullopt); next; }
/^(-ffp-model=)(.*)$/ { fullopt=$0; canonopt=deesc("-ffp-model"); optarg=gensub(/(-ffp-model=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-ffp-exception-behavior=)(.*)$/ { fullopt=$0; canonopt=deesc("-ffp-exception-behavior"); optarg=gensub(/(-ffp-exception-behavior=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-ffp-contract=)(.*)$/ { fullopt=$0; canonopt=deesc("-ffp-contract"); optarg=gensub(/(-ffp-contract=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fforce-enable-int128$/ { fullopt=$0; canonopt=deesc("-fforce-enable-int128"); inc=1; do_output(fullopt); next; }
/^-fforce-emit-vtables$/ { fullopt=$0; canonopt=deesc("-fforce-emit-vtables"); inc=1; do_output(fullopt); next; }
/^-fforce-dwarf-frame$/ { fullopt=$0; canonopt=deesc("-fforce-dwarf-frame"); inc=1; do_output(fullopt); next; }
/^-fforbid-guard-variables$/ { fullopt=$0; canonopt=deesc("-fforbid-guard-variables"); inc=1; do_output(fullopt); next; }
/^-ffixed-x9$/ { fullopt=$0; canonopt=deesc("-ffixed-x9"); inc=1; do_output(fullopt); next; }
/^-ffixed-x8$/ { fullopt=$0; canonopt=deesc("-ffixed-x8"); inc=1; do_output(fullopt); next; }
/^-ffixed-x7$/ { fullopt=$0; canonopt=deesc("-ffixed-x7"); inc=1; do_output(fullopt); next; }
/^-ffixed-x6$/ { fullopt=$0; canonopt=deesc("-ffixed-x6"); inc=1; do_output(fullopt); next; }
/^-ffixed-x5$/ { fullopt=$0; canonopt=deesc("-ffixed-x5"); inc=1; do_output(fullopt); next; }
/^-ffixed-x4$/ { fullopt=$0; canonopt=deesc("-ffixed-x4"); inc=1; do_output(fullopt); next; }
/^-ffixed-x31$/ { fullopt=$0; canonopt=deesc("-ffixed-x31"); inc=1; do_output(fullopt); next; }
/^-ffixed-x30$/ { fullopt=$0; canonopt=deesc("-ffixed-x30"); inc=1; do_output(fullopt); next; }
/^-ffixed-x3$/ { fullopt=$0; canonopt=deesc("-ffixed-x3"); inc=1; do_output(fullopt); next; }
/^-ffixed-x29$/ { fullopt=$0; canonopt=deesc("-ffixed-x29"); inc=1; do_output(fullopt); next; }
/^-ffixed-x28$/ { fullopt=$0; canonopt=deesc("-ffixed-x28"); inc=1; do_output(fullopt); next; }
/^-ffixed-x27$/ { fullopt=$0; canonopt=deesc("-ffixed-x27"); inc=1; do_output(fullopt); next; }
/^-ffixed-x26$/ { fullopt=$0; canonopt=deesc("-ffixed-x26"); inc=1; do_output(fullopt); next; }
/^-ffixed-x25$/ { fullopt=$0; canonopt=deesc("-ffixed-x25"); inc=1; do_output(fullopt); next; }
/^-ffixed-x24$/ { fullopt=$0; canonopt=deesc("-ffixed-x24"); inc=1; do_output(fullopt); next; }
/^-ffixed-x23$/ { fullopt=$0; canonopt=deesc("-ffixed-x23"); inc=1; do_output(fullopt); next; }
/^-ffixed-x22$/ { fullopt=$0; canonopt=deesc("-ffixed-x22"); inc=1; do_output(fullopt); next; }
/^-ffixed-x21$/ { fullopt=$0; canonopt=deesc("-ffixed-x21"); inc=1; do_output(fullopt); next; }
/^-ffixed-x20$/ { fullopt=$0; canonopt=deesc("-ffixed-x20"); inc=1; do_output(fullopt); next; }
/^-ffixed-x2$/ { fullopt=$0; canonopt=deesc("-ffixed-x2"); inc=1; do_output(fullopt); next; }
/^-ffixed-x19$/ { fullopt=$0; canonopt=deesc("-ffixed-x19"); inc=1; do_output(fullopt); next; }
/^-ffixed-x18$/ { fullopt=$0; canonopt=deesc("-ffixed-x18"); inc=1; do_output(fullopt); next; }
/^-ffixed-x17$/ { fullopt=$0; canonopt=deesc("-ffixed-x17"); inc=1; do_output(fullopt); next; }
/^-ffixed-x16$/ { fullopt=$0; canonopt=deesc("-ffixed-x16"); inc=1; do_output(fullopt); next; }
/^-ffixed-x15$/ { fullopt=$0; canonopt=deesc("-ffixed-x15"); inc=1; do_output(fullopt); next; }
/^-ffixed-x14$/ { fullopt=$0; canonopt=deesc("-ffixed-x14"); inc=1; do_output(fullopt); next; }
/^-ffixed-x13$/ { fullopt=$0; canonopt=deesc("-ffixed-x13"); inc=1; do_output(fullopt); next; }
/^-ffixed-x12$/ { fullopt=$0; canonopt=deesc("-ffixed-x12"); inc=1; do_output(fullopt); next; }
/^-ffixed-x11$/ { fullopt=$0; canonopt=deesc("-ffixed-x11"); inc=1; do_output(fullopt); next; }
/^-ffixed-x10$/ { fullopt=$0; canonopt=deesc("-ffixed-x10"); inc=1; do_output(fullopt); next; }
/^-ffixed-x1$/ { fullopt=$0; canonopt=deesc("-ffixed-x1"); inc=1; do_output(fullopt); next; }
/^-ffixed-r9$/ { fullopt=$0; canonopt=deesc("-ffixed-r9"); inc=1; do_output(fullopt); next; }
/^-ffixed-r19$/ { fullopt=$0; canonopt=deesc("-ffixed-r19"); inc=1; do_output(fullopt); next; }
/^-ffixed-point$/ { fullopt=$0; canonopt=deesc("-ffixed-point"); inc=1; do_output(fullopt); next; }
/^-ffixed-d7$/ { fullopt=$0; canonopt=deesc("-ffixed-d7"); inc=1; do_output(fullopt); next; }
/^-ffixed-d6$/ { fullopt=$0; canonopt=deesc("-ffixed-d6"); inc=1; do_output(fullopt); next; }
/^-ffixed-d5$/ { fullopt=$0; canonopt=deesc("-ffixed-d5"); inc=1; do_output(fullopt); next; }
/^-ffixed-d4$/ { fullopt=$0; canonopt=deesc("-ffixed-d4"); inc=1; do_output(fullopt); next; }
/^-ffixed-d3$/ { fullopt=$0; canonopt=deesc("-ffixed-d3"); inc=1; do_output(fullopt); next; }
/^-ffixed-d2$/ { fullopt=$0; canonopt=deesc("-ffixed-d2"); inc=1; do_output(fullopt); next; }
/^-ffixed-d1$/ { fullopt=$0; canonopt=deesc("-ffixed-d1"); inc=1; do_output(fullopt); next; }
/^-ffixed-d0$/ { fullopt=$0; canonopt=deesc("-ffixed-d0"); inc=1; do_output(fullopt); next; }
/^-ffixed-a6$/ { fullopt=$0; canonopt=deesc("-ffixed-a6"); inc=1; do_output(fullopt); next; }
/^-ffixed-a5$/ { fullopt=$0; canonopt=deesc("-ffixed-a5"); inc=1; do_output(fullopt); next; }
/^-ffixed-a4$/ { fullopt=$0; canonopt=deesc("-ffixed-a4"); inc=1; do_output(fullopt); next; }
/^-ffixed-a3$/ { fullopt=$0; canonopt=deesc("-ffixed-a3"); inc=1; do_output(fullopt); next; }
/^-ffixed-a2$/ { fullopt=$0; canonopt=deesc("-ffixed-a2"); inc=1; do_output(fullopt); next; }
/^-ffixed-a1$/ { fullopt=$0; canonopt=deesc("-ffixed-a1"); inc=1; do_output(fullopt); next; }
/^-ffixed-a0$/ { fullopt=$0; canonopt=deesc("-ffixed-a0"); inc=1; do_output(fullopt); next; }
/^-ffinite-math-only$/ { fullopt=$0; canonopt=deesc("-ffinite-math-only"); inc=1; do_output(fullopt); next; }
/^-ffinite-loops$/ { fullopt=$0; canonopt=deesc("-ffinite-loops"); inc=1; do_output(fullopt); next; }
/^-ffine-grained-bitfield-accesses$/ { fullopt=$0; canonopt=deesc("-ffine-grained-bitfield-accesses"); inc=1; do_output(fullopt); next; }
/^(-ffile-prefix-map=)(.*)$/ { fullopt=$0; canonopt=deesc("-ffile-prefix-map"); optarg=gensub(/(-ffile-prefix-map=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-ffile-compilation-dir=)(.*)$/ { fullopt=$0; canonopt=deesc("-ffile-compilation-dir"); optarg=gensub(/(-ffile-compilation-dir=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-ffast-math$/ { fullopt=$0; canonopt=deesc("-ffast-math"); inc=1; do_output(fullopt); next; }
/^-ffake-address-space-map$/ { fullopt=$0; canonopt=deesc("-ffake-address-space-map"); inc=1; do_output(fullopt); next; }
/^-fexternc-nounwind$/ { fullopt=$0; canonopt=deesc("-fexternc-nounwind"); inc=1; do_output(fullopt); next; }
/^(-fextend-arguments=)(.*)$/ { fullopt=$0; canonopt=deesc("-fextend-arguments"); optarg=gensub(/(-fextend-arguments=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fexperimental-strict-floating-point$/ { fullopt=$0; canonopt=deesc("-fexperimental-strict-floating-point"); inc=1; do_output(fullopt); next; }
/^-fexperimental-relative-c\+\+-abi-vtables$/ { fullopt=$0; canonopt=deesc("-fexperimental-relative-c\+\+-abi-vtables"); inc=1; do_output(fullopt); next; }
/^-fexperimental-new-constant-interpreter$/ { fullopt=$0; canonopt=deesc("-fexperimental-new-constant-interpreter"); inc=1; do_output(fullopt); next; }
/^-fexperimental-debug-variable-locations$/ { fullopt=$0; canonopt=deesc("-fexperimental-debug-variable-locations"); inc=1; do_output(fullopt); next; }
/^-fexceptions$/ { fullopt=$0; canonopt=deesc("-fexceptions"); inc=1; do_output(fullopt); next; }
/^-fescaping-block-tail-calls$/ { fullopt=$0; canonopt=deesc("-fescaping-block-tail-calls"); inc=1; do_output(fullopt); next; }
/^(-ferror-limit)$/     { fullopt=$0; canonopt=deesc("-ferror-limit"); snarfing_optarg=1; inc=2; next; }
/^-fencode-extended-block-signature$/ { fullopt=$0; canonopt=deesc("-fencode-extended-block-signature"); inc=1; do_output(fullopt); next; }
/^-fenable-matrix$/ { fullopt=$0; canonopt=deesc("-fenable-matrix"); inc=1; do_output(fullopt); next; }
/^-femulated-tls$/ { fullopt=$0; canonopt=deesc("-femulated-tls"); inc=1; do_output(fullopt); next; }
/^-femit-all-decls$/ { fullopt=$0; canonopt=deesc("-femit-all-decls"); inc=1; do_output(fullopt); next; }
/^(-fembed-bitcode=)(.*)$/ { fullopt=$0; canonopt=deesc("-fembed-bitcode"); optarg=gensub(/(-fembed-bitcode=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fembed-bitcode-marker$/ { fullopt=$0; canonopt=deesc("-fembed-bitcode-marker"); inc=1; do_output(fullopt); next; }
/^-fembed-bitcode$/ { fullopt=$0; canonopt=deesc("-fembed-bitcode"); inc=1; do_output(fullopt); next; }
/^-feliminate-unused-debug-types$/ { fullopt=$0; canonopt=deesc("-feliminate-unused-debug-types"); inc=1; do_output(fullopt); next; }
/^-felide-constructors$/ { fullopt=$0; canonopt=deesc("-felide-constructors"); inc=1; do_output(fullopt); next; }
/^-fdwarf-exceptions$/ { fullopt=$0; canonopt=deesc("-fdwarf-exceptions"); inc=1; do_output(fullopt); next; }
/^-fdwarf-directory-asm$/ { fullopt=$0; canonopt=deesc("-fdwarf-directory-asm"); inc=1; do_output(fullopt); next; }
/^-fdump-vtable-layouts$/ { fullopt=$0; canonopt=deesc("-fdump-vtable-layouts"); inc=1; do_output(fullopt); next; }
/^-fdump-record-layouts-simple$/ { fullopt=$0; canonopt=deesc("-fdump-record-layouts-simple"); inc=1; do_output(fullopt); next; }
/^-fdump-record-layouts-complete$/ { fullopt=$0; canonopt=deesc("-fdump-record-layouts-complete"); inc=1; do_output(fullopt); next; }
/^-fdump-record-layouts-canonical$/ { fullopt=$0; canonopt=deesc("-fdump-record-layouts-canonical"); inc=1; do_output(fullopt); next; }
/^-fdump-record-layouts$/ { fullopt=$0; canonopt=deesc("-fdump-record-layouts"); inc=1; do_output(fullopt); next; }
/^-fdouble-square-bracket-attributes$/ { fullopt=$0; canonopt=deesc("-fdouble-square-bracket-attributes"); inc=1; do_output(fullopt); next; }
/^-fdollars-in-identifiers$/ { fullopt=$0; canonopt=deesc("-fdollars-in-identifiers"); inc=1; do_output(fullopt); next; }
/^-fdiscard-value-names$/ { fullopt=$0; canonopt=deesc("-fdiscard-value-names"); inc=1; do_output(fullopt); next; }
/^-fdisable-module-hash$/ { fullopt=$0; canonopt=deesc("-fdisable-module-hash"); inc=1; do_output(fullopt); next; }
/^-fdirect-access-external-data$/ { fullopt=$0; canonopt=deesc("-fdirect-access-external-data"); inc=1; do_output(fullopt); next; }
/^-fdigraphs$/ { fullopt=$0; canonopt=deesc("-fdigraphs"); inc=1; do_output(fullopt); next; }
/^-fdiagnostics-show-template-tree$/ { fullopt=$0; canonopt=deesc("-fdiagnostics-show-template-tree"); inc=1; do_output(fullopt); next; }
/^-fdiagnostics-show-option$/ { fullopt=$0; canonopt=deesc("-fdiagnostics-show-option"); inc=1; do_output(fullopt); next; }
/^-fdiagnostics-show-note-include-stack$/ { fullopt=$0; canonopt=deesc("-fdiagnostics-show-note-include-stack"); inc=1; do_output(fullopt); next; }
/^-fdiagnostics-show-hotness$/ { fullopt=$0; canonopt=deesc("-fdiagnostics-show-hotness"); inc=1; do_output(fullopt); next; }
/^(-fdiagnostics-show-category)$/     { fullopt=$0; canonopt=deesc("-fdiagnostics-show-category"); snarfing_optarg=1; inc=2; next; }
/^-fdiagnostics-print-source-range-info$/ { fullopt=$0; canonopt=deesc("-fdiagnostics-print-source-range-info"); inc=1; do_output(fullopt); next; }
/^-fdiagnostics-parseable-fixits$/ { fullopt=$0; canonopt=deesc("-fdiagnostics-parseable-fixits"); inc=1; do_output(fullopt); next; }
/^(-fdiagnostics-hotness-threshold=)(.*)$/ { fullopt=$0; canonopt=deesc("-fdiagnostics-hotness-threshold"); optarg=gensub(/(-fdiagnostics-hotness-threshold=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fdiagnostics-format)$/     { fullopt=$0; canonopt=deesc("-fdiagnostics-format"); snarfing_optarg=1; inc=2; next; }
/^-fdiagnostics-absolute-paths$/ { fullopt=$0; canonopt=deesc("-fdiagnostics-absolute-paths"); inc=1; do_output(fullopt); next; }
/^-fdeprecated-macro$/ { fullopt=$0; canonopt=deesc("-fdeprecated-macro"); inc=1; do_output(fullopt); next; }
/^-fdelete-null-pointer-checks$/ { fullopt=$0; canonopt=deesc("-fdelete-null-pointer-checks"); inc=1; do_output(fullopt); next; }
/^-fdelayed-template-parsing$/ { fullopt=$0; canonopt=deesc("-fdelayed-template-parsing"); inc=1; do_output(fullopt); next; }
/^(-fdefault-calling-conv=)(.*)$/ { fullopt=$0; canonopt=deesc("-fdefault-calling-conv"); optarg=gensub(/(-fdefault-calling-conv=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fdeclspec$/ { fullopt=$0; canonopt=deesc("-fdeclspec"); inc=1; do_output(fullopt); next; }
/^-fdeclare-opencl-builtins$/ { fullopt=$0; canonopt=deesc("-fdeclare-opencl-builtins"); inc=1; do_output(fullopt); next; }
/^-fdebugger-support$/ { fullopt=$0; canonopt=deesc("-fdebugger-support"); inc=1; do_output(fullopt); next; }
/^-fdebugger-objc-literal$/ { fullopt=$0; canonopt=deesc("-fdebugger-objc-literal"); inc=1; do_output(fullopt); next; }
/^-fdebugger-cast-result-to-id$/ { fullopt=$0; canonopt=deesc("-fdebugger-cast-result-to-id"); inc=1; do_output(fullopt); next; }
/^-fdebug-types-section$/ { fullopt=$0; canonopt=deesc("-fdebug-types-section"); inc=1; do_output(fullopt); next; }
/^-fdebug-ranges-base-address$/ { fullopt=$0; canonopt=deesc("-fdebug-ranges-base-address"); inc=1; do_output(fullopt); next; }
/^(-fdebug-prefix-map=)(.*)$/ { fullopt=$0; canonopt=deesc("-fdebug-prefix-map"); optarg=gensub(/(-fdebug-prefix-map=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fdebug-pass-manager$/ { fullopt=$0; canonopt=deesc("-fdebug-pass-manager"); inc=1; do_output(fullopt); next; }
/^-fdebug-macro$/ { fullopt=$0; canonopt=deesc("-fdebug-macro"); inc=1; do_output(fullopt); next; }
/^-fdebug-info-for-profiling$/ { fullopt=$0; canonopt=deesc("-fdebug-info-for-profiling"); inc=1; do_output(fullopt); next; }
/^(-fdebug-default-version=)(.*)$/ { fullopt=$0; canonopt=deesc("-fdebug-default-version"); optarg=gensub(/(-fdebug-default-version=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fdebug-compilation-dir=)(.*)$/ { fullopt=$0; canonopt=deesc("-fdebug-compilation-dir"); optarg=gensub(/(-fdebug-compilation-dir=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fdata-sections$/ { fullopt=$0; canonopt=deesc("-fdata-sections"); inc=1; do_output(fullopt); next; }
/^-fcxx-exceptions$/ { fullopt=$0; canonopt=deesc("-fcxx-exceptions"); inc=1; do_output(fullopt); next; }
/^-fcuda-short-ptr$/ { fullopt=$0; canonopt=deesc("-fcuda-short-ptr"); inc=1; do_output(fullopt); next; }
/^-fcuda-is-device$/ { fullopt=$0; canonopt=deesc("-fcuda-is-device"); inc=1; do_output(fullopt); next; }
/^(-fcuda-include-gpubinary)$/     { fullopt=$0; canonopt=deesc("-fcuda-include-gpubinary"); snarfing_optarg=1; inc=2; next; }
/^-fcuda-approx-transcendentals$/ { fullopt=$0; canonopt=deesc("-fcuda-approx-transcendentals"); inc=1; do_output(fullopt); next; }
/^-fcuda-allow-variadic-functions$/ { fullopt=$0; canonopt=deesc("-fcuda-allow-variadic-functions"); inc=1; do_output(fullopt); next; }
/^(-fcs-profile-generate=)(.*)$/ { fullopt=$0; canonopt=deesc("-fcs-profile-generate"); optarg=gensub(/(-fcs-profile-generate=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fcs-profile-generate$/ { fullopt=$0; canonopt=deesc("-fcs-profile-generate"); inc=1; do_output(fullopt); next; }
/^(-fcrash-diagnostics-dir=)(.*)$/ { fullopt=$0; canonopt=deesc("-fcrash-diagnostics-dir"); optarg=gensub(/(-fcrash-diagnostics-dir=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fcoverage-prefix-map=)(.*)$/ { fullopt=$0; canonopt=deesc("-fcoverage-prefix-map"); optarg=gensub(/(-fcoverage-prefix-map=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fcoverage-mapping$/ { fullopt=$0; canonopt=deesc("-fcoverage-mapping"); inc=1; do_output(fullopt); next; }
/^(-fcoverage-compilation-dir=)(.*)$/ { fullopt=$0; canonopt=deesc("-fcoverage-compilation-dir"); optarg=gensub(/(-fcoverage-compilation-dir=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fcoroutines-ts$/ { fullopt=$0; canonopt=deesc("-fcoroutines-ts"); inc=1; do_output(fullopt); next; }
/^-fconvergent-functions$/ { fullopt=$0; canonopt=deesc("-fconvergent-functions"); inc=1; do_output(fullopt); next; }
/^(-fconstexpr-steps)$/     { fullopt=$0; canonopt=deesc("-fconstexpr-steps"); snarfing_optarg=1; inc=2; next; }
/^(-fconstexpr-depth)$/     { fullopt=$0; canonopt=deesc("-fconstexpr-depth"); snarfing_optarg=1; inc=2; next; }
/^(-fconstexpr-backtrace-limit)$/     { fullopt=$0; canonopt=deesc("-fconstexpr-backtrace-limit"); snarfing_optarg=1; inc=2; next; }
/^(-fconstant-string-class)$/     { fullopt=$0; canonopt=deesc("-fconstant-string-class"); snarfing_optarg=1; inc=2; next; }
/^-fconstant-cfstrings$/ { fullopt=$0; canonopt=deesc("-fconstant-cfstrings"); inc=1; do_output(fullopt); next; }
/^-fconst-strings$/ { fullopt=$0; canonopt=deesc("-fconst-strings"); inc=1; do_output(fullopt); next; }
/^-fconcepts-ts$/ { fullopt=$0; canonopt=deesc("-fconcepts-ts"); inc=1; do_output(fullopt); next; }
/^-fcomplete-member-pointers$/ { fullopt=$0; canonopt=deesc("-fcomplete-member-pointers"); inc=1; do_output(fullopt); next; }
/^-fcompatibility-qualified-id-block-type-checking$/ { fullopt=$0; canonopt=deesc("-fcompatibility-qualified-id-block-type-checking"); inc=1; do_output(fullopt); next; }
/^-fcommon$/ { fullopt=$0; canonopt=deesc("-fcommon"); inc=1; do_output(fullopt); next; }
/^(-fcomment-block-commands=)(.*)$/ { fullopt=$0; canonopt=deesc("-fcomment-block-commands"); optarg=gensub(/(-fcomment-block-commands=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fcolor-diagnostics$/ { fullopt=$0; canonopt=deesc("-fcolor-diagnostics"); inc=1; do_output(fullopt); next; }
/^(-fclang-abi-compat=)(.*)$/ { fullopt=$0; canonopt=deesc("-fclang-abi-compat"); optarg=gensub(/(-fclang-abi-compat=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fchar8_t$/ { fullopt=$0; canonopt=deesc("-fchar8_t"); inc=1; do_output(fullopt); next; }
/^(-fcf-protection=)(.*)$/ { fullopt=$0; canonopt=deesc("-fcf-protection"); optarg=gensub(/(-fcf-protection=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fcf-protection$/ { fullopt=$0; canonopt=deesc("-fcf-protection"); inc=1; do_output(fullopt); next; }
/^(-fcaret-diagnostics-max-lines)$/     { fullopt=$0; canonopt=deesc("-fcaret-diagnostics-max-lines"); snarfing_optarg=1; inc=2; next; }
/^-fcaret-diagnostics$/ { fullopt=$0; canonopt=deesc("-fcaret-diagnostics"); inc=1; do_output(fullopt); next; }
/^-fcall-saved-x9$/ { fullopt=$0; canonopt=deesc("-fcall-saved-x9"); inc=1; do_output(fullopt); next; }
/^-fcall-saved-x8$/ { fullopt=$0; canonopt=deesc("-fcall-saved-x8"); inc=1; do_output(fullopt); next; }
/^-fcall-saved-x18$/ { fullopt=$0; canonopt=deesc("-fcall-saved-x18"); inc=1; do_output(fullopt); next; }
/^-fcall-saved-x15$/ { fullopt=$0; canonopt=deesc("-fcall-saved-x15"); inc=1; do_output(fullopt); next; }
/^-fcall-saved-x14$/ { fullopt=$0; canonopt=deesc("-fcall-saved-x14"); inc=1; do_output(fullopt); next; }
/^-fcall-saved-x13$/ { fullopt=$0; canonopt=deesc("-fcall-saved-x13"); inc=1; do_output(fullopt); next; }
/^-fcall-saved-x12$/ { fullopt=$0; canonopt=deesc("-fcall-saved-x12"); inc=1; do_output(fullopt); next; }
/^-fcall-saved-x11$/ { fullopt=$0; canonopt=deesc("-fcall-saved-x11"); inc=1; do_output(fullopt); next; }
/^-fcall-saved-x10$/ { fullopt=$0; canonopt=deesc("-fcall-saved-x10"); inc=1; do_output(fullopt); next; }
/^-fc\+\+-static-destructors$/ { fullopt=$0; canonopt=deesc("-fc\+\+-static-destructors"); inc=1; do_output(fullopt); next; }
/^(-fc\+\+-abi=)(.*)$/ { fullopt=$0; canonopt=deesc("-fc\+\+-abi"); optarg=gensub(/(-fc\+\+-abi=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fbuiltin-module-map$/ { fullopt=$0; canonopt=deesc("-fbuiltin-module-map"); inc=1; do_output(fullopt); next; }
/^(-fbuild-session-timestamp=)(.*)$/ { fullopt=$0; canonopt=deesc("-fbuild-session-timestamp"); optarg=gensub(/(-fbuild-session-timestamp=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fbuild-session-file=)(.*)$/ { fullopt=$0; canonopt=deesc("-fbuild-session-file"); optarg=gensub(/(-fbuild-session-file=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fbracket-depth)$/     { fullopt=$0; canonopt=deesc("-fbracket-depth"); snarfing_optarg=1; inc=2; next; }
/^-fborland-extensions$/ { fullopt=$0; canonopt=deesc("-fborland-extensions"); inc=1; do_output(fullopt); next; }
/^-fblocks-runtime-optional$/ { fullopt=$0; canonopt=deesc("-fblocks-runtime-optional"); inc=1; do_output(fullopt); next; }
/^-fblocks$/ { fullopt=$0; canonopt=deesc("-fblocks"); inc=1; do_output(fullopt); next; }
/^(-fbinutils-version=)(.*)$/ { fullopt=$0; canonopt=deesc("-fbinutils-version"); optarg=gensub(/(-fbinutils-version=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-fbasic-block-sections=)(.*)$/ { fullopt=$0; canonopt=deesc("-fbasic-block-sections"); optarg=gensub(/(-fbasic-block-sections=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fautolink$/ { fullopt=$0; canonopt=deesc("-fautolink"); inc=1; do_output(fullopt); next; }
/^-fasync-exceptions$/ { fullopt=$0; canonopt=deesc("-fasync-exceptions"); inc=1; do_output(fullopt); next; }
/^-fasm-blocks$/ { fullopt=$0; canonopt=deesc("-fasm-blocks"); inc=1; do_output(fullopt); next; }
/^-fapply-global-visibility-to-externs$/ { fullopt=$0; canonopt=deesc("-fapply-global-visibility-to-externs"); inc=1; do_output(fullopt); next; }
/^-fapplication-extension$/ { fullopt=$0; canonopt=deesc("-fapplication-extension"); inc=1; do_output(fullopt); next; }
/^-fapple-pragma-pack$/ { fullopt=$0; canonopt=deesc("-fapple-pragma-pack"); inc=1; do_output(fullopt); next; }
/^-fapple-link-rtlib$/ { fullopt=$0; canonopt=deesc("-fapple-link-rtlib"); inc=1; do_output(fullopt); next; }
/^-fapple-kext$/ { fullopt=$0; canonopt=deesc("-fapple-kext"); inc=1; do_output(fullopt); next; }
/^-fansi-escape-codes$/ { fullopt=$0; canonopt=deesc("-fansi-escape-codes"); inc=1; do_output(fullopt); next; }
/^(-faltivec-src-compat=)(.*)$/ { fullopt=$0; canonopt=deesc("-faltivec-src-compat"); optarg=gensub(/(-faltivec-src-compat=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-fallow-pcm-with-compiler-errors$/ { fullopt=$0; canonopt=deesc("-fallow-pcm-with-compiler-errors"); inc=1; do_output(fullopt); next; }
/^-fallow-pch-with-different-modules-cache-path$/ { fullopt=$0; canonopt=deesc("-fallow-pch-with-different-modules-cache-path"); inc=1; do_output(fullopt); next; }
/^-fallow-pch-with-compiler-errors$/ { fullopt=$0; canonopt=deesc("-fallow-pch-with-compiler-errors"); inc=1; do_output(fullopt); next; }
/^-fallow-half-arguments-and-returns$/ { fullopt=$0; canonopt=deesc("-fallow-half-arguments-and-returns"); inc=1; do_output(fullopt); next; }
/^-fallow-editor-placeholders$/ { fullopt=$0; canonopt=deesc("-fallow-editor-placeholders"); inc=1; do_output(fullopt); next; }
/^-faligned-allocation$/ { fullopt=$0; canonopt=deesc("-faligned-allocation"); inc=1; do_output(fullopt); next; }
/^-faligned-alloc-unavailable$/ { fullopt=$0; canonopt=deesc("-faligned-alloc-unavailable"); inc=1; do_output(fullopt); next; }
/^-faddrsig$/ { fullopt=$0; canonopt=deesc("-faddrsig"); inc=1; do_output(fullopt); next; }
/^(-faddress-space-map-mangling=)(.*)$/ { fullopt=$0; canonopt=deesc("-faddress-space-map-mangling"); optarg=gensub(/(-faddress-space-map-mangling=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-faccess-control$/ { fullopt=$0; canonopt=deesc("-faccess-control"); inc=1; do_output(fullopt); next; }
/^-faapcs-bitfield-width$/ { fullopt=$0; canonopt=deesc("-faapcs-bitfield-width"); inc=1; do_output(fullopt); next; }
/^-faapcs-bitfield-load$/ { fullopt=$0; canonopt=deesc("-faapcs-bitfield-load"); inc=1; do_output(fullopt); next; }
/^(-exception-model)$/     { fullopt=$0; canonopt=deesc("-exception-model"); snarfing_optarg=1; inc=2; next; }
/^(-error-on-deserialized-decl)$/     { fullopt=$0; canonopt=deesc("-error-on-deserialized-decl"); snarfing_optarg=1; inc=2; next; }
/^-enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang$/ { fullopt=$0; canonopt=deesc("-enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang"); inc=1; do_output(fullopt); next; }
/^-enable-noundef-analysis$/ { fullopt=$0; canonopt=deesc("-enable-noundef-analysis"); inc=1; do_output(fullopt); next; }
/^-emit-pch$/ { fullopt=$0; canonopt=deesc("-emit-pch"); inc=1; do_output(fullopt); next; }
/^-emit-obj$/ { fullopt=$0; canonopt=deesc("-emit-obj"); inc=1; do_output(fullopt); next; }
/^-emit-module-interface$/ { fullopt=$0; canonopt=deesc("-emit-module-interface"); inc=1; do_output(fullopt); next; }
/^-emit-module$/ { fullopt=$0; canonopt=deesc("-emit-module"); inc=1; do_output(fullopt); next; }
/^-emit-merged-ifs$/ { fullopt=$0; canonopt=deesc("-emit-merged-ifs"); inc=1; do_output(fullopt); next; }
/^-emit-llvm-uselists$/ { fullopt=$0; canonopt=deesc("-emit-llvm-uselists"); inc=1; do_output(fullopt); next; }
/^-emit-llvm-only$/ { fullopt=$0; canonopt=deesc("-emit-llvm-only"); inc=1; do_output(fullopt); next; }
/^-emit-llvm-bc$/ { fullopt=$0; canonopt=deesc("-emit-llvm-bc"); inc=1; do_output(fullopt); next; }
/^-emit-llvm$/ { fullopt=$0; canonopt=deesc("-emit-llvm"); inc=1; do_output(fullopt); next; }
/^-emit-interface-stubs$/ { fullopt=$0; canonopt=deesc("-emit-interface-stubs"); inc=1; do_output(fullopt); next; }
/^-emit-html$/ { fullopt=$0; canonopt=deesc("-emit-html"); inc=1; do_output(fullopt); next; }
/^-emit-header-module$/ { fullopt=$0; canonopt=deesc("-emit-header-module"); inc=1; do_output(fullopt); next; }
/^-emit-codegen-only$/ { fullopt=$0; canonopt=deesc("-emit-codegen-only"); inc=1; do_output(fullopt); next; }
/^-emit-ast$/ { fullopt=$0; canonopt=deesc("-emit-ast"); inc=1; do_output(fullopt); next; }
/^-ehcontguard$/ { fullopt=$0; canonopt=deesc("-ehcontguard"); inc=1; do_output(fullopt); next; }
/^-dwarf-ext-refs$/ { fullopt=$0; canonopt=deesc("-dwarf-ext-refs"); inc=1; do_output(fullopt); next; }
/^-dwarf-explicit-import$/ { fullopt=$0; canonopt=deesc("-dwarf-explicit-import"); inc=1; do_output(fullopt); next; }
/^(-dwarf-debug-flags)$/     { fullopt=$0; canonopt=deesc("-dwarf-debug-flags"); snarfing_optarg=1; inc=2; next; }
/^-dump-tokens$/ { fullopt=$0; canonopt=deesc("-dump-tokens"); inc=1; do_output(fullopt); next; }
/^-dump-raw-tokens$/ { fullopt=$0; canonopt=deesc("-dump-raw-tokens"); inc=1; do_output(fullopt); next; }
/^-dump-deserialized-decls$/ { fullopt=$0; canonopt=deesc("-dump-deserialized-decls"); inc=1; do_output(fullopt); next; }
/^-dump-coverage-mapping$/ { fullopt=$0; canonopt=deesc("-dump-coverage-mapping"); inc=1; do_output(fullopt); next; }
/^(-dsym-dir)$/     { fullopt=$0; canonopt=deesc("-dsym-dir"); snarfing_optarg=1; inc=2; next; }
/^-discard-value-names$/ { fullopt=$0; canonopt=deesc("-discard-value-names"); inc=1; do_output(fullopt); next; }
/^-disable-red-zone$/ { fullopt=$0; canonopt=deesc("-disable-red-zone"); inc=1; do_output(fullopt); next; }
/^-disable-pragma-debug-crash$/ { fullopt=$0; canonopt=deesc("-disable-pragma-debug-crash"); inc=1; do_output(fullopt); next; }
/^-disable-objc-default-synthesize-properties$/ { fullopt=$0; canonopt=deesc("-disable-objc-default-synthesize-properties"); inc=1; do_output(fullopt); next; }
/^-disable-llvm-verifier$/ { fullopt=$0; canonopt=deesc("-disable-llvm-verifier"); inc=1; do_output(fullopt); next; }
/^-disable-llvm-passes$/ { fullopt=$0; canonopt=deesc("-disable-llvm-passes"); inc=1; do_output(fullopt); next; }
/^-disable-lifetime-markers$/ { fullopt=$0; canonopt=deesc("-disable-lifetime-markers"); inc=1; do_output(fullopt); next; }
/^-disable-free$/ { fullopt=$0; canonopt=deesc("-disable-free"); inc=1; do_output(fullopt); next; }
/^-disable-O0-optnone$/ { fullopt=$0; canonopt=deesc("-disable-O0-optnone"); inc=1; do_output(fullopt); next; }
/^(-diagnostic-log-file)$/     { fullopt=$0; canonopt=deesc("-diagnostic-log-file"); snarfing_optarg=1; inc=2; next; }
/^-detailed-preprocessing-record$/ { fullopt=$0; canonopt=deesc("-detailed-preprocessing-record"); inc=1; do_output(fullopt); next; }
/^(-dependency-file)$/     { fullopt=$0; canonopt=deesc("-dependency-file"); snarfing_optarg=1; inc=2; next; }
/^(-dependency-dot)$/     { fullopt=$0; canonopt=deesc("-dependency-dot"); snarfing_optarg=1; inc=2; next; }
/^(-default-function-attr)$/     { fullopt=$0; canonopt=deesc("-default-function-attr"); snarfing_optarg=1; inc=2; next; }
/^-debug-info-macro$/ { fullopt=$0; canonopt=deesc("-debug-info-macro"); inc=1; do_output(fullopt); next; }
/^-debug-forward-template-params$/ { fullopt=$0; canonopt=deesc("-debug-forward-template-params"); inc=1; do_output(fullopt); next; }
/^-dM$/ { fullopt=$0; canonopt=deesc("-dM"); inc=1; do_output(fullopt); next; }
/^-dI$/ { fullopt=$0; canonopt=deesc("-dI"); inc=1; do_output(fullopt); next; }
/^-dD$/ { fullopt=$0; canonopt=deesc("-dD"); inc=1; do_output(fullopt); next; }
/^(-cxx-isystem)$/     { fullopt=$0; canonopt=deesc("-cxx-isystem"); snarfing_optarg=1; inc=2; next; }
/^(-cuid=)(.*)$/ { fullopt=$0; canonopt=deesc("-cuid"); optarg=gensub(/(-cuid=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-coverage-version=)(.*)$/ { fullopt=$0; canonopt=deesc("-coverage-version"); optarg=gensub(/(-coverage-version=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-coverage-notes-file)$/     { fullopt=$0; canonopt=deesc("-coverage-notes-file"); snarfing_optarg=1; inc=2; next; }
/^(-coverage-data-file)$/     { fullopt=$0; canonopt=deesc("-coverage-data-file"); snarfing_optarg=1; inc=2; next; }
/^(-compress-debug-sections=)(.*)$/ { fullopt=$0; canonopt=deesc("-compress-debug-sections"); optarg=gensub(/(-compress-debug-sections=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-compiler-options-dump$/ { fullopt=$0; canonopt=deesc("-compiler-options-dump"); inc=1; do_output(fullopt); next; }
/^-code-completion-with-fixits$/ { fullopt=$0; canonopt=deesc("-code-completion-with-fixits"); inc=1; do_output(fullopt); next; }
/^-code-completion-patterns$/ { fullopt=$0; canonopt=deesc("-code-completion-patterns"); inc=1; do_output(fullopt); next; }
/^-code-completion-macros$/ { fullopt=$0; canonopt=deesc("-code-completion-macros"); inc=1; do_output(fullopt); next; }
/^-code-completion-brief-comments$/ { fullopt=$0; canonopt=deesc("-code-completion-brief-comments"); inc=1; do_output(fullopt); next; }
/^(-code-completion-at)$/     { fullopt=$0; canonopt=deesc("-code-completion-at"); snarfing_optarg=1; inc=2; next; }
/^-cl-unsafe-math-optimizations$/ { fullopt=$0; canonopt=deesc("-cl-unsafe-math-optimizations"); inc=1; do_output(fullopt); next; }
/^-cl-uniform-work-group-size$/ { fullopt=$0; canonopt=deesc("-cl-uniform-work-group-size"); inc=1; do_output(fullopt); next; }
/^-cl-strict-aliasing$/ { fullopt=$0; canonopt=deesc("-cl-strict-aliasing"); inc=1; do_output(fullopt); next; }
/^(-cl-std=)(.*)$/ { fullopt=$0; canonopt=deesc("-cl-std"); optarg=gensub(/(-cl-std=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-cl-single-precision-constant$/ { fullopt=$0; canonopt=deesc("-cl-single-precision-constant"); inc=1; do_output(fullopt); next; }
/^-cl-opt-disable$/ { fullopt=$0; canonopt=deesc("-cl-opt-disable"); inc=1; do_output(fullopt); next; }
/^-cl-no-stdinc$/ { fullopt=$0; canonopt=deesc("-cl-no-stdinc"); inc=1; do_output(fullopt); next; }
/^-cl-no-signed-zeros$/ { fullopt=$0; canonopt=deesc("-cl-no-signed-zeros"); inc=1; do_output(fullopt); next; }
/^-cl-mad-enable$/ { fullopt=$0; canonopt=deesc("-cl-mad-enable"); inc=1; do_output(fullopt); next; }
/^-cl-kernel-arg-info$/ { fullopt=$0; canonopt=deesc("-cl-kernel-arg-info"); inc=1; do_output(fullopt); next; }
/^-cl-fp32-correctly-rounded-divide-sqrt$/ { fullopt=$0; canonopt=deesc("-cl-fp32-correctly-rounded-divide-sqrt"); inc=1; do_output(fullopt); next; }
/^-cl-finite-math-only$/ { fullopt=$0; canonopt=deesc("-cl-finite-math-only"); inc=1; do_output(fullopt); next; }
/^-cl-fast-relaxed-math$/ { fullopt=$0; canonopt=deesc("-cl-fast-relaxed-math"); inc=1; do_output(fullopt); next; }
/^(-cl-ext=)(.*)$/ { fullopt=$0; canonopt=deesc("-cl-ext"); optarg=gensub(/(-cl-ext=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-cl-denorms-are-zero$/ { fullopt=$0; canonopt=deesc("-cl-denorms-are-zero"); inc=1; do_output(fullopt); next; }
/^(-chain-include)$/     { fullopt=$0; canonopt=deesc("-chain-include"); snarfing_optarg=1; inc=2; next; }
/^-cfguard-no-checks$/ { fullopt=$0; canonopt=deesc("-cfguard-no-checks"); inc=1; do_output(fullopt); next; }
/^-cfguard$/ { fullopt=$0; canonopt=deesc("-cfguard"); inc=1; do_output(fullopt); next; }
/^-cfg-add-implicit-dtors$/ { fullopt=$0; canonopt=deesc("-cfg-add-implicit-dtors"); inc=1; do_output(fullopt); next; }
/^-cc1$/ { fullopt=$0; canonopt=deesc("-cc1"); inc=1; do_output(fullopt); next; }
/^(-c-isystem)$/     { fullopt=$0; canonopt=deesc("-c-isystem"); snarfing_optarg=1; inc=2; next; }
/^-c$/ { fullopt=$0; canonopt=deesc("-c"); inc=1; do_output(fullopt); next; }
/^-building-pch-with-obj$/ { fullopt=$0; canonopt=deesc("-building-pch-with-obj"); inc=1; do_output(fullopt); next; }
/^(-aux-triple)$/     { fullopt=$0; canonopt=deesc("-aux-triple"); snarfing_optarg=1; inc=2; next; }
/^(-aux-target-feature)$/     { fullopt=$0; canonopt=deesc("-aux-target-feature"); snarfing_optarg=1; inc=2; next; }
/^(-aux-target-cpu)$/     { fullopt=$0; canonopt=deesc("-aux-target-cpu"); snarfing_optarg=1; inc=2; next; }
/^-ast-view$/ { fullopt=$0; canonopt=deesc("-ast-view"); inc=1; do_output(fullopt); next; }
/^-ast-print$/ { fullopt=$0; canonopt=deesc("-ast-print"); inc=1; do_output(fullopt); next; }
/^(-ast-merge)$/     { fullopt=$0; canonopt=deesc("-ast-merge"); snarfing_optarg=1; inc=2; next; }
/^-ast-list$/ { fullopt=$0; canonopt=deesc("-ast-list"); inc=1; do_output(fullopt); next; }
/^(-ast-dump=)(.*)$/ { fullopt=$0; canonopt=deesc("-ast-dump"); optarg=gensub(/(-ast-dump=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-ast-dump-lookups$/ { fullopt=$0; canonopt=deesc("-ast-dump-lookups"); inc=1; do_output(fullopt); next; }
/^(-ast-dump-filter)$/     { fullopt=$0; canonopt=deesc("-ast-dump-filter"); snarfing_optarg=1; inc=2; next; }
/^-ast-dump-decl-types$/ { fullopt=$0; canonopt=deesc("-ast-dump-decl-types"); inc=1; do_output(fullopt); next; }
/^(-ast-dump-all=)(.*)$/ { fullopt=$0; canonopt=deesc("-ast-dump-all"); optarg=gensub(/(-ast-dump-all=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-ast-dump-all$/ { fullopt=$0; canonopt=deesc("-ast-dump-all"); inc=1; do_output(fullopt); next; }
/^-ast-dump$/ { fullopt=$0; canonopt=deesc("-ast-dump"); inc=1; do_output(fullopt); next; }
/^(-arcmt-migrate-report-output)$/     { fullopt=$0; canonopt=deesc("-arcmt-migrate-report-output"); snarfing_optarg=1; inc=2; next; }
/^-arcmt-migrate-emit-errors$/ { fullopt=$0; canonopt=deesc("-arcmt-migrate-emit-errors"); inc=1; do_output(fullopt); next; }
/^(-arcmt-action=)(.*)$/ { fullopt=$0; canonopt=deesc("-arcmt-action"); optarg=gensub(/(-arcmt-action=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-analyzer-werror$/ { fullopt=$0; canonopt=deesc("-analyzer-werror"); inc=1; do_output(fullopt); next; }
/^-analyzer-viz-egraph-graphviz$/ { fullopt=$0; canonopt=deesc("-analyzer-viz-egraph-graphviz"); inc=1; do_output(fullopt); next; }
/^(-analyzer-store)$/     { fullopt=$0; canonopt=deesc("-analyzer-store"); snarfing_optarg=1; inc=2; next; }
/^-analyzer-stats$/ { fullopt=$0; canonopt=deesc("-analyzer-stats"); inc=1; do_output(fullopt); next; }
/^(-analyzer-purge)$/     { fullopt=$0; canonopt=deesc("-analyzer-purge"); snarfing_optarg=1; inc=2; next; }
/^(-analyzer-output)$/     { fullopt=$0; canonopt=deesc("-analyzer-output"); snarfing_optarg=1; inc=2; next; }
/^-analyzer-opt-analyze-nested-blocks$/ { fullopt=$0; canonopt=deesc("-analyzer-opt-analyze-nested-blocks"); inc=1; do_output(fullopt); next; }
/^-analyzer-opt-analyze-headers$/ { fullopt=$0; canonopt=deesc("-analyzer-opt-analyze-headers"); inc=1; do_output(fullopt); next; }
/^(-analyzer-max-loop)$/     { fullopt=$0; canonopt=deesc("-analyzer-max-loop"); snarfing_optarg=1; inc=2; next; }
/^-analyzer-list-enabled-checkers$/ { fullopt=$0; canonopt=deesc("-analyzer-list-enabled-checkers"); inc=1; do_output(fullopt); next; }
/^(-analyzer-inlining-mode)$/     { fullopt=$0; canonopt=deesc("-analyzer-inlining-mode"); snarfing_optarg=1; inc=2; next; }
/^(-analyzer-inline-max-stack-depth)$/     { fullopt=$0; canonopt=deesc("-analyzer-inline-max-stack-depth"); snarfing_optarg=1; inc=2; next; }
/^(-analyzer-dump-egraph)$/     { fullopt=$0; canonopt=deesc("-analyzer-dump-egraph"); snarfing_optarg=1; inc=2; next; }
/^-analyzer-display-progress$/ { fullopt=$0; canonopt=deesc("-analyzer-display-progress"); inc=1; do_output(fullopt); next; }
/^-analyzer-disable-retry-exhausted$/ { fullopt=$0; canonopt=deesc("-analyzer-disable-retry-exhausted"); inc=1; do_output(fullopt); next; }
/^(-analyzer-disable-checker)$/     { fullopt=$0; canonopt=deesc("-analyzer-disable-checker"); snarfing_optarg=1; inc=2; next; }
/^-analyzer-disable-all-checks$/ { fullopt=$0; canonopt=deesc("-analyzer-disable-all-checks"); inc=1; do_output(fullopt); next; }
/^(-analyzer-constraints)$/     { fullopt=$0; canonopt=deesc("-analyzer-constraints"); snarfing_optarg=1; inc=2; next; }
/^(-analyzer-config)$/     { fullopt=$0; canonopt=deesc("-analyzer-config"); snarfing_optarg=1; inc=2; next; }
/^-analyzer-config-help$/ { fullopt=$0; canonopt=deesc("-analyzer-config-help"); inc=1; do_output(fullopt); next; }
/^(-analyzer-config-compatibility-mode)$/     { fullopt=$0; canonopt=deesc("-analyzer-config-compatibility-mode"); snarfing_optarg=1; inc=2; next; }
/^(-analyzer-checker)$/     { fullopt=$0; canonopt=deesc("-analyzer-checker"); snarfing_optarg=1; inc=2; next; }
/^-analyzer-checker-option-help-developer$/ { fullopt=$0; canonopt=deesc("-analyzer-checker-option-help-developer"); inc=1; do_output(fullopt); next; }
/^-analyzer-checker-option-help-alpha$/ { fullopt=$0; canonopt=deesc("-analyzer-checker-option-help-alpha"); inc=1; do_output(fullopt); next; }
/^-analyzer-checker-option-help$/ { fullopt=$0; canonopt=deesc("-analyzer-checker-option-help"); inc=1; do_output(fullopt); next; }
/^-analyzer-checker-help-developer$/ { fullopt=$0; canonopt=deesc("-analyzer-checker-help-developer"); inc=1; do_output(fullopt); next; }
/^-analyzer-checker-help-alpha$/ { fullopt=$0; canonopt=deesc("-analyzer-checker-help-alpha"); inc=1; do_output(fullopt); next; }
/^-analyzer-checker-help$/ { fullopt=$0; canonopt=deesc("-analyzer-checker-help"); inc=1; do_output(fullopt); next; }
/^(-analyze-function)$/     { fullopt=$0; canonopt=deesc("-analyze-function"); snarfing_optarg=1; inc=2; next; }
/^-analyze$/ { fullopt=$0; canonopt=deesc("-analyze"); inc=1; do_output(fullopt); next; }
/^(-add-plugin)$/     { fullopt=$0; canonopt=deesc("-add-plugin"); snarfing_optarg=1; inc=2; next; }
/^(-Xpreprocessor)$/     { fullopt=$0; canonopt=deesc("-Xpreprocessor"); snarfing_optarg=1; inc=2; next; }
/^(-Xopenmp-target)$/     { fullopt=$0; canonopt=deesc("-Xopenmp-target"); snarfing_optarg=1; inc=2; next; }
/^(-Xopenmp-target=)(.*)$/ { fullopt=$0; canonopt=deesc("-Xopenmp-target"); optarg=gensub(/(-Xopenmp-target=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-Xlinker)$/     { fullopt=$0; canonopt=deesc("-Xlinker"); snarfing_optarg=1; inc=2; next; }
/^(-Xcuda-ptxas)$/     { fullopt=$0; canonopt=deesc("-Xcuda-ptxas"); snarfing_optarg=1; inc=2; next; }
/^(-Xcuda-fatbinary)$/     { fullopt=$0; canonopt=deesc("-Xcuda-fatbinary"); snarfing_optarg=1; inc=2; next; }
/^(-Xclang)$/     { fullopt=$0; canonopt=deesc("-Xclang"); snarfing_optarg=1; inc=2; next; }
/^(-Xassembler)$/     { fullopt=$0; canonopt=deesc("-Xassembler"); snarfing_optarg=1; inc=2; next; }
/^(-Xarch_host)$/     { fullopt=$0; canonopt=deesc("-Xarch_host"); snarfing_optarg=1; inc=2; next; }
/^(-Xarch_device)$/     { fullopt=$0; canonopt=deesc("-Xarch_device"); snarfing_optarg=1; inc=2; next; }
/^(-Xanalyzer)$/     { fullopt=$0; canonopt=deesc("-Xanalyzer"); snarfing_optarg=1; inc=2; next; }
/^(-Wundef-prefix=)(.*)$/ { fullopt=$0; canonopt=deesc("-Wundef-prefix"); optarg=gensub(/(-Wundef-prefix=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-Wp,)(.*)$/ { fullopt=$0; canonopt=deesc("-Wp,"); optarg=gensub(/(-Wp,)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Wno-rewrite-macros$/ { fullopt=$0; canonopt=deesc("-Wno-rewrite-macros"); inc=1; do_output(fullopt); next; }
/^-Wno-deprecated$/ { fullopt=$0; canonopt=deesc("-Wno-deprecated"); inc=1; do_output(fullopt); next; }
/^(-Wl,)(.*)$/ { fullopt=$0; canonopt=deesc("-Wl,"); optarg=gensub(/(-Wl,)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Wdeprecated$/ { fullopt=$0; canonopt=deesc("-Wdeprecated"); inc=1; do_output(fullopt); next; }
/^(-Wa,)(.*)$/ { fullopt=$0; canonopt=deesc("-Wa,"); optarg=gensub(/(-Wa,)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-W)(.*)$/ { fullopt=$0; canonopt=deesc("-W"); optarg=gensub(/(-W)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-U)$/     { fullopt=$0; canonopt=deesc("-U"); snarfing_optarg=1; inc=2; next; }
/^(-Ttext)$/     { fullopt=$0; canonopt=deesc("-Ttext"); snarfing_optarg=1; inc=2; next; }
/^(-Tdata)$/     { fullopt=$0; canonopt=deesc("-Tdata"); snarfing_optarg=1; inc=2; next; }
/^(-Tbss)$/     { fullopt=$0; canonopt=deesc("-Tbss"); snarfing_optarg=1; inc=2; next; }
/^(-T)$/     { fullopt=$0; canonopt=deesc("-T"); snarfing_optarg=1; inc=2; next; }
/^-S$/ { fullopt=$0; canonopt=deesc("-S"); inc=1; do_output(fullopt); next; }
/^(-Rpass=)(.*)$/ { fullopt=$0; canonopt=deesc("-Rpass"); optarg=gensub(/(-Rpass=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-Rpass-missed=)(.*)$/ { fullopt=$0; canonopt=deesc("-Rpass-missed"); optarg=gensub(/(-Rpass-missed=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-Rpass-analysis=)(.*)$/ { fullopt=$0; canonopt=deesc("-Rpass-analysis"); optarg=gensub(/(-Rpass-analysis=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-R)(.*)$/ { fullopt=$0; canonopt=deesc("-R"); optarg=gensub(/(-R)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-Qy$/ { fullopt=$0; canonopt=deesc("-Qy"); inc=1; do_output(fullopt); next; }
/^-Qunused-arguments$/ { fullopt=$0; canonopt=deesc("-Qunused-arguments"); inc=1; do_output(fullopt); next; }
/^-Qn$/ { fullopt=$0; canonopt=deesc("-Qn"); inc=1; do_output(fullopt); next; }
/^-P$/ { fullopt=$0; canonopt=deesc("-P"); inc=1; do_output(fullopt); next; }
/^-ObjC\+\+$/ { fullopt=$0; canonopt=deesc("-ObjC\+\+"); inc=1; do_output(fullopt); next; }
/^-ObjC$/ { fullopt=$0; canonopt=deesc("-ObjC"); inc=1; do_output(fullopt); next; }
/^-MV$/ { fullopt=$0; canonopt=deesc("-MV"); inc=1; do_output(fullopt); next; }
/^(-MT)$/     { fullopt=$0; canonopt=deesc("-MT"); snarfing_optarg=1; inc=2; next; }
/^(-MQ)$/     { fullopt=$0; canonopt=deesc("-MQ"); snarfing_optarg=1; inc=2; next; }
/^-MP$/ { fullopt=$0; canonopt=deesc("-MP"); inc=1; do_output(fullopt); next; }
/^-MMD$/ { fullopt=$0; canonopt=deesc("-MMD"); inc=1; do_output(fullopt); next; }
/^-MM$/ { fullopt=$0; canonopt=deesc("-MM"); inc=1; do_output(fullopt); next; }
/^(-MJ)$/     { fullopt=$0; canonopt=deesc("-MJ"); snarfing_optarg=1; inc=2; next; }
/^-MG$/ { fullopt=$0; canonopt=deesc("-MG"); inc=1; do_output(fullopt); next; }
/^(-MF)$/     { fullopt=$0; canonopt=deesc("-MF"); snarfing_optarg=1; inc=2; next; }
/^-MD$/ { fullopt=$0; canonopt=deesc("-MD"); inc=1; do_output(fullopt); next; }
/^-M$/ { fullopt=$0; canonopt=deesc("-M"); inc=1; do_output(fullopt); next; }
/^(-L)$/     { fullopt=$0; canonopt=deesc("-L"); snarfing_optarg=1; inc=2; next; }
/^(-I)$/     { fullopt=$0; canonopt=deesc("-I"); snarfing_optarg=1; inc=2; next; }
/^-I-$/ { fullopt=$0; canonopt=deesc("-I-"); inc=1; do_output(fullopt); next; }
/^-H$/ { fullopt=$0; canonopt=deesc("-H"); inc=1; do_output(fullopt); next; }
/^(-G)$/     { fullopt=$0; canonopt=deesc("-G"); snarfing_optarg=1; inc=2; next; }
/^(-F)$/     { fullopt=$0; canonopt=deesc("-F"); snarfing_optarg=1; inc=2; next; }
/^-Eonly$/ { fullopt=$0; canonopt=deesc("-Eonly"); inc=1; do_output(fullopt); next; }
/^(-D)$/     { fullopt=$0; canonopt=deesc("-D"); snarfing_optarg=1; inc=2; next; }
/^-CC$/ { fullopt=$0; canonopt=deesc("-CC"); inc=1; do_output(fullopt); next; }
/^-C$/ { fullopt=$0; canonopt=deesc("-C"); inc=1; do_output(fullopt); next; }
/^(-B)$/     { fullopt=$0; canonopt=deesc("-B"); snarfing_optarg=1; inc=2; next; }
/^--version$/ { fullopt=$0; canonopt=deesc("--version"); inc=1; do_output(fullopt); next; }
/^--verify-debug-info$/ { fullopt=$0; canonopt=deesc("--verify-debug-info"); inc=1; do_output(fullopt); next; }
/^(--target=)(.*)$/ { fullopt=$0; canonopt=deesc("--target"); optarg=gensub(/(--target=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(--system-header-prefix=)(.*)$/ { fullopt=$0; canonopt=deesc("--system-header-prefix"); optarg=gensub(/(--system-header-prefix=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^--show-includes$/ { fullopt=$0; canonopt=deesc("--show-includes"); inc=1; do_output(fullopt); next; }
/^(--rocm-path=)(.*)$/ { fullopt=$0; canonopt=deesc("--rocm-path"); optarg=gensub(/(--rocm-path=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(--rocm-device-lib-path=)(.*)$/ { fullopt=$0; canonopt=deesc("--rocm-device-lib-path"); optarg=gensub(/(--rocm-device-lib-path=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(--ptxas-path=)(.*)$/ { fullopt=$0; canonopt=deesc("--ptxas-path"); optarg=gensub(/(--ptxas-path=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^--precompile$/ { fullopt=$0; canonopt=deesc("--precompile"); inc=1; do_output(fullopt); next; }
/^(--offload-arch=)(.*)$/ { fullopt=$0; canonopt=deesc("--offload-arch"); optarg=gensub(/(--offload-arch=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(--no-system-header-prefix=)(.*)$/ { fullopt=$0; canonopt=deesc("--no-system-header-prefix"); optarg=gensub(/(--no-system-header-prefix=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(--no-offload-arch=)(.*)$/ { fullopt=$0; canonopt=deesc("--no-offload-arch"); optarg=gensub(/(--no-offload-arch=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^--no-gpu-bundle-output$/ { fullopt=$0; canonopt=deesc("--no-gpu-bundle-output"); inc=1; do_output(fullopt); next; }
/^--no-cuda-version-check$/ { fullopt=$0; canonopt=deesc("--no-cuda-version-check"); inc=1; do_output(fullopt); next; }
/^(--no-cuda-include-ptx=)(.*)$/ { fullopt=$0; canonopt=deesc("--no-cuda-include-ptx"); optarg=gensub(/(--no-cuda-include-ptx=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^--mrelax-relocations$/ { fullopt=$0; canonopt=deesc("--mrelax-relocations"); inc=1; do_output(fullopt); next; }
/^--migrate$/ { fullopt=$0; canonopt=deesc("--migrate"); inc=1; do_output(fullopt); next; }
/^(--linker-option=)(.*)$/ { fullopt=$0; canonopt=deesc("--linker-option"); optarg=gensub(/(--linker-option=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(--libomptarget-nvptx-bc-path=)(.*)$/ { fullopt=$0; canonopt=deesc("--libomptarget-nvptx-bc-path"); optarg=gensub(/(--libomptarget-nvptx-bc-path=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(--libomptarget-amdgcn-bc-path=)(.*)$/ { fullopt=$0; canonopt=deesc("--libomptarget-amdgcn-bc-path"); optarg=gensub(/(--libomptarget-amdgcn-bc-path=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(--hip-version=)(.*)$/ { fullopt=$0; canonopt=deesc("--hip-version"); optarg=gensub(/(--hip-version=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(--hip-path=)(.*)$/ { fullopt=$0; canonopt=deesc("--hip-path"); optarg=gensub(/(--hip-path=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^--hip-link$/ { fullopt=$0; canonopt=deesc("--hip-link"); inc=1; do_output(fullopt); next; }
/^(--hip-device-lib=)(.*)$/ { fullopt=$0; canonopt=deesc("--hip-device-lib"); optarg=gensub(/(--hip-device-lib=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^--help-hidden$/ { fullopt=$0; canonopt=deesc("--help-hidden"); inc=1; do_output(fullopt); next; }
/^(--gpu-max-threads-per-block=)(.*)$/ { fullopt=$0; canonopt=deesc("--gpu-max-threads-per-block"); optarg=gensub(/(--gpu-max-threads-per-block=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(--gpu-instrument-lib=)(.*)$/ { fullopt=$0; canonopt=deesc("--gpu-instrument-lib"); optarg=gensub(/(--gpu-instrument-lib=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^--gpu-bundle-output$/ { fullopt=$0; canonopt=deesc("--gpu-bundle-output"); inc=1; do_output(fullopt); next; }
/^(--gcc-toolchain=)(.*)$/ { fullopt=$0; canonopt=deesc("--gcc-toolchain"); optarg=gensub(/(--gcc-toolchain=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^--emit-static-lib$/ { fullopt=$0; canonopt=deesc("--emit-static-lib"); inc=1; do_output(fullopt); next; }
/^(--dependent-lib=)(.*)$/ { fullopt=$0; canonopt=deesc("--dependent-lib"); optarg=gensub(/(--dependent-lib=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(--cuda-path=)(.*)$/ { fullopt=$0; canonopt=deesc("--cuda-path"); optarg=gensub(/(--cuda-path=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^--cuda-path-ignore-env$/ { fullopt=$0; canonopt=deesc("--cuda-path-ignore-env"); inc=1; do_output(fullopt); next; }
/^--cuda-noopt-device-debug$/ { fullopt=$0; canonopt=deesc("--cuda-noopt-device-debug"); inc=1; do_output(fullopt); next; }
/^(--cuda-include-ptx=)(.*)$/ { fullopt=$0; canonopt=deesc("--cuda-include-ptx"); optarg=gensub(/(--cuda-include-ptx=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^--cuda-host-only$/ { fullopt=$0; canonopt=deesc("--cuda-host-only"); inc=1; do_output(fullopt); next; }
/^--cuda-device-only$/ { fullopt=$0; canonopt=deesc("--cuda-device-only"); inc=1; do_output(fullopt); next; }
/^--cuda-compile-host-device$/ { fullopt=$0; canonopt=deesc("--cuda-compile-host-device"); inc=1; do_output(fullopt); next; }
/^(--config)$/     { fullopt=$0; canonopt=deesc("--config"); snarfing_optarg=1; inc=2; next; }
/^(--analyzer-output)$/     { fullopt=$0; canonopt=deesc("--analyzer-output"); snarfing_optarg=1; inc=2; next; }
/^--analyze$/ { fullopt=$0; canonopt=deesc("--analyze"); inc=1; do_output(fullopt); next; }
/^(--amdgpu-arch-tool=)(.*)$/ { fullopt=$0; canonopt=deesc("--amdgpu-arch-tool"); optarg=gensub(/(--amdgpu-arch-tool=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-###$/ { fullopt=$0; canonopt=deesc("-###"); inc=1; do_output(fullopt); next; }
# END GENERATED clang_optawk
'
gcc_driver_optawk='# BEGIN GENERATED gcc_driver_optawk
/^(-x)$/     { fullopt=$0; canonopt=deesc("-x"); snarfing_optarg=1; inc=2; next; }
/^(-wrapper)$/     { fullopt=$0; canonopt=deesc("-wrapper"); snarfing_optarg=1; inc=2; next; }
/^-v$/ { fullopt=$0; canonopt=deesc("-v"); inc=1; do_output(fullopt); next; }
/^-time$/ { fullopt=$0; canonopt=deesc("-time"); inc=1; do_output(fullopt); next; }
/^(-std=)(.*)$/ { fullopt=$0; canonopt=deesc("-std"); optarg=gensub(/(-std=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-specs=)(.*)$/ { fullopt=$0; canonopt=deesc("-specs"); optarg=gensub(/(-specs=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-shared$/ { fullopt=$0; canonopt=deesc("-shared"); inc=1; do_output(fullopt); next; }
/^(-save-temps=)(.*)$/ { fullopt=$0; canonopt=deesc("-save-temps"); optarg=gensub(/(-save-temps=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-save-temps$/ { fullopt=$0; canonopt=deesc("-save-temps"); inc=1; do_output(fullopt); next; }
/^-print-sysroot-headers-suffix$/ { fullopt=$0; canonopt=deesc("-print-sysroot-headers-suffix"); inc=1; do_output(fullopt); next; }
/^-print-sysroot$/ { fullopt=$0; canonopt=deesc("-print-sysroot"); inc=1; do_output(fullopt); next; }
/^-print-search-dirs$/ { fullopt=$0; canonopt=deesc("-print-search-dirs"); inc=1; do_output(fullopt); next; }
/^(-print-prog-name=)(.*)$/ { fullopt=$0; canonopt=deesc("-print-prog-name"); optarg=gensub(/(-print-prog-name=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-print-multiarch$/ { fullopt=$0; canonopt=deesc("-print-multiarch"); inc=1; do_output(fullopt); next; }
/^-print-multi-os-directory$/ { fullopt=$0; canonopt=deesc("-print-multi-os-directory"); inc=1; do_output(fullopt); next; }
/^-print-multi-lib$/ { fullopt=$0; canonopt=deesc("-print-multi-lib"); inc=1; do_output(fullopt); next; }
/^-print-multi-directory$/ { fullopt=$0; canonopt=deesc("-print-multi-directory"); inc=1; do_output(fullopt); next; }
/^-print-libgcc-file-name$/ { fullopt=$0; canonopt=deesc("-print-libgcc-file-name"); inc=1; do_output(fullopt); next; }
/^(-print-file-name=)(.*)$/ { fullopt=$0; canonopt=deesc("-print-file-name"); optarg=gensub(/(-print-file-name=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-pipe$/ { fullopt=$0; canonopt=deesc("-pipe"); inc=1; do_output(fullopt); next; }
/^-pie$/ { fullopt=$0; canonopt=deesc("-pie"); inc=1; do_output(fullopt); next; }
/^-pass-exit-codes$/ { fullopt=$0; canonopt=deesc("-pass-exit-codes"); inc=1; do_output(fullopt); next; }
/^(-o)$/     { fullopt=$0; canonopt=deesc("-o"); snarfing_optarg=1; inc=2; next; }
/^-no-integrated-cpp$/ { fullopt=$0; canonopt=deesc("-no-integrated-cpp"); inc=1; do_output(fullopt); next; }
/^-no-canonical-prefixes$/ { fullopt=$0; canonopt=deesc("-no-canonical-prefixes"); inc=1; do_output(fullopt); next; }
/^-dumpversion$/ { fullopt=$0; canonopt=deesc("-dumpversion"); inc=1; do_output(fullopt); next; }
/^-dumpspecs$/ { fullopt=$0; canonopt=deesc("-dumpspecs"); inc=1; do_output(fullopt); next; }
/^-dumpmachine$/ { fullopt=$0; canonopt=deesc("-dumpmachine"); inc=1; do_output(fullopt); next; }
/^-c$/ { fullopt=$0; canonopt=deesc("-c"); inc=1; do_output(fullopt); next; }
/^(-Xpreprocessor)$/     { fullopt=$0; canonopt=deesc("-Xpreprocessor"); snarfing_optarg=1; inc=2; next; }
/^(-Xlinker)$/     { fullopt=$0; canonopt=deesc("-Xlinker"); snarfing_optarg=1; inc=2; next; }
/^(-Xassembler)$/     { fullopt=$0; canonopt=deesc("-Xassembler"); snarfing_optarg=1; inc=2; next; }
/^(-Wp,)(.*)$/ { fullopt=$0; canonopt=deesc("-Wp,"); optarg=gensub(/(-Wp,)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-Wl,)(.*)$/ { fullopt=$0; canonopt=deesc("-Wl,"); optarg=gensub(/(-Wl,)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-Wa,)(.*)$/ { fullopt=$0; canonopt=deesc("-Wa,"); optarg=gensub(/(-Wa,)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^-S$/ { fullopt=$0; canonopt=deesc("-S"); inc=1; do_output(fullopt); next; }
/^(-B)$/     { fullopt=$0; canonopt=deesc("-B"); snarfing_optarg=1; inc=2; next; }
/^--version$/ { fullopt=$0; canonopt=deesc("--version"); inc=1; do_output(fullopt); next; }
/^--target-help$/ { fullopt=$0; canonopt=deesc("--target-help"); inc=1; do_output(fullopt); next; }
/^(--sysroot=)(.*)$/ { fullopt=$0; canonopt=deesc("--sysroot"); optarg=gensub(/(--sysroot=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(--help=)(.*)$/ { fullopt=$0; canonopt=deesc("--help"); optarg=gensub(/(--help=)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^--help$/ { fullopt=$0; canonopt=deesc("--help"); inc=1; do_output(fullopt); next; }
/^-###$/ { fullopt=$0; canonopt=deesc("-###"); inc=1; do_output(fullopt); next; }
# END GENERATED gcc_driver_optawk
# manually added ones (FIXME: report gcc bugs!):
/^-wrapper$/ { fullopt=$0; canonopt="-wrapper"; snarfing_optarg=1; inc=2; next; }
/^-no-integrated-cpp$/ { fullopt=$0; canonopt="-no-integrated-cpp"; inc=1; do_output(fullopt); next; }
/^(-g)([1-9])$/ { fullopt=$0; canonopt="-g"; optarg=gensub(/^(-g)([1-9])$/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-g)$/ { fullopt=$0; canonopt="-g"; inc=1; optarg=""; do_output(fullopt); next; }
# remember that in the driver, unlike cc1, -MD takes no argument
/^(-MD)$/  { fullopt=$0; canonopt="-MD"; optarg=""; do_output(fullopt); next; }
/^(-MMD)$/  { fullopt=$0; canonopt="-MMD"; optarg=""; do_output(fullopt); next; }
/^(-U)$/     { fullopt=$0; canonopt="-U"; snarfing_optarg=1; inc=2; next; }
/^(-U)(.*)$/ { fullopt=$0; canonopt="-U"; optarg=gensub(/(-U)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-Os)$/ { fullopt=$0; canonopt="-Os"; inc=1; optarg=""; do_output(fullopt); next; }
/^(-Og)$/ { fullopt=$0; canonopt="-Og"; optarg=""; do_output(fullopt); next; }
/^(-Ofast)$/ { fullopt=$0; canonopt="-Ofast"; optarg=""; do_output(fullopt); next; }
/^(-O)(.*)$/ { fullopt=$0; canonopt="-O"; optarg=gensub(/(-O)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-MT)$/     { fullopt=$0; canonopt="-MT"; snarfing_optarg=1; inc=2; next; }
/^(-MQ)$/     { fullopt=$0; canonopt="-MQ"; snarfing_optarg=1; inc=2; next; }
/^(-MP)$/ { fullopt=$0; canonopt="-MP"; inc=1; optarg=""; do_output(fullopt); next; }
/^(-MM)$/ { fullopt=$0; canonopt="-MM"; inc=1; optarg=""; do_output(fullopt); next; }
/^(-MG)$/ { fullopt=$0; canonopt="-MG"; inc=1; optarg=""; do_output(fullopt); next; }
/^(-MF)$/     { fullopt=$0; canonopt="-MF"; snarfing_optarg=1; inc=2; next; }
/^(-M)$/ { fullopt=$0; canonopt="-M"; inc=1; optarg=""; do_output(fullopt); next; }
/^(-L)$/     { fullopt=$0; canonopt="-L"; snarfing_optarg=1; inc=2; next; }
/^(-L)(.*)$/ { fullopt=$0; canonopt="-L"; optarg=gensub(/(-L)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-I)$/     { fullopt=$0; canonopt="-I"; snarfing_optarg=1; inc=2; next; }
/^(-I)(.*)$/ { fullopt=$0; canonopt="-I"; optarg=gensub(/(-I)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-D)$/     { fullopt=$0; canonopt="-D"; snarfing_optarg=1; inc=2; next; }
/^(-D)(.*)$/ { fullopt=$0; canonopt="-D"; optarg=gensub(/(-D)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
/^(-A)$/     { fullopt=$0; canonopt="-A"; snarfing_optarg=1; inc=2; next; }
/^(-A)(.*)$/ { fullopt=$0; canonopt="-A"; optarg=gensub(/(-A)(.*)/, "\\2", 1); inc=1; do_output(fullopt); next; }
# now the "standard" pass-through cases: other kinds of -g, -f, -m, -O, -W, or --param
/^-g.*/  { fullopt=$0; canonopt=$0; inc=1; optarg=""; do_output(fullopt); next; }
/^-f.*/  { fullopt=$0; canonopt=$0; inc=1; optarg=""; do_output(fullopt); next; }
/^-m.*/  { fullopt=$0; canonopt=$0; inc=1; optarg=""; do_output(fullopt); next; }
/^-O.*/  { fullopt=$0; canonopt=$0; inc=1; optarg=""; do_output(fullopt); next; }
/^-W.*/  { fullopt=$0; canonopt=$0; inc=1; optarg=""; do_output(fullopt); next; }
/^--param=.*/  { fullopt=$0; canonopt=$0; inc=1; optarg=""; do_output(fullopt); next; }
/^--param$/    { fullopt=$0; canonopt="--param"; snarfing_optarg=1; inc=2; next; }
'
# use this with 'eval', having set $prefix, to declare
# all the arrays we set as output when scanning.
declare_scan_outputs=\
$'declare    ${prefix}_argcount\n'\
$'declare -a ${prefix}_args\n'\
$'declare -a ${prefix}_input_files_by_argposn\n'\
$'declare -A ${prefix}_input_files_index\n'\
$'declare -A ${prefix}_head_word_indices\n'\
$'declare -a ${prefix}_canonopts_by_argposn\n'\
$'declare -a ${prefix}_fullopts_by_argposn\n'\
$'declare -A ${prefix}_optposns_by_canonopt\n'\
$'declare -A ${prefix}_optposns_by_fullopt\n'\
$'declare -A ${prefix}_optargposns_by_canonopt\n'\
$'declare -a ${prefix}_optargs_by_argposn\n'\
$'declare -a ${prefix}_incs_by_argposn'

# helpers for piping arguments to large awk programs
# make sure $* gets expanded *after* IFS is set in a one-shot style
echo_args () { echo -n "$*"; }
run_awkprog () {
    local var_prefix="$1"
    local awkprog="$2"
    shift; shift
    awkfile="$(mktemp "${TMPDIR:-/tmp}"/tmp.awk.$(echo "$var_prefix" | tr -cd 'a-z0-9_' ).XXXXXX )"
    cat >"$awkfile" <<<"$awkprog"
    awkinput="$(cat)"
    debug_print 3 "awk input: $awkinput"
    # use "| tee /dev/stderr" to inspect the generated awk
    awkout="$( awk -v var_prefix="$var_prefix" -f "$awkfile" "$@" <<<"$awkinput" )"
    if [[ -z "$DEBUG_CC" ]]; then rm -f "$awkfile"; fi
    if [[ ${DEBUG_CC:-0} -gt 2 ]]; then echo "$awkout" 1>&2; fi
    echo "$awkout"
}

scan_generic_awk () {
    local awkvar="$1"
    local var_prefix="$2"
    local cmd="$3"         # FIXME: ignored! I think we use var_prefix instead
    issued_helpmsg=0
    shift; shift; shift
    # How can we share the logic that wraps around what is generated?
    # - the case stmt is its own function (name taken as an argument)
    # - inc is initially 0
    # - a separate case split in the caller handles -, -*, * -- detected by inc == 0
    debug_print 3 "Declaring aliases with prefix $var_prefix"
    # We are keeping:
    # input_files_by_argposn  sparse array, one entry for each arg that is an input file
    # input_files_index       associative array, stores '1' at every input file name, null otherwise
    # head_word_indices       associative array, positions that start a chunk, keyed on the arg at the head of chunk
    # canonopts_by_argposn    sparse array, one entry for each arg that is an option, canonicalised
    # fullopts_by_argposn     sparse array, one entry for each arg that is an option, not canonicalised
    # incs_by_argposn         sparse array, one entry for whenever there is an 'inc' > 1 -- how many to increment argpos by to get to the next input file or opt
    # optposns_by_canonopt    associative array, one entry (space-sep list of indices) per canonopt seen
    # optposns_by_fullopt     associative array, one entry (space-sep list of indices) per fullopt seen
    # optargposns_by_canonopt associative array, one entry (space-sep list of indices) per optarg seen
    #    ^-- is this really useful? for a JARG it gives us the whole opt, not the isolated optarg
    #    Maybe we should just use the inc and keep optargs_by_argposn? YES
    # optargs_by_argposn      sparse array, one entry (the optarg) for each arg that embodies an optarg
    # REMEMBER: be consistent about "posn" versus "pos"
    # We need to remember 'increments' on a per-argposn basis.
    # We extend this to capture the optarg also.
    # At any position, there may be an optarg... e.g. for -foo=bar, "bar" is at
    # whatever position "-foo" is at, but for "-foo bar", "bar" is at the next position.
    declare -n argcount=${var_prefix}_argcount
    declare -n args=${var_prefix}_args
    declare -n input_files_by_argposn=${var_prefix}_input_files_by_argposn
    declare -n input_files_index=${var_prefix}_input_files_index
    declare -n head_word_indices=${var_prefix}_head_word_indices
    declare -n canonopts_by_argposn=${var_prefix}_canonopts_by_argposn
    declare -n fullopts_by_argposn=${var_prefix}_fullopts_by_argposn
    declare -n incs_by_argposn=${var_prefix}_incs_by_argposn
    declare -n optposns_by_canonopt=${var_prefix}_optposns_by_canonopt
    declare -n optposns_by_fullopt=${var_prefix}_optposns_by_fullopt
    declare -n optargposns_by_canonopt=${var_prefix}_optargposns_by_canonopt
    declare -n optargs_by_argposn=${var_prefix}_optargs_by_argposn

    #cat >"$awkfile" <<<"${awk_pre}$( $optlinefunc | optlines_to_awk)${awk_post}${awk_do_output}"
    declare -n optawk="$awkvar"
    debug_print 2 "awk program ($awkvar) has $(echo "$optawk"  | wc -l ) option lines"
    awkout="$( IFS=$'\n' echo_args "$@" | run_awkprog "$var_prefix" "${awk_pre}${optawk}${awk_post}${awk_do_output}" \
       -v suppress_warnings=${suppress_warnings:-""} )"
    debug_print 2 "awk output was a program of $(echo "$awkout" | wc -l) lines"
    if [[ ${DEBUG_CC:-0} -gt 2 ]]; then
        echo "$awkout" 1>&2
    fi
    eval "$awkout"
    debug_print 3 "Finished scan with prefix ${var_prefix}; argcount was ${argcount}"
}

combined_driver_optlines () {
    { gcc_driver_optlines ; clang_driver_optlines; } | sort -r | uniq
}
combined_driver_optawk="${gcc_driver_optawk}"$'\n'"${clang_optawk}"

# Now let's do a scanner. NOTE: currently we don't use this driver scanner. We use a combined
# version.
scan_gcc_driver () {
    local gcc="$1"
    shift
    scan_generic_awk gcc_driver_optawk gcc_driver "${gcc:-gcc}" "$@"
}

# The same as scanning a driver command line, but also recognise
# any args in the "CC_IDENTIFY_ARGS" optlines provided in the environment.
# Note that we expect our arguments to have been supplied, by the caller, from CC_DRIVER_ARGS,
# which has been preprocessed to rewrite -Wp, into -Xpreprocessor.
#
# Before doing this, the caller needs to have declared the output
# arrays with the driver_plus_identified prefix, e.g. using 'prefix=driver_plus_identified eval "$declare_scan_outputs"'
# ... without this, expect problems like the following:
# bash: -Wp,: syntax error: operand expected (error token is ",")
scan_driver_plus_identified () {
    local driver="$1"
    shift
    scan_generic_awk combined_driver_optawk_plus_identified_optawk \
        driver_plus_identified "${driver:-cc}" "$@"
}

scan_gcc_cc1 () {
    local cc1="$1"
    shift
    scan_generic_awk gcc_cc1_optawk gcc_cc1 "${cc1:-cc1}" "$@"
}
scan_clang () {
    local clang="$1"
    shift
    scan_generic_awk clang_optawk clang "${clang:-clang}" "$@"
    #scan_generic clang_optcases clang_optlines clang "${clang:-clang}" "$@"
}
# we want it to be possible to write wrappers
# as shell functions, not just commands.
do_exec () {
    local descr="$1"
    shift
    debug_print 1 "Doing ($descr): $@"
#    exec "$@"
    "$@"
    status=$?
    exit $status
}

# utility for as-wrappers
parse_assembler_command () {
    debug_print 1 "My as: $@"
    as="$1"
    shift
    declare -ga as_args
    declare -ga as_infiles
    for a in `seq 1 $#`; do
        as_args[$ctr]="${!a}"
        ctr=$(( $ctr + 1 ))
    done
    declare -ga as_options
    ctr=0
    while expr match "$1" '^-.*' >/dev/null; do
        as_options[$ctr]="$1"
        ctr=$(( $ctr + 1 ))
        case "$1" in
            ('--')  # no more args
                shift; break
            ;;
            # options taking a non-option-looking argument
            ('-o')
                as_outfile="$2"
            ;;&
            (--debug-prefix-map|-I|--MD|-o)
                as_options[$ctr]="$2"
                ctr=$(( $ctr + 1 ))
                shift
            ;;
            (-*)
                # some other option
            ;;
            (*) # error!
                debug_print 1 "Unrecognised 'as' option: $1"
                false
            ;;
        esac
        shift || break
    done
    debug_print 1 "as args left over ($#): $@"
    ctr=0
    for a in `seq 1 $#`; do
        as_infiles[$ctr]="${!a}"
        ctr=$(( $ctr + 1 ))
    done
}

# output comma-separated positions for one or more options,
# as found in the scan-generated arrays identified by 'prefix'.
# To minimise subprocesses in the following, we output an array
# and then use IFS=',' to comma-separate it
list_fulloptposns () {
    output=""
    local prefix="$1"
    shift
    declare -n optposns_by_fullopt=${prefix}_optposns_by_fullopt
    initargs="$@"
    declare -a posns
    debug_print 2 "Searching (list) for any of $# fullopts: $@"
    for n in `seq 1 $#`; do
        local arg="${!n}"
        debug_print 3 "O ($prefix) considering $arg (${!optposns_by_fullopt[*]})"
        if [[ -v optposns_by_fullopt[$arg] ]]; then
            output="${output:+${output},}$(echo "${optposns_by_fullopt[$arg]}" | tr -s '[:blank:]' ',' )"
        fi
    done
    debug_print 2 "fulloptposns ($prefix) for ${initargs}: $output"
    echo "$output"
}
get_fulloptposns () {
    local prefix="$1"
    shift
    declare -n optposns_by_fullopt=${prefix}_optposns_by_fullopt
    echo "Searching (get) for any of $# fullopts: $@" 1>&2
    for n in `seq 1 $#`; do
        local arg="${!n}"
        if [[ -v optposns_by_fullopt[$arg] ]]; then
            echo "${optposns_by_fullopt[$arg]}"
        fi
    done
}
# Instead of writing to stdout, declare an array and output to that -- seems
# faster?
setarr_fulloptposns () {
    local prefix="$1"
    declare -a ${prefix}_fulloptposns
    declare -n out=${prefix}_fulloptposns
    local -n ctr=${prefix}_fulloptposns_count
    ctr=0
    shift
    declare -n optposns_by_fullopt=${prefix}_optposns_by_fullopt
    debug_print 2 "Searching (setarr) for any of $# fullopts: $@"
    for n in `seq 1 $#`; do
        local arg="${!n}"
        if [[ -v optposns_by_fullopt[$arg] ]]; then
            out[$ctr]="${optposns_by_fullopt[$arg]}"
            ctr=$(( $ctr + 1 ))
        fi
    done
    #eval ${prefix}_fulloptposns_count=$ctr
}
list_optposns () {
    output=""
    local prefix="$1"
    shift
    declare -n optposns_by_canonopt=${prefix}_optposns_by_canonopt
    initargs="$@"
    debug_print 2 "Searching (list) for any of $# opts: $@"
    for n in `seq 1 $#`; do
        local arg="${!n}"
        debug_print 3 "O ($prefix) considering $arg (${!optposns_by_canonopt[*]})"
        if [[ -v optposns_by_canonopt[$arg] ]]; then
            output="${output:+${output},}$(echo "${optposns_by_canonopt[$arg]}" | tr -s '[:blank:]' ',' )"
        fi
    done
    debug_print 2 "optposns ($prefix) for ${initargs}: $output"
    echo "$output"
}
list_optargposns () {
    output=""
    local prefix="$1"
    shift
    declare -n optargposns_by_canonopt=${prefix}_optargposns_by_canonopt
    initargs="$@"
    debug_print 2 "Searching (list) for any of $# optargs: $@"
    for n in `seq 1 $#`; do
        local arg="${!n}"
        debug_print 3 "A ($prefix) considering $arg (${!opgtargposns_by_canonopt[*]})"
        if [[ -v optargposns_by_canonopt[$arg] ]]; then
            output="${output:+${output},}$(echo "${optargposns_by_canonopt[$arg]}" | tr -s '[:blank:]' ','  )"
        fi
    done
    debug_print 2 "argposns ($prefix) for ${initargs}: $output"
    echo "$output"
}
get_optposn_unique () {
    local prefix="$1"
    shift
    local posnlist="$(list_optposns "$prefix" "$@")"
    declare -n args=${prefix}_args
    debug_print 2 "Searching (get unique) for any of $# optargs: $@"
    case "$posnlist" in
        ('') # OK, we get nothing
        ;;
        (*,*) # not OK
            echo "Error: option {$@} does not appear uniquely" 1>&2
            exit 1
        ;;
        (*) # OK, we get something unique
            echo "${args[$posnlist]}"
        ;;
    esac
}
get_optargposn_unique () {
    local prefix="$1"
    shift
    local posnlist="$(list_optargposns "$prefix" "$@")"
    declare -n args=${prefix}_args
    debug_print 2 "Searching (get unique) for any of $# optposns: $@"
    case "$posnlist" in
        ('') # OK, we get nothing
        ;;
        (*,*) # not OK
            echo "Error: option {$@} does not appear (with an argument) uniquely" 1>&2
            exit 1
        ;;
        (*) # OK, we get something unique
            echo "${args[$posnlist]}"
        ;;
    esac
}
get_optposn_greatest () {
    local prefix="$1"
    shift
    list_optposns "$prefix" "$@" | tr ',' '\n' | sort -rn | head -n1
}
get_optargposn_greatest () {
    local prefix="$1"
    shift
    list_optargposns "$prefix" "$@" | tr ',' '\n' | sort -rn | head -n1
}
# This logic should work the same for gcc/cc1 and clang.
command_is_pp () {
    local prefix="$1"
    shift
    declare -n optposns_by_canonopt=${prefix}_optposns_by_canonopt
    declare -n optargs_by_argposn=${prefix}_optargs_by_argposn
    # we're pp iff we saw -E  and we are not suppressing pp output via -M or -MM
    case "$(list_optposns "$prefix" "-M" "-MM")" in
        ('') local doing_m=0 ;;
        (*)  local doing_m=1 ;;
    esac
    local result=0
    local reason="default"
    case "${optposns_by_canonopt["-E"]}" in
        ('') result=1; reason="do not have -E" # not pp
        ;;
        (*) # looks like it is pp, but are we suppressing preprocessor output?
            if [[ $doing_m -eq 1 ]]; then
                echo "WARNING: trivially not pp because no pp output generated" 1>&2
                reason="no output"
                result=1 # not pp, because we do not generate any preprocessor output
            else
                result=0 # is pp
            fi
        ;;
    esac
    # sanity checks, for debugging
    # 1. if our output file ends in .i but we think we're not pp, worth a warning
    local minus_o_pos=${optposns_by_canonopt["-o"]}
    if [[ $result -eq 1 ]] && [[ -n "$minus_o_pos" ]]; then
        local output_file="${optargs_by_argposn[$minus_o_pos]}"
        case "$output_file" in
            (*.i) # warn!
                echo "WARNING: we think we're not pp (reason: $reason), but output file is $output_file" 1>&2
                ;;
            (*) true ;;
        esac
    fi
    return $result
}

# How do we walk the arguments we scanned and simply repeat them?
# FIXME: write a generic walker/rescanner
# ... maybe something like:
# visit_opts
# visit_input_files

print_one () {
    local argposn="$1"
    local prefix="$2"
    declare -n args=${prefix}_args
    declare -n input_files_by_argposn=${prefix}_input_files_by_argposn
    declare -n canonopts_by_argposn=${prefix}_canonopts_by_argposn
    declare -n optargs_by_argposn=${prefix}_optargs_by_argposn
    declare -n incs_by_argposn=${prefix}_incs_by_argposn
    local inc=${incs_by_argposn[$argposn]}
    echo -n "${argposn}: ${args[$argposn]}"
    for n in `seq $(( $argposn + 1 )) $(( $argposn + $inc - 1 ))`; do
        echo -n " "
        echo -n "${args[$n]}"
    done
    echo -n " ("
    echo -n "inc is ${inc:-1}; "
    if [[ -n "${input_files_by_argposn[$argposn]}" ]]; then
        echo -n "input file"
    else
        echo -n "option, canonically \`${canonopts_by_argposn[$argposn]}'"
        if [[ $inc -eq 1 ]]; then
            # we scraped the optarg, if there was one
            local maybe_optarg="${optargs_by_argposn[$argposn]}"
            if [[ -n "$maybe_optarg" ]]; then
                echo -n ", joined argument \`$maybe_optarg'"
            fi
        elif [[ $inc -eq 2 ]]; then
            local maybe_optarg="${optargs_by_argposn[$argposn]}"
            if [[ -n "$maybe_optarg" ]]; then
                echo -n ", separate argument \`$maybe_optarg'"
            fi
        fi
    fi
    echo ")"
}
print_all () {
    prefix="$1"
    local argposn=1
    declare -n argcount=${prefix}_argcount
    declare -n incs_by_argposn=${prefix}_incs_by_argposn
    echo "${prefix}_argcount is $argcount" 1>&2
    while [[ $argposn -lt $argcount ]]; do
        print_one "$argposn" "$prefix" 1>&2
        local inc=${incs_by_argposn[$argposn]:-1}
        argposn=$(( $argposn + $inc ))
    done
}

# Like gcc_cc1_optcases, but we also accept additional options specified via
# the environment variable CC_IDENTIFY_ARGS.
# Note that this variable fulfils two functions: it defines extra option arguments
# which we scan here (using our "optline" JARG/SARG syntax)
# and it specifies which options the inferior tool would like us to scan
# for it. This is a bit of an abuse. In particular, if the tool wants us to
# scan something, say "-I", then we will generate a completely redundant "-I"
# case here. The goal of specifying it is so that we will set CC_IDENTIFIED_ARGS
# giving the argument positions where it appears.

# A valid word in CC_IDENTIFY_ARGS might not begin with '-'; if it doesn't,
# it is considered to stand for input files. We filter these out here.
input_files_are_identified=0
identified_optlines () {
    for w in $CC_IDENTIFY_ARGS; do
        case $w in
            (-*) echo $w ;;
            (*)  input_files_are_identified=1 ;;
        esac
    done
}
gcc_cc1_optlines_plus_identified_optlines () {
    { gcc_driver_optlines; identified_optlines; } | sort -r
}

identified_optawk="$( identified_optlines | optlines_to_awk )"
gcc_cc1_optawk_plus_identified_optawk="$gcc_cc1_optawk""$identified_optawk"

combined_driver_optlines_plus_identified_optlines () {
    { combined_driver_optlines; identified_optlines; } | sort -r
}

combined_driver_optawk_plus_identified_optawk="$combined_driver_optawk""$( identified_optlines | optlines_to_awk )"

lift_gcc_cc1_to_cc () {
    local cc_cmd_nwords="$1"
    local cc1="$2"
    shift; shift
    # TWO WAYS of guessing where to insert -Xpreprocessor.
    # (1) "Did it appear with -Xpreprocessor in the driver command?"
    # (2) "Knowing what we know about the driver, does it pass through the driver?"
    #
    # Number 1 is annoying because we don't know where to look in the driver command.
    # If we have a cc1 chunk [-blah, myarg] we could scan the whole command for a subsequence
    # [-Xpreprocessor, -blah, -Xpreprocessor, myarg]
    # But this is quadratic. We do have to scan multiple times to allow for reorderings.
    # Number 2 is easier: we can try passing our chunk through the driver awk program
    # and seeing if it gets consumed in a single pass with an inc equal to the chunk size.
    # Here we are additionally assuming that no option has a different meaning between driver and cc1.
    # OH BUT IT DOES: -MD. We have to handle this specially anyway.
    # Obviously we only insert -Xpreprocessor if we're pp.
    # If we're compiler-proper and we detect an option that doesn't pass through,
    # it must be generated by the driver and so we assume it can generate it again.
    # OH, but what about driver-generated options if we are pp? Then we will
    # spuriously, but *probably* harmlessly, qualify them with -Xpreprocessor.

    # we need already to have done this 'declare' stuff in the caller, or it won't be able to see the vars
    #prefix="gcc_cc1" eval "$declare_scan_outputs"
    scan_generic_awk gcc_cc1_optawk_plus_identified_optawk gcc_cc1 \
           "${cc1:-cc1}" "$@"
    # are we pp?
    if command_is_pp gcc_cc1; then is_pp=1; else is_pp=0; fi
    debug_print 2 "is pp (1 means yes)? $is_pp" 1>&2

    if [[ ${DEBUG_CC:-0} -gt 0 ]]; then
        print_all gcc_cc1 1>&2
    fi

    if [[ "$(list_optposns "gcc_cc1" "-o" "--output")" == "" ]] && \
       [[ "$(list_optposns "gcc_cc1" "-M" "-MM" )"    == "" ]]; then
        # no output file... hmm
        echo "FIXME: can't work with cc1/cc1plus commands with no output file" 1>&2
        # this is totally fixable but requires us to reimplement cc1's rules for
        # generating the .s or .i output filename... 
        exit 1
    fi

    # We will assume any pparg whose appearance count matches across these two scans
    # should be -Xpreprocessor-qualified, i.e. does not pass through the driver as-is.
    # XXX: revise this logic!!
    # Something like:
    # - does not scan as a driver option, but
    #    - does scan as a cc1 option or an identified option?
    # How do we test this "does not scan"?
    # Do we need to, even?
    # If we see a bona fide -Xpreprocessor in the driver,
    # maybe so-qualify the first bona-fide occurrence of "the thing to its right" if/as it appears in cc1 command?
    
    # + FIXME: note the above is *just* scanning the pp-directed args, as scraped from
    # the driver command!
    # Instead we want to scan the whole cc1 command line
    # but then check what was -Xpreprocessor-qualified in the driver command line. (? SOMETHING LIKE THIS)

    # If we have no CC_DRIVER_ARGS, don't give "" to scan_driver_plus_identified
    prefix="driver_plus_identified" eval "$declare_scan_outputs"
    if [[ -n "$CC_DRIVER_ARGS" ]]; then
        debug_print 1 "CC_DRIVER_ARGS is $CC_DRIVER_ARGS"
        # remember that CC_DRIVER_ARGS is quoted already, and has had -Wp,... rewritten already
        # We use 'eval' to unquote $CC_DRIVER_ARGS
        eval scan_driver_plus_identified "$CC_DRIVER" $CC_DRIVER_ARGS
        if [[ ${DEBUG_CC:-0} -gt 0 ]]; then
            print_all driver_plus_identified 1>&2
        fi
    else
        # only warn if we're pp
        if [[ -z "$CC_DRIVER_ARGS" ]] && [[ $is_pp -eq 1 ]]; then
            echo "Warning: without CC_DRIVER_ARGS, may erroneously give driver cpp-specific option -foo not -Wp,-foo" 1>&2
        fi
        # if we have no CC_DRIVER_ARGS then what do we assume about what will pass through?
        # FIXME: I guess we should fall back to the slower awk-based method of drip-feeding each chunk
        # through the driver awk program and seeing if we get unrecognised=1
    fi
    debug_print 2 "All head word indices in driver command: ${driver_plus_identified_head_word_indices[@]}"
    debug_print 2 "All head words in driver command: ${!driver_plus_identified_head_word_indices[@]}"

    # Now we can walk the args using the incs we collected, and write 'outargs'
    # which is our lifted set of args for the driver.
    # We know we have to:
    # - rewrite -MD into -MD -MF
    #     -- can cc1 take -MD _ -MF _? yes, but the later overrides the earlier
    #     -- so we rewrite to -MD -MF <later-given filename>
    # - drop anything not driver-friendly (by patterns)
    # - if we're pp, put "-Xpreprocessor" before anything we saw in the driver args
    #     that was -Wp- or -Xpreprocessor-qualified
    #     if we're sure this is the same arg.
    #        NOTE that in the case of -Wp,arg1,arg2, we need to put -Xpreprocessor before
    #        both arg1 and arg2.
    outctr=1  # we start at position 1
    md_argind="$(get_optargposn_greatest "gcc_cc1" "-MD" "-MMD")"
    mf_argind="$(get_optargposn_greatest "gcc_cc1" "-MF" )"
    debug_print 3 "md, mf arginds: $md_argind, $mf_argind"
    local inposn=1
    local suppress_arg=0
    debug_print 2 "gcc_cc1_argcount is $gcc_cc1_argcount"
    # We use this shell function to do the output.
    # It takes care of prefixing with -Xpreprocessor and also
    # appending the outctr to CC_IDENTIFIED_ARGS if needed.
    # Note that it does not advance inposn.
    output_one () {
        local arg="$1"
        local arg_prefix="$2"
        debug_print 3 "outputting arg: $arg"
        # an empty prefix means no prefix
        case "$arg_prefix" in
            (?*) # non-empty
                outargs[$outctr]="$arg_prefix"
                outctr=$(( $outctr + 1 ))
            ;;&
            (*)
                outargs[$outctr]="$arg"
                outctr=$(( $outctr + 1 ))
            ;;
        esac
        # Is this an "identified" arg?
        # If we do scan_generic with this awk, we will generate some shell code
        # that... we may not want? Well, it tells us 'unrecognised' so maybe that's enough?
        # We also want 'inc'... do we get this?
        # FIXME: per-arg awk invocation is bad. How can we avoid this here?
        # The obvious angle is to run all our output args through the awk program once,
        # at the end.
        prefix="cc_identified" eval "$declare_scan_outputs"
        unrecognised=0
        # we're scanning with a known-incomplete set of optlines, so suppress warnings
        suppress_warnings=1  # HACK
        scan_generic_awk identified_optawk cc_identified \
           "${CC_DRIVER:-cc}" "$arg"
        suppress_warnings=""
        if [[ "$unrecognised" -eq 0 ]]; then
            # outctr is the index of the *next* value we'll add, i.e. the out we just output is outctr - 1
            # GAH. It gets worse. If our CPP is "mycc -E", then our outargs will start at position 2
            # on the command line, not position 1. That's why we have $cc_cmd_nwords. Our IDENTIFIED
            # description needs to be using indices from hte actual argv that will be seen by the
            # command we run.
            local addtext="$(( ${outctr} + ${cc_cmd_nwords} - 2 ))-$(( $outctr + ${cc_cmd_nwords} - 2 + $inc - 1 ))$arg"
            case "$arg" in
                (-?*)
                # this option was recognised as identified
                CC_IDENTIFIED_ARGS="${CC_IDENTIFIED_ARGS:+${CC_IDENTIFIED_ARGS} }$addtext"
                ;;
                (*)
                # filename (might be '-')! are those identified?
                if [[ $filenames_are_identified -eq 1 ]]; then
                    CC_IDENTIFIED_ARGS="${CC_IDENTIFIED_ARGS:+${CC_IDENTIFIED_ARGS} }$addtext"
                fi
                ;;
            esac
        fi
    }
    # last_ ...? something to do with identified args
    case_stmt="case \"\$1\" in `identified_optlines | optlines_to_caselines` esac"
    # FIXME: WHY is this loop so SLOW?!
    # It isn't the eval'd case statement. It's in the "any other arg" part.
    # Ditching the setarr_fulloptposns / get_fulloptposns, in favour of
    # an open-coded -v test, has helped a bit. Ditching the | grep "$arg" | wc -l
    # subshells, in favour of pp_as_cc1_input_files_index, has also helped
    # quite a bit.
    while [[ $inposn -le ${gcc_cc1_argcount} ]]; do
        suppress_arg=0
        arg="${gcc_cc1_args[$inposn]}"

        # Is this arg one of the "identified" args?
        # That means our inferior tool (say cilpp) wants us to tell it
        # where in the command line it is, to save it from scanning for it.
        # Since they were identified by an optstring (in CC_IDENTIFY_ARGS),
        # we need to match the arg against the optstring.
        inc=0; fullopt=""; canonopt="";
        eval "$case_stmt"
        # For now we remember the number of input arguments in this position
        # that match an identified param; 0 means it's not identified.
        # We will process
        n_identified="$inc"
        if [[ $n_identified -gt 0 ]]; then
            fullopt_identified="$fullopt"
            canonopt_identified="$canonopt"
        fi

        # If we have -MD,
        # and if this is -MF, or if it's -MD or -MMD but not the greatest md argind,
        # skip it and its argument
        # Else if it's -MD or -MMD, include it and also a -MF
        # (slurped using the greatest argind of *either* md *or* mf argind)
        #
        # Beware: e.g. from GNU hello:
        # gcc .. -MD -MF lib/.deps/basename-lgpl.Tpo
        # v
        # cc1 -MD lib/basename-lgpl.d -MF lib/.deps/basename-lgpl.Tpo
        # v
        # gcc -MD -MF lib/basename-lgpl.d
        # i.e. our explicit -MF argument needs to win if it comes later in the command.
        if [[ -n "$md_argind" ]]; then
            debug_print 3 "Triggered special -MD handling at $inposn"
            # We have an explicit -MD, so we will generate an -MF; skip this explicit -MF
            # but we will retrieve its argument if it wins over (appears later than) -MD
            if [[ "$arg" == "-MF" ]]; then
                # skip it and its argument
                inposn=$(( $inposn + 2 ))
                continue
            fi
            if [[ "$arg" == "-MD" ]] || [[ "$arg" == "-MMD" ]] && [[ $inposn -lt $md_argind ]]; then
                # skip it and its argument
                inposn=$(( $inposn + 2 ))
                continue
            fi
            if [[ "$arg" == "-MD" ]] || [[ "$arg" == "-MMD" ]]; then
                # FIXME: if -MD or -MMD or -MF are "identified" args, this needs reflecting
                # here.
                output_one "$arg"
                output_one "-MF"
                # What's the real -MF argument? If it comes later, it wins.
                if [[ $inposn -lt ${mf_argind:-0} ]]; then
                    # the explicit -MF should win
                    mf_arg="${gcc_cc1_args[$(( ${mf_argind} + 1 ))]}"
                else
                    mf_arg="${gcc_cc1_args[$(($inposn + 1))]}"
                fi
                output_one "$mf_arg"
                inposn=$(( $inposn + 2 ))
                continue
            fi
            debug_print 3 "Special -MD handling has nothing to do at $inposn"
        fi
        # if we got here, we are not dealing with -MD

        # how many will we inc by?
        inc=${gcc_cc1_incs_by_argposn[$inposn]:-1}

        # Nasty problem: reinserting -Xpreprocessor when needed.
        # It boils down to thefollowing question:
        #
        # Does this option chunk pass through the driver with the same inc, and without
        # hitting the "unrecognised" case (this matters when inc==1)?

        # ONE APPROACH: we can ask our driver's awk program whether it passes through.
        # Essentially what we do is feed the awk program a single chunk and see what 'inc'
        # arises. The right way to get that is incs_by_argposn[1], which if unset
        # means 1.
        #
        # HOWEVER, feeding it a chunk at a time is slow, i.e. running awk many times.
        # INSTEAD we first try to look at 'head words'.
        # - scan the driver all in one go
        # - if we saw the current head word as a head word then,
        #        AND it was not qualified by -Xpreprocessor,
        #        AND if there is more to the chunk, it matches us here,
        #   THEN assume we will pass through the driver, so just issue with no prefix.
        # ELSE if if did have -Xpreprocessor, use that again (no need to check the rest of the chunk)
        # meaning IMPLICITLY the arg will get dropped if we're doing compilation proper, not preprocessing.
        debug_print 3 "driver cmd head word indices for \`$arg': ${driver_plus_identified_head_word_indices["$arg"]}"
        # If a word/chunk is not in the driver command, what do we assume?
        # GAH. This doesn't work for -o. So our logic is wrong... too quick
        # to guard things. We have to allow non-verbatim chunks.
        # We could whitelist those options that the driver is allowed to change...
        # that is a hack.
        # I think we just need to be more permissive: if the head word appears
        # unqualified, it's understood by the driver, so we don't care whether
        # its argument matches
        if [[ -v gcc_cc1_input_files_by_argposn[$inposn] ]]; then
            # let input files pass through
            arg_prefix=""
            suppress_arg=0
        else
            # it's not an input file...
            # is it a head word that was *passed to* the driver when we scanned its command?
            # First set some safe defaults
            arg_prefix=""
            suppress_arg=1
            for n in ${driver_plus_identified_head_word_indices["$arg"]}; do
                # we get one n for each place where this word appeared in the driver command
                #
                # We used to guard on the rest of the chunk matching:
                #    ( [[ ${driver_plus_identified_incs_by_argposn[$n]:-1} -eq 1 ]] || \
                #        [[ "${driver_plus_identified_args[$(( $n + 1 ))]}" == "${gcc_cc1_args[$(( $inposn + 1 ))]}" ]] )
                # but that breaks "-o"! And other chunks that get mutated by the driver.
                # Also, if it's an input file i.e. doesn't look like an option, we always pass it through.

                if [[ "${driver_plus_identified_args[$(( $n - 1 ))]}" != "-Xpreprocessor" ]] # EXTRACTED here
                then
                    # it's a match! i.e. we've seen this arg as an unprefixed head word to the driver
                    # we assume it passes through
                    suppress_arg=0
                    break
                fi
            done
            if [[ $suppress_arg -eq 1 ]]; then
                # one more shot at trying not to suppress this....
                # The head word was not seen on the driver command line... OK, but
                #  *would* it be recognised by the driver?
                # FIXME: do this in a way that avoids per-opt awking...
                # ... can we optionally pass the awk script a "pre-inc" variable
                # i.e. a previously determined list of incs
                # which it uses in preference to the incs it figures out for itself?
                # Then if there's an unrecognised separate-arg option, we won't desync.
                awk_output="$( for n in `seq $inposn $(( $inposn + $inc - 1 ))`; do printf "%s\n" "${gcc_cc1_args[${n}]}"; done | \
                   run_awkprog "driver_test" \
                      "${awk_pre}${gcc_driver_optawk}${awk_post}" \
                      -v suppress_warnings=1
                )" #"
                # incs_by_argposn is only set for incs greater than one
                reported_inc="$( sed -n '/^incs_by_argposn\[1\]=/ {s///;p}' <<<"$awk_output" | sed 's/^[[:blank:]]*$/1/' | tr -cd '0-9' )"
                # ... so when using reported_inc, default to 1
                reported_unrecognised="$( tail -n3 <<<"$awk_output" | sed -n '/^unrecognised=/ {s///;p}' )"
                debug_print 3 "awk output: $awk_output"
                debug_print 2 "chunk length $inc beginning ${gcc_cc1_args[$inposn]}: reported inc? ${reported_inc:-(defaulted to 1)}; unrecog? $reported_unrecognised"
                if ! [[ ${reported_inc:-1} -eq ${inc:-1} ]] || \
                     ( [[ ${inc:-1} -eq 1 ]] && [[ $reported_unrecognised -eq 1 ]]); then
                    # it was not recognised by the driver
                    if [[ $is_pp -eq 1 ]]; then
                        arg_prefix="-Xpreprocessor"
                        suppress_arg=0
                    else
                        # need to suppress
                        # FIXME: set up some -Xcompiler-like checking via an env var
                        arg_prefix=""
                        suppress_arg=1
                    fi
                else
                    # it was recognised by the driver
                    arg_prefix=""
                    suppress_arg=0
                fi
            fi
        fi

        if [[ $suppress_arg -eq 0 ]]; then
            if [[ $n_identified -gt 0 ]]; then
                # This means it matched a caseline, so let's update CC_IDENTIFIED_ARGS
                if [[ -n "$arg_prefix" ]]; then
                    # Use 'seq' with its FIRST INCREMENT LAST form
                    seq="$( seq $outctr 2 $(( $outctr + ( 2 * $inc ) - 1 )) )"
                else
                    seq="$( seq $outctr $(( $outctr + $inc - 1 )) )"
                fi
                local tok="$( echo "$seq" | tr -s '[:blank:]' ',')$1"
                # Remember that our indices need to come from the output space.
                # Also I think we don't support identifying -MD or -MF, since we
                # rewrote these above.
                # We could modify output_one to build the comma-separated part of the
                # "identified" token as it goes.
                CC_IDENTIFIED_ARGS="${CC_IDENTIFIED_ARGS:+${CC_IDENTIFIED_ARGS} }$tok"
            fi
            # output the arg itself
            output_one "$arg" "$arg_prefix"
            # this will output zero or more additional args, also prefixed if necessary
            for n in `seq $(( $inposn + 1 )) $(( $inposn + $inc - 1 ))`; do
                output_one "${gcc_cc1_args[$n]}" "$arg_prefix"
            done
        else
            # WARN -- FIXME: we should make this more prominent for cases that
            # are not known to us, as it is a common source of breakage.
            debug_print 3 "Suppressing believed-driver-choking arg $arg ${arg_prefix:+(prefix: ${arg_prefix})}"
        fi
        suppress_arg=0
        inposn=$(( $inposn + $inc ))
    done
    debug_print 1 "exporting CC_IDENTIFIED_ARGS=\"$CC_IDENTIFIED_ARGS\""
    export CC_IDENTIFIED_ARGS
}
detraditionalize_clang_if_needed () {
    outctr=1  # we start at position 1
    traditional_cpp_argind="$(get_optposn_greatest "clang" "-traditional-cpp" "--traditional-cpp")"
    local inposn=1
    while [[ $inposn -le ${clang_argcount} ]]; do
        arg="${clang_args[$inposn]}"
        # If we have -MD,
        # and if this is -MF, or if it's -MD or -MMD but not the greatest md argind,
        # skip it and its argument
        # Else if it's -MD or -MMD, include it and also a -MF (slurped using the greatest argind
        # of *either* md *or* mf argind)
        # FIXME: handle case where some of {-traditional-cpp, --traditional-cpp} are
        # passed multiple times (i.e. don't just do a single -eq test)
        if [[ -n "$traditional_cpp_argind" ]] && [[ -n "$CPP_NOT_TRADITIONAL" ]] \
        && [[ $inposn -eq $traditional_cpp_argind ]]; then
            # skip it
            inposn=$(( $inposn + 1 ))
            continue
        fi
        if [[ -n "$CPP_NOT_TRADITIONAL"  ]]; then
            case "$arg" in
                (-traditional-cpp|--traditional-cpp) echo "ERROR! not traditionally traditional (argind: $traditional_cpp_argind)" 1>&2
                    exit 1
                ;;
                (*)
                ;;
            esac
        fi
        # how many will we inc by?
        inc=${gcc_cc1_incs_by_argposn[$inposn]:-1}

        outargs[$outctr]="$arg"; outctr=$(( $outctr + 1 ))
        # output any separate arg
        for n in `seq $(( $inposn + 1 )) $(( $inposn + $inc - 1 ))`; do
            outargs[$outctr]="${clang_args[$n]}"; outctr=$(( $outctr + 1 ))
        done

        inposn=$(( $inposn + $inc ))
    done
}

ensure_driver_best_guess () {
    # If we're run via -wrapper, we can guess the driver from the parent process.
    # This screws with testing, e.g. a workflow where the human uses -### and then
    # tries to run the wrapper commands directly. In that case, the human must
    # set CC_DRIVER and this function will never be called. We have a failsafe
    # against being run from a shell, just in case. But guessing a plausible
    # driver command is hard, because something as simple as "cc file.c" is a
    # valid driver command.
    #driver="$( ps -p $PPID -o comm= )"
    if [[ -z "$CC_DRIVER" ]]; then
        #driver_fullcmd="$( ps -p $PPID -o cmd= )"
        driver_fullcmd="$( cat /proc/$PPID/cmdline | tr '\0' '\n' )" # use "| tee /dev/stderr" to debug
        # FIXME: we could check for a -wrapper option naming us. That would actually
        # be a good filter for a "true" driver invocation. Use our own scanner to
        # pull out the -wrapper option, of course.... Currently, looks_like_driver_command
        # does a version of this check but does not use our own scanner.
        if looks_like_driver_command $driver_fullcmd ; then
            # unusual 'read': '\n' is for word-splitting and
            # using '\0' instead of newline ensures just one line
            IFS=$'\n' read -r -d $'\0' driver rest<<<"$driver_fullcmd"
            debug_print 1 "driver binary might be $driver"
            CC_DRIVER="$driver"
            # remember that 'rest' now contains newline-separated words, not quoted
            CC_DRIVER_ARGS="$( if [[ -n "$rest" ]]; then make_driver_argstring <<<"$rest"; fi )"
        else
            # What's a sanity check we can do on the parent process? For now just rule out the stupids...
            # another approach might be to look at the whole parent command line and
            # test whether it's a plausible compiler command, and insist on CC_DRIVER if
            # we don't think it is plausible.
            # One test would be whether it has "-wrapper" in it!
            echo "Bailing as could not guess driver (parent command: $driver_fullcmd)" 1>&2
            exit 1
        fi
    fi
    export CC_DRIVER
    export CC_DRIVER_ARGS
}

# Now check directly if we're being sourced, and return now if so?
# Wait a minute... don't we want to be sourceable? Since a common
# use case is to define a function my_cc () { ... } and then source
# the main wrapper script. How can we restore that use case?
# Hacked in the CC_WRAPPER_SOURCE_TO_RUN test above.
#
# If being sourced just for functions,  maybe we should just run the above code
# (defining functions) and set CC_DRIVER for the sourcing client? Setting CC_DRIVER
# is not right for all cases in the case statement below, so put it in ensure_driver_best_guess
# which we run only in the relevant branches below.
#
# In short, we can run the case statement and bail immediately below....

case "$0" in
    (*cflags|*cppflags|*cxxflags)
        /bin/echo -no-integrated-cpp -wrapper "$(readlink -f "$(dirname "$0")")"/wrapper
        exit 0
    ;;
    (*ldflags)
        /bin/echo -wrapper "$(readlink -f "$(dirname "$0")")"/wrapper
        exit 0
    ;;
    (*wrapper) # silently continue, i.e. actually act as a "-wrapper wrapper" command
        ensure_driver_best_guess
        # Now we have CC_DRIVER and CC_ARGS (or have bailed if we couldn't get them)
        # NOW WE continue with the script, after 'esac'; this is the only case that does so.
    ;;
    (*wrap) # assume the next argument is a driver command, and use -### to interrogate it,
            # i.e. act as a "ccwrap" commad in "ccwrap cc ..." ...
            # To do this we call ourselves as a wrapper
        CC_DRIVER="$1"
        export CC_DRIVER
        declare -a real_args
        ctr=0
        just_output=0
        already_traditional=0
        already_no_integrated_as=0
        already_no_integrated_cc1=0
        while shift; do
            case "$1" in
                ('') ;;
                # FIXME: this is not properly scanning the command line... run our driver
                # scanner, then sift the results.
                ('-fno-integrated-as'|'-no-integrated-as') already_no_integrated_as=1;;&
                ('-fno-integrated-cc1'|'-no-integrated-cc1') already_no_integrated_cc1=1;;&
                ('-traditional-cpp'|'--traditional-cpp') already_traditional=1 ;;&
                ('-###') just_output=1 ;;&
                (*)
                    real_args[$ctr]="$1"
                ;;
            esac
            ctr=$(( $ctr + 1 ))
        done
        CC_DRIVER_ARGS="$( IFS=$'\n'; echo "${real_args[*]}" | make_driver_argstring )"
        export CC_DRIVER_ARGS
        # We will add '-traditional-cpp' to force a separate preprocessing command...
        # only do this if it's not already present. Remember if we added it.
        if [[ $already_traditional -eq 0 ]]; then
            traditional_arg="-traditional-cpp"
            export CPP_NOT_TRADITIONAL=1
        else traditional_arg=""
        fi
        # Unlike the traditional-cpp thing, we don't have to undo -fno-integrated-as
        # later, because (at least in principle, FIXME) it does't change the semantics
        # of the command.
        if [[ $already_no_integrated_as -eq 0 ]]; then
            as_arg="-fno-integrated-as"
        fi
        # Ditto
        if [[ $already_no_integrated_cc1 -eq 0 ]]; then
            cc1_arg="-fno-integrated-cc1"
        fi
        # Now we need to implement "-wrapper" ourselves, in effect, given a driver $driver
        # that does not support "-wrapper" but does support "-###".
        # What we do next depends on whether "-###" appears in the command already.
        # If it does, we output the command we *would* run.
        # If it doesn't, we actually run them.
        output_stderr="$( ${CC_DRIVER} -\#\#\# $traditional_arg $as_arg $cc1_arg "${real_args[@]}" 2>&1 1>&2 )"
        status=$?
        # Every legit command should begin with a space and contain a double quote
        # or a single quote or '-o'
        cmdline_filter="^ .*\([\"']\|-o\)"
        debug_print 1 "Got -### status $status and output: $output_stderr"
        # Did our command actually trigger the "-###" behaviour?
        # If so, we should get at least one line matching "$cmdline_filter"
        # and also a 'Target:' and a 'Thread model:' line. If we don't get these,
        # we assume the compiler did nothing but print some informative output, so
        # we echo that and repeat its return status.
        { grep "$cmdline_filter" <<<"$output_stderr" >/dev/null && \
           grep "^Target:" <<<"$output_stderr" >/dev/null && \
           grep "^Thread model:" <<<"$output_stderr" >/dev/null; } || \
           { echo "Wrapper-degenerated $0" 1>&2; echo "$output_stderr" 1>&2; exit $status; }
        # What if we got that output because the -### was already in the command line?
        # Then we still need to wrap -- we need to output the wrapped command.
        # What's our "wrapper" self? Look for an alias of ourselves, in the
        # containing directory, whose name matches "*wrapper"
        our_realpath="$(readlink -f "$0")" #"
        ourselves_as_wrapper="$( ls "$(dirname "$our_realpath")"/*wrapper | while read cand; do
            if [[ "$(realpath "$cand")" == "$our_realpath" ]]; then
                echo "$cand"; break
            fi
        done )"
        if [[ -z "$ourselves_as_wrapper" ]]; then
            echo "Could not identify wrapper alias for $0" 1>&2
            exit 1
        else
            debug_print 1 "Identified ourselves as wrapper: $ourselves_as_wrapper"
        fi
        status=0
        while read cmdline; do
            if [[ $just_output -eq 1 ]]; then
                echo "$ourselves_as_wrapper" $cmdline 1>&2
                status=0
            else
                debug_print 1 "REALLY DOING (driver: $CC_DRIVER): " "$ourselves_as_wrapper" \
                   "$cmdline"
                "$ourselves_as_wrapper" $( eval echo $cmdline ) # cmdline is quoted
                status=$?
                debug_print 1 "Got status $status"
            fi
            if ! [[ $status -eq 0 ]]; then exit $status; fi
        done <<<"$( echo "$output_stderr" | grep "$cmdline_filter" )"
        exit $status
    ;;
    (real-ld)
        # A neat trick for wrapping ld within collect2... see below.
        # FIXME: snarf our default 'ld' the same way collect2 does it,
        # rather than just using ${LD:-ld}.
        # (Note that this whole 'real-ld' thing is specific to collect2,
        # so we don't lose any generality by doing this.)
        ${LD:-ld} "$@"
        status=$?
        exit $status
    ;;
    (*) # we're being run as another command -- just being sourced?
        return >/dev/null 2>&1 || { echo "Did not understand our own name: $0" 1>&2; exit 1; }
    ;;
esac

# OK, now bail if we're being sourced and not in a "yes but really run it" way.
(return 0 2>/dev/null) && being_sourced=1 || being_sourced=0
if [[ -z "$CC_WRAPPER_SOURCE_TO_RUN" ]] && [[ $being_sourced -eq 1 ]]; then
    return
fi

# In general, we want to run the command that the driver is running.
# To hook preprocessing, although we could wrap the GCC-private
# cc1/cc1plus command, we'd rather wrap the well-documented "cpp"
# command or the driver "cc -E". So we transform a preprocessing
# cc1/cc1plus call's args into args that work for a cpp call.
#
# We need to be able to scan a cc1 command correctly. However, it's
# partly up to the user what arguments the preprocessor accepts. For
# example, we have our own 'cilpp' preprocessor that also accepts
# -fplugin=... and -fpass-* options. If we use these with GCC, what
# happens? Do they get passed to the cc1 command? Yes, they do...
# even if it is also doing compilation proper. So with our wrapper,
# in the cilpp use case, we are simultaneously:
# - telling the driver to add some args [that are not known to the command
#     the driver wants to run]
# - wrapping the command run by the driver...
# - ... such that the added args are *not* seen by the underlying
#          preprocessing command that actually runs, but are
#          interpreted by the wrapper or another intermediary.
#
# So this means that we need to examine the driver command line also.
# If we want to do preprocessing by reinvoking the driver, we already
# had this problem: a cc1 arg '-blah' might need to become '-Wp,-blah'
# 
debug_print 1 "`basename "$1"`-wrapping ($1): $@"
case "$1" in
    (*/cc1|*/cc1plus|*/cc1obj)
        # print out how we scanned the command line
        declare -a outargs
        prefix="gcc_cc1" eval "$declare_scan_outputs"
        count_words () {
            echo $#
        }
        if command_is_pp "gcc_cc1" "$@"; then
            CPP="${CPP:-${CC_DRIVER} -E}"
            lift_gcc_cc1_to_cc `count_words $CPP` "$@"
            # the lifter tells us if we're doing cpp or cc-proper, by looking at ${prefix}_optposns_by_canonopt
            debug_print 2 "gcc_cc1_optposns_by_canonopt: ${gcc_cc1_optposns_by_canonopt[@]}"
            # CPP might be the driver (cc -E) or it might be a well-matched
            # bona fide 'cpp' command... might it? Well, not in general... we lift to
            # the driver command line language, so if the original driver command used
            # "-Xpreprocessor" or "-Wp", we will re-create these in the lifted command.
            # Most cpp options will just pass through, so it's rare to use -Wp etc.
            do_exec "CPP" ${CPP} "${outargs[@]}"
        else
            # NOTE the special placement of "-S" here. C compilers will try to produce
            # a fully linked output, so we always want the -S.
            CC="${CC:-${CC_DRIVER}} -S"
            lift_gcc_cc1_to_cc `count_words $CC` "$@"
            # the lifter tells us if we're doing cpp or cc-proper, by looking at ${prefix}_optposns_by_canonopt
            debug_print 2 "gcc_cc1_optposns_by_canonopt: ${gcc_cc1_optposns_by_canonopt[@]}"
            do_exec "CC" ${CC} "${outargs[@]}"
        fi
        ;;
    (*/clang)
        # How do we do this?
        # We assume that if it's needed, we have done the trick of adding -traditional-cpp.
        # That would ensure we get run twice: once for preprocessing, once for compilation.
        # Both will hit this case. So we still need to detect the "is pp" case and run our
        # pp wrapper specially here. If *we* added -traditional-cpp, we drop it when we
        # actually do the preprocessing step. How does "driver us" (the parent process)
        # signal that we were already traditional?
        prefix="clang" eval "$declare_scan_outputs"
        scan_clang "$@" # this writes vars
        declare -a outargs
        detraditionalize_clang_if_needed "$@"
        # FIXME: actually do the lifting to cc like we do for GCC
        if [[ "$(list_optposns "clang" "-E")" == "" ]] && \
           [[ "$(list_optposns "clang" "-S")" == "" ]] && \
           [[ "$(list_optposns "clang" "--emit-llvm-bc" "-emit-llvm-bc")" == "" ]]; then
            # something is wrong -- maybe the -traditional-cpp hack didn't work?
            echo "ERROR: failed to split clang's preprocessing and compilation steps" 1>&2
            exit 1
        elif [[ "$(list_optposns "clang" "-E")" != "" ]]; then
            CMD="${CPP:-${1}}"
            local descr="clang-pp"
        elif [[ "$(list_optposns "clang" "--emit-llvm-bc")" != "" ]]; then
            # What to do here? We just treat it as a mode of CC, i.e.
            # our compiler wrapper must support both --emit-llvm-bc and -S
            local descr="clang-cc-bc"
            CMD="${CC:-${1}}"
        else # must be -S
            local descr="clang-cc"
            CMD="${CC:-${1}}"
        fi
        do_exec "$descr" ${CMD} "${outargs[@]}"
        ;;
    (as|*/as)
        AS="${AS:-$1}" # don't call into driver again; 'as' is a documented tool
        debug_print 1 "command is $@"
        orig_as="$1"
        # set some variables that our wrapped AS might use, if a shell function
        parse_assembler_command "$@" 
        shift
        do_exec "as" ${AS} "$@"
        ;;
    (collect2|*/collect2)
        # We want to actually run collect2 but allow wrapping
        # the straight link commands that it would run.
        # https://gcc.gnu.org/onlinedocs/gccint/Collect2.html
        # ... collect2 runs the linker once, then maybe runs it again
        # with an extra (generated) input. (Sounds familiar!)
        # If we just pretend it's like ld, then collect2's
        # initialization stuff won't happen.
        # Perhaps we can do this by always running collect2 here, but
        # exploiting its rules for where it finds its 'ld' command. Those are:
        # "1. a hard coded linker file name, if GCC was configured with the --with-ld option.
        #  2. real-ld in the directories listed in the compiler's search directories.
        #  3. real-ld in the directories listed in the environment variable PATH.
        #  4. The file specified in the REAL_LD_FILE_NAME configuration macro, if specified.
        #  5. ld in the compiler's search directories, except that collect2 will not execute itself recursively.
        #  6. ld in PATH.
        #  ... where "the compiler's search directories" means all the directories where
        #     gcc searches for passes of the compiler. This includes directories that you
        #     specify with -B."
        # So we could prefix our own -B option to do this, and provide a 'real-ld' in it.
        # Obviously the directory would be our own directory and real-ld would be a symlink
        # to us. One problem: how do we tell collect2 to search this directory? It does not
        # support -B itself! Instead we have to put it in COLLECT_GCC_OPTIONS.
        collect2_cmd="$1"
        shift
        export COLLECT_GCC_OPTIONS="'-B' '$(dirname "$(readlink -f "${our_filename}")")' ${COLLECT_GCC_OPTIONS}"
        do_exec "collect2" "${collect2_cmd}" "$@"
        ;;
    (ld|*/ld)
        # if the driver wants to run 'ld' direcly, that's OK. We can wrap it
        LD="${LD:-$1}"  # don't call into driver again; ld is a documented tool
        shift
        do_exec "ld" ${LD} "$@"
        ;;
    (*) debug_print 1 "Actually not wrapping: $@" 1>&2
        do_exec "unknown($1)" "$@"
        ;;
esac
